---
source: tests/btor2_test.rs
expression: sys.serialize_to_str(&ctx)
---
DSP48E2
input RSTP : bv<1>
input RSTM : bv<1>
input RSTINMODE : bv<1>
input RSTD : bv<1>
input RSTCTRL : bv<1>
input RSTC : bv<1>
input RSTB : bv<1>
input RSTALUMODE : bv<1>
input RSTALLCARRYIN : bv<1>
input RSTA : bv<1>
input PCIN : bv<48>
input OPMODE : bv<9>
input MULTSIGNIN : bv<1>
input INMODE : bv<5>
input D : bv<27>
input CLK : bv<1>
input CEP : bv<1>
input CEM : bv<1>
input CEINMODE : bv<1>
input CED : bv<1>
input CECTRL : bv<1>
input CECARRYIN : bv<1>
input CEC : bv<1>
input CEB2 : bv<1>
input CEB1 : bv<1>
input CEALUMODE : bv<1>
input CEAD : bv<1>
input CEA2 : bv<1>
input CEA1 : bv<1>
input CARRYINSEL : bv<3>
input CARRYIN : bv<1>
input CARRYCASCIN : bv<1>
input C : bv<48>
input BCIN : bv<18>
input B : bv<18>
input ALUMODE : bv<4>
input ACIN : bv<30>
input A : bv<30>
input XORSIMD : bv<5>
input USE_WIDEXOR : bv<5>
input USE_SIMD : bv<5>
input USE_PATTERN_DETECT : bv<5>
input USE_MULT : bv<5>
input SEL_PATTERN : bv<5>
input SEL_MASK : bv<5>
input RND : bv<48>
input PREG : bv<32>
input PREADDINSEL : bv<5>
input PATTERN : bv<48>
input OPMODEREG : bv<32>
input MREG : bv<32>
input MASK : bv<48>
input IS_RSTP_INVERTED : bv<1>
input IS_RSTM_INVERTED : bv<1>
input IS_RSTINMODE_INVERTED : bv<1>
input IS_RSTD_INVERTED : bv<1>
input IS_RSTC_INVERTED : bv<1>
input IS_RSTCTRL_INVERTED : bv<1>
input IS_RSTB_INVERTED : bv<1>
input IS_RSTA_INVERTED : bv<1>
input IS_RSTALUMODE_INVERTED : bv<1>
input IS_RSTALLCARRYIN_INVERTED : bv<1>
input IS_OPMODE_INVERTED : bv<9>
input IS_INMODE_INVERTED : bv<5>
input IS_CLK_INVERTED : bv<1>
input IS_CARRYIN_INVERTED : bv<1>
input IS_ALUMODE_INVERTED : bv<4>
input INMODEREG : bv<32>
input DREG : bv<32>
input CREG : bv<32>
input CARRYINSELREG : bv<32>
input CARRYINREG : bv<32>
input B_INPUT : bv<5>
input BREG : bv<32>
input BMULTSEL : bv<5>
input BCASCREG : bv<32>
input A_INPUT : bv<5>
input AUTORESET_PRIORITY : bv<5>
input AUTORESET_PATDET : bv<5>
input AREG : bv<32>
input AMULTSEL : bv<5>
input ALUMODEREG : bv<32>
input ADREG : bv<32>
input ACASCREG : bv<32>
node CREG_BIN : bv<1> = CREG[0]
node %197 : bv<1> = eq(CREG_BIN, 1'b1)
node C_DATA_in : bv<48> = ite(%197, C_reg, C)
node %853 : bv<46> = C_DATA_in[45:0]
node %854 : bv<46> = not(%853)
node %855 : bv<48> = concat(%854, 2'b00)
node SEL_MASK_REG : bv<112> = concat(107'x000000000000000000000000000, SEL_MASK)
node %2128 : bv<1> = eq(SEL_MASK_REG, 112'x0000000000000000000000000017)
node %2129 : bv<32> = ite(%2128, 32'x00000003, 32'x00000000)
node %2131 : bv<1> = eq(SEL_MASK_REG, 112'x0000000000000000000000000016)
node %2132 : bv<32> = ite(%2131, 32'x00000002, %2129)
node %2134 : bv<1> = eq(SEL_MASK_REG, 112'x0000000000000000000000000011)
node %2135 : bv<32> = ite(%2134, 32'x00000001, %2132)
node %2137 : bv<1> = eq(SEL_MASK_REG, 112'x0000000000000000000000000008)
node %2138 : bv<32> = ite(%2137, 32'x00000000, %2135)
node SEL_MASK_BIN : bv<2> = %2138[1:0]
node %2140 : bv<32> = zext(SEL_MASK_BIN, 30)
node %2141 : bv<1> = eq(%2140, 32'x00000003)
node %2142 : bv<48> = ite(%2141, %855, MASK)
node %878 : bv<47> = C_DATA_in[46:0]
node %879 : bv<47> = not(%878)
node %880 : bv<48> = concat(%879, 1'b0)
node %2143 : bv<1> = eq(%2140, 32'x00000002)
node %2144 : bv<48> = ite(%2143, %880, %2142)
node %2145 : bv<1> = eq(%2140, 32'x00000001)
node %2146 : bv<48> = ite(%2145, C_DATA_in, %2144)
node USE_PATTERN_DETECT_REG : bv<72> = concat(67'x00000000000000000, USE_PATTERN_DETECT)
node %2148 : bv<1> = eq(USE_PATTERN_DETECT_REG, 72'x000000000000000015)
node %2149 : bv<32> = ite(%2148, 32'x00000001, 32'x00000000)
node %2151 : bv<1> = eq(USE_PATTERN_DETECT_REG, 72'x00000000000000000b)
node %2152 : bv<32> = ite(%2151, 32'x00000000, %2149)
node USE_PATTERN_DETECT_BIN : bv<1> = %2152[0]
node %2154 : bv<32> = zext(USE_PATTERN_DETECT_BIN, 31)
node %2155 : bv<1> = eq(%2154, 32'x00000000)
node the_mask : bv<48> = ite(%2155, 48'xffffffffffff, %2146)
node OPMODE_in : bv<9> = xor(OPMODE, IS_OPMODE_INVERTED)
node OPMODEREG_BIN : bv<1> = OPMODEREG[0]
node %163 : bv<1> = eq(OPMODEREG_BIN, 1'b1)
node OPMODE_mux : bv<9> = ite(%163, OPMODE_reg, OPMODE_in)
node %784 : bv<2> = OPMODE_mux[8:7]
node _procmux_634_CMP0 : bv<1> = eq(%784, 2'b11)
node %1432 : bv<48> = ite(_procmux_634_CMP0, C_DATA_in, 48'x000000000000)
node _procmux_635_CMP0 : bv<1> = eq(%784, 2'b10)
node %1433 : bv<48> = ite(_procmux_635_CMP0, RND, %1432)
node _procmux_636_CMP0 : bv<1> = eq(%784, 2'b01)
node %1434 : bv<48> = ite(_procmux_636_CMP0, P_FDBK_in, %1433)
node _procmux_637_CMP0 : bv<1> = eq(%784, 2'b00)
node wmux : bv<48> = ite(_procmux_637_CMP0, 48'x000000000000, %1434)
node %1098 : bv<31> = P_FDBK_in[47:17]
node P_FDBK_47_in : bv<1> = P_FDBK_in[47]
node %1100 : bv<32> = concat(P_FDBK_47_in, %1098)
node %1101 : bv<33> = concat(P_FDBK_47_in, %1100)
node %1102 : bv<34> = concat(P_FDBK_47_in, %1101)
node %1103 : bv<35> = concat(P_FDBK_47_in, %1102)
node %1104 : bv<36> = concat(P_FDBK_47_in, %1103)
node %1105 : bv<37> = concat(P_FDBK_47_in, %1104)
node %1106 : bv<38> = concat(P_FDBK_47_in, %1105)
node %1107 : bv<39> = concat(P_FDBK_47_in, %1106)
node %1108 : bv<40> = concat(P_FDBK_47_in, %1107)
node %1109 : bv<41> = concat(P_FDBK_47_in, %1108)
node %1110 : bv<42> = concat(P_FDBK_47_in, %1109)
node %1111 : bv<43> = concat(P_FDBK_47_in, %1110)
node %1112 : bv<44> = concat(P_FDBK_47_in, %1111)
node %1113 : bv<45> = concat(P_FDBK_47_in, %1112)
node %1114 : bv<46> = concat(P_FDBK_47_in, %1113)
node %1115 : bv<47> = concat(P_FDBK_47_in, %1114)
node %1116 : bv<48> = concat(P_FDBK_47_in, %1115)
node %165 : bv<2> = OPMODE_mux[6:5]
node _procmux_616_CMP0 : bv<1> = eq(%165, 2'b11)
node %1436 : bv<48> = ite(_procmux_616_CMP0, %1116, 48'x000000000000)
node %169 : bv<31> = PCIN[47:17]
node %170 : bv<1> = PCIN[47]
node %171 : bv<32> = concat(%170, %169)
node %172 : bv<33> = concat(%170, %171)
node %173 : bv<34> = concat(%170, %172)
node %174 : bv<35> = concat(%170, %173)
node %175 : bv<36> = concat(%170, %174)
node %176 : bv<37> = concat(%170, %175)
node %177 : bv<38> = concat(%170, %176)
node %178 : bv<39> = concat(%170, %177)
node %179 : bv<40> = concat(%170, %178)
node %180 : bv<41> = concat(%170, %179)
node %181 : bv<42> = concat(%170, %180)
node %182 : bv<43> = concat(%170, %181)
node %183 : bv<44> = concat(%170, %182)
node %184 : bv<45> = concat(%170, %183)
node %185 : bv<46> = concat(%170, %184)
node %186 : bv<47> = concat(%170, %185)
node %187 : bv<48> = concat(%170, %186)
node %188 : bv<3> = OPMODE_mux[6:4]
node _procmux_617_CMP0 : bv<1> = eq(%188, 3'b101)
node %1437 : bv<48> = ite(_procmux_617_CMP0, %187, %1436)
node _procmux_618_CMP0 : bv<1> = eq(%188, 3'b100)
node %1438 : bv<48> = ite(_procmux_618_CMP0, P_FDBK_in, %1437)
node _procmux_619_CMP0 : bv<1> = eq(%188, 3'b011)
node %1439 : bv<48> = ite(_procmux_619_CMP0, C_DATA_in, %1438)
node _procmux_620_CMP0 : bv<1> = eq(%188, 3'b010)
node %1440 : bv<48> = ite(_procmux_620_CMP0, P_FDBK_in, %1439)
node _procmux_621_CMP0 : bv<1> = eq(%188, 3'b001)
node %1441 : bv<48> = ite(_procmux_621_CMP0, PCIN, %1440)
node _procmux_622_CMP0 : bv<1> = eq(%188, 3'b000)
node zmux : bv<48> = ite(_procmux_622_CMP0, 48'x000000000000, %1441)
node ALUMODE_in : bv<4> = xor(ALUMODE, IS_ALUMODE_INVERTED)
node ALUMODEREG_BIN : bv<1> = ALUMODEREG[0]
node %89 : bv<1> = eq(ALUMODEREG_BIN, 1'b1)
node ALUMODE_DATA : bv<4> = ite(%89, ALUMODE_reg, ALUMODE_in)
node %91 : bv<1> = ALUMODE_DATA[0]
node %92 : bv<2> = concat(%91, %91)
node %93 : bv<3> = concat(%91, %92)
node %94 : bv<4> = concat(%91, %93)
node %95 : bv<5> = concat(%91, %94)
node %96 : bv<6> = concat(%91, %95)
node %97 : bv<7> = concat(%91, %96)
node %98 : bv<8> = concat(%91, %97)
node %99 : bv<9> = concat(%91, %98)
node %100 : bv<10> = concat(%91, %99)
node %101 : bv<11> = concat(%91, %100)
node %102 : bv<12> = concat(%91, %101)
node %103 : bv<13> = concat(%91, %102)
node %104 : bv<14> = concat(%91, %103)
node %105 : bv<15> = concat(%91, %104)
node %106 : bv<16> = concat(%91, %105)
node %107 : bv<17> = concat(%91, %106)
node %108 : bv<18> = concat(%91, %107)
node %109 : bv<19> = concat(%91, %108)
node %110 : bv<20> = concat(%91, %109)
node %111 : bv<21> = concat(%91, %110)
node %112 : bv<22> = concat(%91, %111)
node %113 : bv<23> = concat(%91, %112)
node %114 : bv<24> = concat(%91, %113)
node %115 : bv<25> = concat(%91, %114)
node %116 : bv<26> = concat(%91, %115)
node %117 : bv<27> = concat(%91, %116)
node %118 : bv<28> = concat(%91, %117)
node %119 : bv<29> = concat(%91, %118)
node %120 : bv<30> = concat(%91, %119)
node %121 : bv<31> = concat(%91, %120)
node %122 : bv<32> = concat(%91, %121)
node %123 : bv<33> = concat(%91, %122)
node %124 : bv<34> = concat(%91, %123)
node %125 : bv<35> = concat(%91, %124)
node %126 : bv<36> = concat(%91, %125)
node %127 : bv<37> = concat(%91, %126)
node %128 : bv<38> = concat(%91, %127)
node %129 : bv<39> = concat(%91, %128)
node %130 : bv<40> = concat(%91, %129)
node %131 : bv<41> = concat(%91, %130)
node %132 : bv<42> = concat(%91, %131)
node %133 : bv<43> = concat(%91, %132)
node %134 : bv<44> = concat(%91, %133)
node %135 : bv<45> = concat(%91, %134)
node %136 : bv<46> = concat(%91, %135)
node %137 : bv<47> = concat(%91, %136)
node %138 : bv<48> = concat(%91, %137)
node z_optinv : bv<48> = xor(%138, zmux)
node B_INPUT_REG : bv<56> = concat(51'x0000000000000, B_INPUT)
node %1857 : bv<1> = eq(B_INPUT_REG, 56'x0000000000000f)
node %1858 : bv<32> = ite(%1857, 32'x00000001, 32'x00000000)
node %1860 : bv<1> = eq(B_INPUT_REG, 56'x00000000000007)
node %1861 : bv<32> = ite(%1860, 32'x00000000, %1858)
node B_INPUT_BIN : bv<1> = %1861[0]
node %1863 : bv<32> = zext(B_INPUT_BIN, 31)
node %1864 : bv<1> = eq(%1863, 32'x00000001)
node _procmux_557 : bv<18> = ite(%1864, BCIN, B)
node BREG_BIN : bv<2> = BREG[1:0]
node %232 : bv<1> = eq(BREG_BIN, 2'b00)
node %233 : bv<1> = not(%232)
node B2_DATA : bv<18> = ite(%233, B2_reg, _procmux_557)
node A_INPUT_REG : bv<56> = concat(51'x0000000000000, A_INPUT)
node %1867 : bv<1> = eq(A_INPUT_REG, 56'x0000000000000f)
node %1868 : bv<32> = ite(%1867, 32'x00000001, 32'x00000000)
node %1869 : bv<1> = eq(A_INPUT_REG, 56'x00000000000007)
node %1870 : bv<32> = ite(%1869, 32'x00000000, %1868)
node A_INPUT_BIN : bv<1> = %1870[0]
node %1872 : bv<32> = zext(A_INPUT_BIN, 31)
node %1873 : bv<1> = eq(%1872, 32'x00000001)
node _procmux_576 : bv<30> = ite(%1873, ACIN, A)
node AREG_BIN : bv<2> = AREG[1:0]
node %246 : bv<1> = eq(AREG_BIN, 2'b00)
node %247 : bv<1> = not(%246)
node A_ALU : bv<30> = ite(%247, A2_reg, _procmux_576)
node %1876 : bv<48> = concat(A_ALU, B2_DATA)
node %250 : bv<2> = OPMODE_mux[1:0]
node _procmux_629_CMP0 : bv<1> = eq(%250, 2'b11)
node %1877 : bv<48> = ite(_procmux_629_CMP0, %1876, 48'x000000000000)
node _procmux_630_CMP0 : bv<1> = eq(%250, 2'b10)
node %1878 : bv<48> = ite(_procmux_630_CMP0, P_FDBK_in, %1877)
node %1879 : bv<27> = A_ALU[26:0]
node %316 : bv<27> = A1_reg[26:0]
node INMODE_in : bv<5> = xor(INMODE, IS_INMODE_INVERTED)
node INMODEREG_BIN : bv<1> = INMODEREG[0]
node %310 : bv<1> = eq(INMODEREG_BIN, 1'b1)
node INMODE_mux : bv<5> = ite(%310, INMODE_reg, INMODE_in)
node %317 : bv<1> = INMODE_mux[0]
node %318 : bv<1> = eq(%317, 1'b1)
node _procmux_462 : bv<27> = ite(%318, %316, %1879)
node %331 : bv<1> = INMODE_mux[1]
node PREADDINSEL_REG : bv<8> = concat(3'b000, PREADDINSEL)
node %1882 : bv<1> = eq(PREADDINSEL_REG, 8'b00000001)
node %1883 : bv<32> = ite(%1882, 32'x00000001, 32'x00000000)
node %1884 : bv<1> = eq(PREADDINSEL_REG, 8'b00000000)
node %1885 : bv<32> = ite(%1884, 32'x00000000, %1883)
node PREADDINSEL_BIN : bv<1> = %1885[0]
node %1887 : bv<32> = zext(PREADDINSEL_BIN, 31)
node %1888 : bv<1> = eq(%1887, 32'x00000000)
node %1889 : bv<1> = and(%1888, %331)
node _procmux_465 : bv<27> = ite(%1889, 27'x0000000, _procmux_462)
node A2A1 : bv<27> = ite(%1889, 27'x0000000, _procmux_465)
node %336 : bv<1> = INMODE_mux[4]
node %337 : bv<1> = eq(%336, 1'b1)
node _procmux_453 : bv<18> = ite(%337, B1_DATA_out, B2_DATA)
node %1893 : bv<1> = eq(%1887, 32'x00000001)
node %1894 : bv<1> = and(%1893, %331)
node _procmux_456 : bv<18> = ite(%1894, 18'x00000, _procmux_453)
node B2B1 : bv<18> = ite(%1894, 18'x00000, _procmux_456)
node %1897 : bv<1> = B2B1[17]
node %1898 : bv<19> = concat(%1897, B2B1)
node %1899 : bv<20> = concat(%1897, %1898)
node %1900 : bv<21> = concat(%1897, %1899)
node %1901 : bv<22> = concat(%1897, %1900)
node %1902 : bv<23> = concat(%1897, %1901)
node %1903 : bv<24> = concat(%1897, %1902)
node %1904 : bv<25> = concat(%1897, %1903)
node %1905 : bv<26> = concat(%1897, %1904)
node %1906 : bv<27> = concat(%1897, %1905)
node PREADD_AB : bv<27> = ite(%1893, %1906, A2A1)
node DREG_BIN : bv<1> = DREG[0]
node USE_MULT_REG : bv<64> = concat(59'x000000000000000, USE_MULT)
node %1909 : bv<1> = eq(USE_MULT_REG, 64'x0000000000000014)
node %1910 : bv<32> = ite(%1909, 32'x00000002, 32'x00000000)
node %1912 : bv<1> = eq(USE_MULT_REG, 64'x0000000000000012)
node %1913 : bv<32> = ite(%1912, 32'x00000001, %1910)
node %1915 : bv<1> = eq(USE_MULT_REG, 64'x000000000000000a)
node %1916 : bv<32> = ite(%1915, 32'x00000000, %1913)
node USE_MULT_BIN : bv<2> = %1916[1:0]
node %1918 : bv<32> = zext(USE_MULT_BIN, 30)
node %1919 : bv<1> = eq(%1918, 32'x00000002)
node BMULTSEL_REG : bv<16> = concat(11'x000, BMULTSEL)
node %1921 : bv<1> = eq(BMULTSEL_REG, 16'x0002)
node %1922 : bv<32> = ite(%1921, 32'x00000001, 32'x00000000)
node %1924 : bv<1> = eq(BMULTSEL_REG, 16'x0001)
node %1925 : bv<32> = ite(%1924, 32'x00000000, %1922)
node BMULTSEL_BIN : bv<1> = %1925[0]
node %1927 : bv<32> = zext(BMULTSEL_BIN, 31)
node %1928 : bv<1> = eq(%1927, 32'x00000000)
node AMULTSEL_REG : bv<16> = concat(11'x000, AMULTSEL)
node %1929 : bv<1> = eq(AMULTSEL_REG, 16'x0002)
node %1930 : bv<32> = ite(%1929, 32'x00000001, 32'x00000000)
node %1932 : bv<1> = eq(AMULTSEL_REG, 16'x0000)
node %1933 : bv<32> = ite(%1932, 32'x00000000, %1930)
node AMULTSEL_BIN : bv<1> = %1933[0]
node %1935 : bv<32> = zext(AMULTSEL_BIN, 31)
node %1936 : bv<1> = eq(%1935, 32'x00000000)
node %1937 : bv<1> = and(%1936, %1928)
node %1938 : bv<1> = or(%1937, %1919)
node DREG_INT : bv<1> = ite(%1938, 1'b0, DREG_BIN)
node %1940 : bv<1> = eq(DREG_INT, 1'b1)
node D_DATA : bv<27> = ite(%1940, D_DATA_reg, D)
node %312 : bv<1> = INMODE_mux[2]
node D_DATA_mux : bv<27> = ite(%312, D_DATA, 27'x0000000)
node %1943 : bv<27> = add(D_DATA_mux, PREADD_AB)
node %1944 : bv<27> = sub(D_DATA_mux, PREADD_AB)
node %358 : bv<1> = INMODE_mux[3]
node AD_in : bv<27> = ite(%358, %1944, %1943)
node ADREG_BIN : bv<1> = ADREG[0]
node ADREG_INT : bv<1> = ite(%1938, 1'b0, ADREG_BIN)
node %1947 : bv<1> = eq(ADREG_INT, 1'b1)
node AD_DATA : bv<27> = ite(%1947, AD_DATA_reg, AD_in)
node %1949 : bv<18> = AD_DATA[17:0]
node b_mult_mux : bv<18> = ite(%1928, B2B1, %1949)
node BMULT17_in : bv<1> = b_mult_mux[17]
node %1952 : bv<19> = concat(BMULT17_in, b_mult_mux)
node %1953 : bv<20> = concat(BMULT17_in, %1952)
node %1954 : bv<21> = concat(BMULT17_in, %1953)
node %1955 : bv<22> = concat(BMULT17_in, %1954)
node %1956 : bv<23> = concat(BMULT17_in, %1955)
node %1957 : bv<24> = concat(BMULT17_in, %1956)
node %1958 : bv<25> = concat(BMULT17_in, %1957)
node %1959 : bv<26> = concat(BMULT17_in, %1958)
node %1960 : bv<27> = concat(BMULT17_in, %1959)
node %1961 : bv<28> = concat(BMULT17_in, %1960)
node %1962 : bv<29> = concat(BMULT17_in, %1961)
node %1963 : bv<30> = concat(BMULT17_in, %1962)
node %1964 : bv<31> = concat(BMULT17_in, %1963)
node %1965 : bv<32> = concat(BMULT17_in, %1964)
node %1966 : bv<33> = concat(BMULT17_in, %1965)
node %1967 : bv<34> = concat(BMULT17_in, %1966)
node %1968 : bv<35> = concat(BMULT17_in, %1967)
node %1969 : bv<36> = concat(BMULT17_in, %1968)
node %1970 : bv<37> = concat(BMULT17_in, %1969)
node %1971 : bv<38> = concat(BMULT17_in, %1970)
node %1972 : bv<39> = concat(BMULT17_in, %1971)
node %1973 : bv<40> = concat(BMULT17_in, %1972)
node %1974 : bv<41> = concat(BMULT17_in, %1973)
node %1975 : bv<42> = concat(BMULT17_in, %1974)
node %1976 : bv<43> = concat(BMULT17_in, %1975)
node %1977 : bv<44> = concat(BMULT17_in, %1976)
node %1978 : bv<45> = concat(BMULT17_in, %1977)
node a_mult_mux : bv<27> = ite(%1936, A2A1, AD_DATA)
node AMULT26_in : bv<1> = a_mult_mux[26]
node %1981 : bv<28> = concat(AMULT26_in, a_mult_mux)
node %1982 : bv<29> = concat(AMULT26_in, %1981)
node %1983 : bv<30> = concat(AMULT26_in, %1982)
node %1984 : bv<31> = concat(AMULT26_in, %1983)
node %1985 : bv<32> = concat(AMULT26_in, %1984)
node %1986 : bv<33> = concat(AMULT26_in, %1985)
node %1987 : bv<34> = concat(AMULT26_in, %1986)
node %1988 : bv<35> = concat(AMULT26_in, %1987)
node %1989 : bv<36> = concat(AMULT26_in, %1988)
node %1990 : bv<37> = concat(AMULT26_in, %1989)
node %1991 : bv<38> = concat(AMULT26_in, %1990)
node %1992 : bv<39> = concat(AMULT26_in, %1991)
node %1993 : bv<40> = concat(AMULT26_in, %1992)
node %1994 : bv<41> = concat(AMULT26_in, %1993)
node %1995 : bv<42> = concat(AMULT26_in, %1994)
node %1996 : bv<43> = concat(AMULT26_in, %1995)
node %1997 : bv<44> = concat(AMULT26_in, %1996)
node %1998 : bv<45> = concat(AMULT26_in, %1997)
node %1999 : bv<45> = mul(%1998, %1978)
node mult : bv<45> = ite(%1919, 45'x000000000000, %1999)
node %2001 : bv<44> = mult[43:0]
node %2002 : bv<44> = and(%2001, 44'x55555555555)
node U_in : bv<45> = concat(1'b1, %2002)
node MREG_BIN : bv<1> = MREG[0]
node %424 : bv<1> = eq(MREG_BIN, 1'b1)
node U_DATA : bv<45> = ite(%424, U_DATA_reg, U_in)
node USE_SIMD_REG : bv<48> = concat(43'x00000000000, USE_SIMD)
node %2006 : bv<1> = eq(USE_SIMD_REG, 48'x000000000019)
node %2007 : bv<32> = ite(%2006, 32'x00000002, 32'x00000000)
node %2009 : bv<1> = eq(USE_SIMD_REG, 48'x000000000013)
node %2010 : bv<32> = ite(%2009, 32'x00000001, %2007)
node %2012 : bv<1> = eq(USE_SIMD_REG, 48'x00000000000c)
node %2013 : bv<32> = ite(%2012, 32'x00000000, %2010)
node USE_SIMD_BIN : bv<2> = %2013[1:0]
node %2015 : bv<32> = zext(USE_SIMD_BIN, 30)
node %2016 : bv<1> = eq(%2015, 32'x00000000)
node U_DATA_in : bv<45> = ite(%2016, U_DATA, 45'x100000000000)
node %2018 : bv<1> = U_DATA_in[44]
node %2019 : bv<46> = concat(%2018, U_DATA_in)
node %2020 : bv<47> = concat(%2018, %2019)
node %2021 : bv<48> = concat(%2018, %2020)
node _procmux_631_CMP0 : bv<1> = eq(%250, 2'b01)
node %2022 : bv<48> = ite(_procmux_631_CMP0, %2021, %1878)
node %452 : bv<2> = concat(MULTSIGNIN, 1'b0)
node %453 : bv<48> = concat(46'x000000000000, %452)
node x_mac_cascd : bv<48> = ite(_procmux_618_CMP0, %453, 48'x000000000000)
node _procmux_632_CMP0 : bv<1> = eq(%250, 2'b00)
node xmux : bv<48> = ite(_procmux_632_CMP0, x_mac_cascd, %2022)
node %2024 : bv<48> = and(xmux, z_optinv)
node %459 : bv<2> = OPMODE_mux[3:2]
node _procmux_624_CMP0 : bv<1> = eq(%459, 2'b11)
node %1529 : bv<48> = ite(_procmux_624_CMP0, C_DATA_in, 48'x000000000000)
node _procmux_625_CMP0 : bv<1> = eq(%459, 2'b10)
node %1530 : bv<48> = ite(_procmux_625_CMP0, 48'xffffffffffff, %1529)
node %2025 : bv<44> = and(%2001, 44'xaaaaaaaaaaa)
node %2026 : bv<1> = mult[44]
node %2027 : bv<1> = not(%2026)
node V_in : bv<45> = concat(%2027, %2025)
node V_DATA : bv<45> = ite(%424, V_DATA_reg, V_in)
node V_DATA_in : bv<45> = ite(%2016, V_DATA, 45'x100000000000)
node %2031 : bv<48> = concat(3'b000, V_DATA_in)
node _procmux_626_CMP0 : bv<1> = eq(%459, 2'b01)
node %2032 : bv<48> = ite(_procmux_626_CMP0, %2031, %1530)
node _procmux_627_CMP0 : bv<1> = eq(%459, 2'b00)
node ymux : bv<48> = ite(_procmux_627_CMP0, 48'x000000000000, %2032)
node %2034 : bv<48> = and(z_optinv, ymux)
node %2035 : bv<48> = and(xmux, ymux)
node %2036 : bv<48> = or(%2035, %2034)
node co : bv<48> = or(%2036, %2024)
node %752 : bv<1> = ALUMODE_DATA[2]
node comux : bv<48> = ite(%752, 48'x000000000000, co)
node %2039 : bv<11> = comux[10:0]
node %2040 : bv<12> = concat(%2039, 1'b0)
node %2041 : bv<1> = eq(%2015, 32'x00000001)
node %2042 : bv<1> = not(%2041)
node %2043 : bv<1> = comux[11]
node %2044 : bv<1> = and(%2043, %2042)
node %2045 : bv<13> = concat(%2044, %2040)
node %2046 : bv<11> = comux[22:12]
node %2047 : bv<24> = concat(%2046, %2045)
node %2048 : bv<1> = comux[23]
node %2049 : bv<1> = and(%2048, %2016)
node %2050 : bv<25> = concat(%2049, %2047)
node %2051 : bv<11> = comux[34:24]
node %2052 : bv<36> = concat(%2051, %2050)
node %2053 : bv<1> = comux[35]
node %2054 : bv<1> = and(%2053, %2042)
node %2055 : bv<37> = concat(%2054, %2052)
node %2056 : bv<11> = comux[46:36]
node %2057 : bv<48> = concat(%2056, %2055)
node %2058 : bv<48> = xor(z_optinv, xmux)
node s : bv<48> = xor(%2058, ymux)
node %751 : bv<1> = ALUMODE_DATA[3]
node smux : bv<48> = ite(%751, co, s)
node %2061 : bv<48> = xor(smux, %2057)
node smux_w : bv<48> = xor(%2061, wmux)
node %2063 : bv<12> = smux_w[11:0]
node %2064 : bv<13> = zext(%2063, 1)
node %1158 : bv<1> = not(P_FDBK_47_in)
node CARRYINSELREG_BIN : bv<1> = CARRYINSELREG[0]
node %712 : bv<1> = eq(CARRYINSELREG_BIN, 1'b1)
node CARRYINSEL_mux : bv<3> = ite(%712, CARRYINSEL_reg, CARRYINSEL)
node _procmux_584_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b111)
node %1569 : bv<1> = ite(_procmux_584_CMP0, %1158, 1'b0)
node %2065 : bv<1> = xor(AMULT26_in, BMULT17_in)
node c_mult : bv<1> = not(%2065)
node multcarryin_data : bv<1> = ite(%424, qmultcarryin, c_mult)
node %2068 : bv<1> = not(multcarryin_data)
node _procmux_585_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b110)
node %2069 : bv<1> = ite(_procmux_585_CMP0, %2068, %1569)
node _procmux_586_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b101)
node %2070 : bv<1> = ite(_procmux_586_CMP0, P_FDBK_47_in, %2069)
node %729 : bv<1> = COUT_reg[3]
node CCOUT_in : bv<1> = xor(ALUMODE10_reg, %729)
node %731 : bv<1> = not(CCOUT_in)
node _procmux_587_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b100)
node %2071 : bv<1> = ite(_procmux_587_CMP0, %731, %2070)
node %734 : bv<1> = not(%170)
node _procmux_588_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b011)
node %2072 : bv<1> = ite(_procmux_588_CMP0, %734, %2071)
node %737 : bv<1> = not(CARRYCASCIN)
node _procmux_589_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b010)
node %2073 : bv<1> = ite(_procmux_589_CMP0, %737, %2072)
node _procmux_590_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b001)
node %2074 : bv<1> = ite(_procmux_590_CMP0, %170, %2073)
node CARRYIN_in : bv<1> = xor(CARRYIN, IS_CARRYIN_INVERTED)
node CARRYINREG_BIN : bv<1> = CARRYINREG[0]
node %745 : bv<1> = eq(CARRYINREG_BIN, 1'b1)
node CARRYIN_mux : bv<1> = ite(%745, CARRYIN_reg, CARRYIN_in)
node %747 : bv<1> = not(CARRYIN_mux)
node _procmux_591_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b000)
node cin_b : bv<1> = ite(_procmux_591_CMP0, %747, %2074)
node %2076 : bv<1> = not(cin_b)
node %753 : bv<1> = or(%751, %752)
node cin : bv<1> = ite(%753, 1'b0, %2076)
node %2078 : bv<48> = and(smux, wmux)
node %2079 : bv<48> = and(wmux, %2057)
node %2080 : bv<48> = and(smux, %2057)
node %2081 : bv<48> = or(%2080, %2079)
node comux_w : bv<48> = or(%2081, %2078)
node %2083 : bv<11> = comux_w[10:0]
node %2084 : bv<12> = concat(%2083, cin)
node %2085 : bv<13> = zext(%2084, 1)
node s0 : bv<13> = add(%2085, %2064)
node %2157 : bv<12> = s0[11:0]
node %2087 : bv<1> = s0[12]
node intc1 : bv<1> = and(%2042, %2087)
node %2089 : bv<13> = zext(intc1, 12)
node %2090 : bv<12> = smux_w[23:12]
node %2091 : bv<13> = zext(%2090, 1)
node %2092 : bv<1> = comux_w[11]
node co12_lsb : bv<1> = and(%2042, %2092)
node %2094 : bv<11> = comux_w[22:12]
node %2095 : bv<12> = concat(%2094, co12_lsb)
node %2096 : bv<13> = concat(1'b0, %2095)
node %2097 : bv<13> = add(%2096, %2091)
node s1 : bv<13> = add(%2097, %2089)
node %2158 : bv<12> = s1[11:0]
node %2159 : bv<24> = concat(%2158, %2157)
node %2099 : bv<1> = s1[12]
node intc2 : bv<1> = and(%2016, %2099)
node %2101 : bv<13> = zext(intc2, 12)
node %2102 : bv<12> = smux_w[35:24]
node %2103 : bv<13> = zext(%2102, 1)
node %2104 : bv<1> = comux_w[23]
node co24_lsb : bv<1> = and(%2016, %2104)
node %2106 : bv<11> = comux_w[34:24]
node %2107 : bv<12> = concat(%2106, co24_lsb)
node %2108 : bv<13> = concat(1'b0, %2107)
node %2109 : bv<13> = add(%2108, %2103)
node s2 : bv<13> = add(%2109, %2101)
node %2160 : bv<12> = s2[11:0]
node %2161 : bv<36> = concat(%2160, %2159)
node %2111 : bv<1> = s2[12]
node intc3 : bv<1> = and(%2042, %2111)
node %2113 : bv<14> = zext(intc3, 13)
node %2114 : bv<12> = smux_w[47:36]
node %2115 : bv<1> = comux[47]
node %2116 : bv<13> = concat(%2115, %2114)
node %2117 : bv<14> = concat(1'b0, %2116)
node %2118 : bv<1> = comux_w[35]
node co36_lsb : bv<1> = and(%2042, %2118)
node %2120 : bv<12> = comux_w[47:36]
node %2121 : bv<13> = concat(%2120, co36_lsb)
node %2122 : bv<14> = concat(1'b0, %2121)
node %2123 : bv<14> = add(%2122, %2117)
node s3 : bv<14> = add(%2123, %2113)
node %2162 : bv<12> = s3[11:0]
node %2163 : bv<48> = concat(%2162, %2161)
node %660 : bv<1> = ALUMODE_DATA[1]
node %661 : bv<2> = concat(%660, %660)
node %662 : bv<3> = concat(%660, %661)
node %663 : bv<4> = concat(%660, %662)
node %664 : bv<5> = concat(%660, %663)
node %665 : bv<6> = concat(%660, %664)
node %666 : bv<7> = concat(%660, %665)
node %667 : bv<8> = concat(%660, %666)
node %668 : bv<9> = concat(%660, %667)
node %669 : bv<10> = concat(%660, %668)
node %670 : bv<11> = concat(%660, %669)
node %671 : bv<12> = concat(%660, %670)
node %672 : bv<13> = concat(%660, %671)
node %673 : bv<14> = concat(%660, %672)
node %674 : bv<15> = concat(%660, %673)
node %675 : bv<16> = concat(%660, %674)
node %676 : bv<17> = concat(%660, %675)
node %677 : bv<18> = concat(%660, %676)
node %678 : bv<19> = concat(%660, %677)
node %679 : bv<20> = concat(%660, %678)
node %680 : bv<21> = concat(%660, %679)
node %681 : bv<22> = concat(%660, %680)
node %682 : bv<23> = concat(%660, %681)
node %683 : bv<24> = concat(%660, %682)
node %684 : bv<25> = concat(%660, %683)
node %685 : bv<26> = concat(%660, %684)
node %686 : bv<27> = concat(%660, %685)
node %687 : bv<28> = concat(%660, %686)
node %688 : bv<29> = concat(%660, %687)
node %689 : bv<30> = concat(%660, %688)
node %690 : bv<31> = concat(%660, %689)
node %691 : bv<32> = concat(%660, %690)
node %692 : bv<33> = concat(%660, %691)
node %693 : bv<34> = concat(%660, %692)
node %694 : bv<35> = concat(%660, %693)
node %695 : bv<36> = concat(%660, %694)
node %696 : bv<37> = concat(%660, %695)
node %697 : bv<38> = concat(%660, %696)
node %698 : bv<39> = concat(%660, %697)
node %699 : bv<40> = concat(%660, %698)
node %700 : bv<41> = concat(%660, %699)
node %701 : bv<42> = concat(%660, %700)
node %702 : bv<43> = concat(%660, %701)
node %703 : bv<44> = concat(%660, %702)
node %704 : bv<45> = concat(%660, %703)
node %705 : bv<46> = concat(%660, %704)
node %706 : bv<47> = concat(%660, %705)
node %707 : bv<48> = concat(%660, %706)
node ALU_OUT_in : bv<48> = xor(%707, %2163)
node SEL_PATTERN_REG : bv<56> = concat(51'x0000000000000, SEL_PATTERN)
node %2166 : bv<1> = eq(SEL_PATTERN_REG, 56'x00000000000011)
node %2167 : bv<32> = ite(%2166, 32'x00000001, 32'x00000000)
node %2169 : bv<1> = eq(SEL_PATTERN_REG, 56'x00000000000009)
node %2170 : bv<32> = ite(%2169, 32'x00000000, %2167)
node SEL_PATTERN_BIN : bv<1> = %2170[0]
node %2172 : bv<32> = zext(SEL_PATTERN_BIN, 31)
node %2173 : bv<1> = eq(%2172, 32'x00000000)
node the_pattern : bv<48> = ite(%2173, PATTERN, C_DATA_in)
node %2175 : bv<48> = xor(the_pattern, ALU_OUT_in)
node %2176 : bv<48> = not(%2175)
node %2177 : bv<48> = or(%2176, the_mask)
node pdet_o : bv<1> = eq(%2177, 48'xffffffffffff)
node PREG_BIN : bv<1> = PREG[0]
node %645 : bv<1> = eq(PREG_BIN, 1'b1)
output PATTERNDETECT : bv<1> = ite(%645, pdet_o_reg1, pdet_o)
node %2238 : bv<1> = s3[12]
node ALUMODE10_in : bv<1> = and(%91, %660)
node cout3 : bv<1> = xor(ALUMODE10_in, %2238)
output CARRYCASCOUT : bv<1> = ite(%645, CCOUT_in, xor(ALUMODE10_in, cout3))
node %2220 : bv<1> = xor(%2092, %2087)
node %2221 : bv<1> = xor(%2220, %2043)
node cout0 : bv<1> = xor(ALUMODE10_in, %2221)
node %932 : bv<2> = ALUMODE_DATA[3:2]
node %933 : bv<1> = eq(%932, 2'b00)
node %934 : bv<1> = not(%933)
node %929 : bv<4> = OPMODE_mux[3:0]
node %931 : bv<1> = eq(%929, 4'b0101)
node mult_or_logic : bv<1> = or(%931, %934)
node cout_0 : bv<1> = ite(mult_or_logic, 1'b0, cout0)
node %2224 : bv<1> = ite(%2041, cout_0, 1'b0)
node %2225 : bv<1> = xor(%2104, %2099)
node %2226 : bv<1> = xor(%2225, %2048)
node cout1 : bv<1> = xor(ALUMODE10_in, %2226)
node cout_1 : bv<1> = ite(mult_or_logic, 1'b0, cout1)
node %2229 : bv<1> = not(%2016)
node %2230 : bv<1> = ite(%2229, cout_1, 1'b0)
node %2231 : bv<2> = concat(%2230, %2224)
node %2232 : bv<1> = xor(%2118, %2111)
node %2233 : bv<1> = xor(%2232, %2053)
node cout2 : bv<1> = xor(ALUMODE10_in, %2233)
node cout_2 : bv<1> = ite(mult_or_logic, 1'b0, cout2)
node %2236 : bv<1> = ite(%2041, cout_2, 1'b0)
node %2237 : bv<3> = concat(%2236, %2231)
node COUT_in : bv<4> = concat(cout3, %2237)
output CARRYOUT : bv<4> = ite(%645, COUT_reg, COUT_in)
node MULTSIGN_ALU_in : bv<1> = s3[13]
output MULTSIGNOUT : bv<1> = ite(%645, MULTSIGN_ALU_reg, MULTSIGN_ALU_in)
node %2214 : bv<48> = or(%2175, the_mask)
node pdetb_o : bv<1> = eq(%2214, 48'xffffffffffff)
output PATTERNBDETECT : bv<1> = ite(%645, pdetb_o_reg1, pdetb_o)
node overflow_data : bv<1> = ite(%645, pdet_o_reg2, pdet_o)
node %2180 : bv<1> = not(PATTERNDETECT)
node %2432 : bv<1> = and(%2180, not(PATTERNBDETECT))
node %2434 : bv<1> = eq(%2154, 32'x00000001)
output OVERFLOW : bv<1> = ite(%2434, and(%2432, overflow_data), 1'b0)
output PCOUT : bv<48> = ite(%645, P_FDBK_in, ALU_OUT_in)
output UNDERFLOW : bv<1> = ite(%2434, and(%2432, ite(%645, pdetb_o_reg2, pdetb_o)), 1'b0)
node %2249 : bv<1> = s[11]
node %2250 : bv<1> = s[10]
node %2251 : bv<1> = s[9]
node %2252 : bv<1> = s[8]
node %2253 : bv<1> = s[7]
node %2254 : bv<1> = s[6]
node %2255 : bv<1> = xor(%2254, %2253)
node %2256 : bv<1> = xor(%2255, %2252)
node %2257 : bv<1> = xor(%2256, %2251)
node %2258 : bv<1> = xor(%2257, %2250)
node %2259 : bv<1> = xor(%2258, %2249)
node %2260 : bv<32> = concat(31'x00000000, %2259)
node USE_WIDEXOR_REG : bv<40> = concat(35'x000000000, USE_WIDEXOR)
node %2262 : bv<1> = eq(USE_WIDEXOR_REG, 40'x0000000018)
node %2263 : bv<32> = ite(%2262, 32'x00000001, 32'x00000000)
node %2265 : bv<1> = eq(USE_WIDEXOR_REG, 40'x000000000d)
node %2266 : bv<32> = ite(%2265, 32'x00000000, %2263)
node USE_WIDEXOR_BIN : bv<1> = %2266[0]
node %2268 : bv<32> = ite(USE_WIDEXOR_BIN, %2260, 32'x00000000)
node xor_12b : bv<1> = %2268[0]
node %2271 : bv<1> = s[5]
node %2272 : bv<1> = s[4]
node %2273 : bv<1> = s[3]
node %2274 : bv<1> = s[2]
node %2275 : bv<1> = s[1]
node %2276 : bv<1> = s[0]
node %2277 : bv<1> = xor(%2276, %2275)
node %2278 : bv<1> = xor(%2277, %2274)
node %2279 : bv<1> = xor(%2278, %2273)
node %2280 : bv<1> = xor(%2279, %2272)
node %2281 : bv<1> = xor(%2280, %2271)
node %2282 : bv<32> = concat(31'x00000000, %2281)
node %2283 : bv<32> = ite(USE_WIDEXOR_BIN, %2282, 32'x00000000)
node xor_12a : bv<1> = %2283[0]
node xor_24a : bv<1> = xor(xor_12a, xor_12b)
node XORSIMD_REG : bv<88> = concat(83'x000000000000000000000, XORSIMD)
node %2287 : bv<1> = eq(XORSIMD_REG, 88'x000000000000000000001a)
node %2288 : bv<32> = ite(%2287, 32'x00000001, 32'x00000000)
node %2290 : bv<1> = eq(XORSIMD_REG, 88'x000000000000000000000e)
node %2291 : bv<32> = ite(%2290, 32'x00000000, %2288)
node XORSIMD_BIN : bv<1> = %2291[0]
node %2293 : bv<1> = ite(XORSIMD_BIN, xor_12a, xor_24a)
node %2295 : bv<1> = s[23]
node %2296 : bv<1> = s[22]
node %2297 : bv<1> = s[21]
node %2298 : bv<1> = s[20]
node %2299 : bv<1> = s[19]
node %2300 : bv<1> = s[18]
node %2301 : bv<1> = xor(%2300, %2299)
node %2302 : bv<1> = xor(%2301, %2298)
node %2303 : bv<1> = xor(%2302, %2297)
node %2304 : bv<1> = xor(%2303, %2296)
node %2305 : bv<1> = xor(%2304, %2295)
node %2306 : bv<32> = concat(31'x00000000, %2305)
node %2307 : bv<32> = ite(USE_WIDEXOR_BIN, %2306, 32'x00000000)
node xor_12d : bv<1> = %2307[0]
node %2310 : bv<1> = s[17]
node %2311 : bv<1> = s[16]
node %2312 : bv<1> = s[15]
node %2313 : bv<1> = s[14]
node %2314 : bv<1> = s[13]
node %2315 : bv<1> = s[12]
node %2316 : bv<1> = xor(%2315, %2314)
node %2317 : bv<1> = xor(%2316, %2313)
node %2318 : bv<1> = xor(%2317, %2312)
node %2319 : bv<1> = xor(%2318, %2311)
node %2320 : bv<1> = xor(%2319, %2310)
node %2321 : bv<32> = concat(31'x00000000, %2320)
node %2322 : bv<32> = ite(USE_WIDEXOR_BIN, %2321, 32'x00000000)
node xor_12c : bv<1> = %2322[0]
node xor_24b : bv<1> = xor(xor_12c, xor_12d)
node xor_48a : bv<1> = xor(xor_24a, xor_24b)
node %2326 : bv<1> = ite(XORSIMD_BIN, xor_12b, xor_48a)
node %2327 : bv<2> = concat(%2326, %2293)
node %2328 : bv<1> = ite(XORSIMD_BIN, xor_12c, xor_24b)
node %2329 : bv<3> = concat(%2328, %2327)
node %2331 : bv<1> = s[47]
node %2332 : bv<1> = s[46]
node %2333 : bv<1> = s[45]
node %2334 : bv<1> = s[44]
node %2335 : bv<1> = s[43]
node %2336 : bv<1> = s[42]
node %2337 : bv<1> = xor(%2336, %2335)
node %2338 : bv<1> = xor(%2337, %2334)
node %2339 : bv<1> = xor(%2338, %2333)
node %2340 : bv<1> = xor(%2339, %2332)
node %2341 : bv<1> = xor(%2340, %2331)
node %2342 : bv<32> = concat(31'x00000000, %2341)
node %2343 : bv<32> = ite(USE_WIDEXOR_BIN, %2342, 32'x00000000)
node xor_12h : bv<1> = %2343[0]
node %2346 : bv<1> = s[41]
node %2347 : bv<1> = s[40]
node %2348 : bv<1> = s[39]
node %2349 : bv<1> = s[38]
node %2350 : bv<1> = s[37]
node %2351 : bv<1> = s[36]
node %2352 : bv<1> = xor(%2351, %2350)
node %2353 : bv<1> = xor(%2352, %2349)
node %2354 : bv<1> = xor(%2353, %2348)
node %2355 : bv<1> = xor(%2354, %2347)
node %2356 : bv<1> = xor(%2355, %2346)
node %2357 : bv<32> = concat(31'x00000000, %2356)
node %2358 : bv<32> = ite(USE_WIDEXOR_BIN, %2357, 32'x00000000)
node xor_12g : bv<1> = %2358[0]
node xor_24d : bv<1> = xor(xor_12g, xor_12h)
node %2362 : bv<1> = s[35]
node %2363 : bv<1> = s[34]
node %2364 : bv<1> = s[33]
node %2365 : bv<1> = s[32]
node %2366 : bv<1> = s[31]
node %2367 : bv<1> = s[30]
node %2368 : bv<1> = xor(%2367, %2366)
node %2369 : bv<1> = xor(%2368, %2365)
node %2370 : bv<1> = xor(%2369, %2364)
node %2371 : bv<1> = xor(%2370, %2363)
node %2372 : bv<1> = xor(%2371, %2362)
node %2373 : bv<32> = concat(31'x00000000, %2372)
node %2374 : bv<32> = ite(USE_WIDEXOR_BIN, %2373, 32'x00000000)
node xor_12f : bv<1> = %2374[0]
node %2377 : bv<1> = s[29]
node %2378 : bv<1> = s[28]
node %2379 : bv<1> = s[27]
node %2380 : bv<1> = s[26]
node %2381 : bv<1> = s[25]
node %2382 : bv<1> = s[24]
node %2383 : bv<1> = xor(%2382, %2381)
node %2384 : bv<1> = xor(%2383, %2380)
node %2385 : bv<1> = xor(%2384, %2379)
node %2386 : bv<1> = xor(%2385, %2378)
node %2387 : bv<1> = xor(%2386, %2377)
node %2388 : bv<32> = concat(31'x00000000, %2387)
node %2389 : bv<32> = ite(USE_WIDEXOR_BIN, %2388, 32'x00000000)
node xor_12e : bv<1> = %2389[0]
node xor_24c : bv<1> = xor(xor_12e, xor_12f)
node xor_48b : bv<1> = xor(xor_24c, xor_24d)
node xor_96 : bv<1> = xor(xor_48a, xor_48b)
node %2394 : bv<1> = ite(XORSIMD_BIN, xor_12d, xor_96)
node %2395 : bv<4> = concat(%2394, %2329)
node %2396 : bv<1> = ite(XORSIMD_BIN, xor_12e, xor_24c)
node %2397 : bv<5> = concat(%2396, %2395)
node %2398 : bv<1> = ite(XORSIMD_BIN, xor_12f, xor_48b)
node %2399 : bv<6> = concat(%2398, %2397)
node %2400 : bv<1> = ite(XORSIMD_BIN, xor_12g, xor_24d)
node %2401 : bv<7> = concat(%2400, %2399)
node XOR_MX_in : bv<8> = concat(xor_12h, %2401)
output XOROUT : bv<8> = ite(%645, XOR_MX_reg, XOR_MX_in)
output ACOUT : bv<30> = ite(eq(ACASCREG[1:0], AREG_BIN), A_ALU, A1_reg)
output BCOUT : bv<18> = ite(eq(BCASCREG[1:0], BREG_BIN), B2_DATA, B1_DATA_out)
node %1032 : bv<1> = and(CEP, PREG_BIN)
node AUTORESET_PRIORITY_REG : bv<40> = concat(35'x000000000, AUTORESET_PRIORITY)
node auto_reset_pri : bv<1> = or(eq(zext(ite(eq(AUTORESET_PRIORITY_REG, 40'x0000000006), 32'x00000000, ite(eq(AUTORESET_PRIORITY_REG, 40'x0000000010), 32'x00000001, 32'x00000000))[0], 31), 32'x00000000), CEP)
node AUTORESET_PATDET_REG : bv<120> = concat(115'x00000000000000000000000000000, AUTORESET_PATDET)
node %2204 : bv<32> = zext(ite(eq(AUTORESET_PATDET_REG, 120'x000000000000000000000000000003), 32'x00000000, ite(eq(AUTORESET_PATDET_REG, 120'x000000000000000000000000000004), 32'x00000001, ite(eq(AUTORESET_PATDET_REG, 120'x000000000000000000000000000005), 32'x00000002, 32'x00000000)))[1:0], 30)
node %2210 : bv<1> = or(xor(RSTP, IS_RSTP_INVERTED), ite(eq(%2204, 32'x00000001), and(auto_reset_pri, PATTERNDETECT), ite(eq(%2204, 32'x00000002), and(and(auto_reset_pri, overflow_data), %2180), 1'b0)))
node RSTCTRL_in : bv<1> = xor(RSTCTRL, IS_RSTCTRL_INVERTED)
node RSTB_in : bv<1> = xor(RSTB, IS_RSTB_INVERTED)
node %1051 : bv<1> = or(xor(RSTA, IS_RSTA_INVERTED), %246)
node RSTD_in : bv<1> = xor(RSTD, IS_RSTD_INVERTED)
node %1070 : bv<1> = or(xor(RSTM, IS_RSTM_INVERTED), eq(MREG_BIN, 1'b0))
node RSTALLCARRYIN_in : bv<1> = xor(RSTALLCARRYIN, IS_RSTALLCARRYIN_INVERTED)
state ALUMODE_reg : bv<4>
  [next] ite(xor(RSTALUMODE, IS_RSTALUMODE_INVERTED), 4'b0000, ite(CEALUMODE, ALUMODE_in, ALUMODE_reg))
state P_FDBK_in : bv<48>
  [next] ite(%2210, 48'x000000000000, ite(%1032, ALU_OUT_in, P_FDBK_in))
state OPMODE_reg : bv<9>
  [next] ite(RSTCTRL_in, 9'x000, ite(CECTRL, OPMODE_in, OPMODE_reg))
state C_reg : bv<48>
  [next] ite(or(xor(RSTC, IS_RSTC_INVERTED), eq(CREG_BIN, 1'b0)), 48'x000000000000, ite(CEC, C, C_reg))
state B2_reg : bv<18>
  [next] ite(RSTB_in, 18'x00000, ite(CEB2, ite(eq(BREG_BIN, 2'b10), B1_DATA_out, _procmux_557), B2_reg))
state A2_reg : bv<30>
  [next] ite(%1051, 30'x00000000, ite(CEA2, ite(eq(AREG_BIN, 2'b10), A1_reg, _procmux_576), A2_reg))
state D_DATA_reg : bv<27>
  [next] ite(or(RSTD_in, eq(DREG_INT, 1'b0)), 27'x0000000, ite(CED, D, D_DATA_reg))
state INMODE_reg : bv<5>
  [next] ite(or(xor(RSTINMODE, IS_RSTINMODE_INVERTED), eq(INMODEREG_BIN, 1'b0)), 5'b00000, ite(CEINMODE, INMODE_in, INMODE_reg))
state A1_reg : bv<30>
  [next] ite(%1051, 30'x00000000, ite(CEA1, _procmux_576, A1_reg))
state B1_DATA_out : bv<18>
  [next] ite(or(RSTB_in, %232), 18'x00000, ite(CEB1, _procmux_557, B1_DATA_out))
state AD_DATA_reg : bv<27>
  [next] ite(RSTD_in, 27'x0000000, ite(CEAD, AD_in, AD_DATA_reg))
state U_DATA_reg : bv<45>
  [next] ite(%1070, 45'x000000000000, ite(CEM, U_in, U_DATA_reg))
state V_DATA_reg : bv<45>
  [next] ite(%1070, 45'x000000000000, ite(CEM, V_in, V_DATA_reg))
state XOR_MX_reg : bv<8>
  [next] ite(%2210, 8'b00000000, ite(%1032, XOR_MX_in, XOR_MX_reg))
state CARRYINSEL_reg : bv<3>
  [next] ite(RSTCTRL_in, 3'b000, ite(CECTRL, CARRYINSEL, CARRYINSEL_reg))
state qmultcarryin : bv<1>
  [next] ite(RSTALLCARRYIN_in, 32'x00000000, zext(ite(CEM, c_mult, qmultcarryin), 31))[0]
state ALUMODE10_reg : bv<1>
  [next] ite(%2210, 1'b0, ite(%1032, ALUMODE10_in, ALUMODE10_reg))
state COUT_reg : bv<4>
  [next] ite(%2210, 4'b0000, ite(%1032, COUT_in, COUT_reg))
state CARRYIN_reg : bv<1>
  [next] ite(RSTALLCARRYIN_in, 1'b0, ite(CECARRYIN, CARRYIN_in, CARRYIN_reg))
state pdet_o_reg1 : bv<1>
  [next] ite(%2210, 1'b0, ite(%1032, pdet_o, pdet_o_reg1))
state pdetb_o_reg1 : bv<1>
  [next] ite(%2210, 1'b0, ite(%1032, pdetb_o, pdetb_o_reg1))
state pdetb_o_reg2 : bv<1>
  [next] ite(%2210, 1'b0, ite(%1032, pdetb_o_reg1, pdetb_o_reg2))
state pdet_o_reg2 : bv<1>
  [next] ite(%2210, 1'b0, ite(%1032, pdet_o_reg1, pdet_o_reg2))
state MULTSIGN_ALU_reg : bv<1>
  [next] ite(%2210, 1'b0, ite(%1032, MULTSIGN_ALU_in, MULTSIGN_ALU_reg))
