---
source: tests/btor2_test.rs
expression: sys.serialize_to_str(&ctx)
---
DSP48E2
input RSTP : bv<1>
input RSTM : bv<1>
input RSTINMODE : bv<1>
input RSTD : bv<1>
input RSTCTRL : bv<1>
input RSTC : bv<1>
input RSTB : bv<1>
input RSTALUMODE : bv<1>
input RSTALLCARRYIN : bv<1>
input RSTA : bv<1>
input PCIN : bv<48>
input OPMODE : bv<9>
input MULTSIGNIN : bv<1>
input INMODE : bv<5>
input D : bv<27>
input CLK : bv<1>
input CEP : bv<1>
input CEM : bv<1>
input CEINMODE : bv<1>
input CED : bv<1>
input CECTRL : bv<1>
input CECARRYIN : bv<1>
input CEC : bv<1>
input CEB2 : bv<1>
input CEB1 : bv<1>
input CEALUMODE : bv<1>
input CEAD : bv<1>
input CEA2 : bv<1>
input CEA1 : bv<1>
input CARRYINSEL : bv<3>
input CARRYIN : bv<1>
input CARRYCASCIN : bv<1>
input C : bv<48>
input BCIN : bv<18>
input B : bv<18>
input ALUMODE : bv<4>
input ACIN : bv<30>
input A : bv<30>
input XORSIMD : bv<5>
input USE_WIDEXOR : bv<5>
input USE_SIMD : bv<5>
input USE_PATTERN_DETECT : bv<5>
input USE_MULT : bv<5>
input SEL_PATTERN : bv<5>
input SEL_MASK : bv<5>
input RND : bv<48>
input PREG : bv<32>
input PREADDINSEL : bv<5>
input PATTERN : bv<48>
input OPMODEREG : bv<32>
input MREG : bv<32>
input MASK : bv<48>
input IS_RSTP_INVERTED : bv<1>
input IS_RSTM_INVERTED : bv<1>
input IS_RSTINMODE_INVERTED : bv<1>
input IS_RSTD_INVERTED : bv<1>
input IS_RSTC_INVERTED : bv<1>
input IS_RSTCTRL_INVERTED : bv<1>
input IS_RSTB_INVERTED : bv<1>
input IS_RSTA_INVERTED : bv<1>
input IS_RSTALUMODE_INVERTED : bv<1>
input IS_RSTALLCARRYIN_INVERTED : bv<1>
input IS_OPMODE_INVERTED : bv<9>
input IS_INMODE_INVERTED : bv<5>
input IS_CLK_INVERTED : bv<1>
input IS_CARRYIN_INVERTED : bv<1>
input IS_ALUMODE_INVERTED : bv<4>
input INMODEREG : bv<32>
input DREG : bv<32>
input CREG : bv<32>
input CARRYINSELREG : bv<32>
input CARRYINREG : bv<32>
input B_INPUT : bv<5>
input BREG : bv<32>
input BMULTSEL : bv<5>
input BCASCREG : bv<32>
input A_INPUT : bv<5>
input AUTORESET_PRIORITY : bv<5>
input AUTORESET_PATDET : bv<5>
input AREG : bv<32>
input AMULTSEL : bv<5>
input ALUMODEREG : bv<32>
input ADREG : bv<32>
input ACASCREG : bv<32>
node CREG_BIN : bv<1> = CREG[0]
node C_DATA_in : bv<48> = ite(CREG_BIN, C_reg, C)
node %2238 : bv<46> = C_DATA_in[45:0]
node %2239 : bv<46> = not(%2238)
node %2240 : bv<48> = concat(%2239, 2'b00)
node SEL_MASK_REG : bv<112> = concat(107'x000000000000000000000000000, SEL_MASK)
node %2242 : bv<1> = eq(SEL_MASK_REG, 112'x0000000000000000000000000017)
node %2243 : bv<32> = ite(%2242, 32'x00000003, 32'x00000000)
node %2245 : bv<1> = eq(SEL_MASK_REG, 112'x0000000000000000000000000016)
node %2246 : bv<32> = ite(%2245, 32'x00000002, %2243)
node %2248 : bv<1> = eq(SEL_MASK_REG, 112'x0000000000000000000000000011)
node %2249 : bv<32> = ite(%2248, 32'x00000001, %2246)
node %2251 : bv<1> = eq(SEL_MASK_REG, 112'x0000000000000000000000000008)
node %2252 : bv<32> = ite(%2251, 32'x00000000, %2249)
node SEL_MASK_BIN : bv<2> = %2252[1:0]
node %2254 : bv<32> = concat(30'x00000000, SEL_MASK_BIN)
node %2255 : bv<1> = eq(%2254, 32'x00000003)
node %2256 : bv<48> = ite(%2255, %2240, MASK)
node %2257 : bv<47> = C_DATA_in[46:0]
node %2258 : bv<47> = not(%2257)
node %2259 : bv<48> = concat(%2258, 1'b0)
node %2260 : bv<1> = eq(%2254, 32'x00000002)
node %2261 : bv<48> = ite(%2260, %2259, %2256)
node %2262 : bv<1> = eq(%2254, 32'x00000001)
node %2263 : bv<48> = ite(%2262, C_DATA_in, %2261)
node USE_PATTERN_DETECT_REG : bv<72> = concat(67'x00000000000000000, USE_PATTERN_DETECT)
node %2265 : bv<1> = eq(USE_PATTERN_DETECT_REG, 72'x000000000000000015)
node %2266 : bv<32> = ite(%2265, 32'x00000001, 32'x00000000)
node %2268 : bv<1> = eq(USE_PATTERN_DETECT_REG, 72'x00000000000000000b)
node %2269 : bv<32> = ite(%2268, 32'x00000000, %2266)
node USE_PATTERN_DETECT_BIN : bv<1> = %2269[0]
node %2271 : bv<32> = concat(31'x00000000, USE_PATTERN_DETECT_BIN)
node %2272 : bv<1> = eq(%2271, 32'x00000000)
node the_mask : bv<48> = ite(%2272, 48'xffffffffffff, %2263)
node OPMODE_in : bv<9> = xor(OPMODE, IS_OPMODE_INVERTED)
node OPMODEREG_BIN : bv<1> = OPMODEREG[0]
node OPMODE_mux : bv<9> = ite(OPMODEREG_BIN, OPMODE_reg, OPMODE_in)
node %1858 : bv<2> = OPMODE_mux[8:7]
node _procmux_634_CMP0 : bv<1> = eq(%1858, 2'b11)
node %1860 : bv<48> = ite(_procmux_634_CMP0, C_DATA_in, 48'x000000000000)
node _procmux_635_CMP0 : bv<1> = eq(%1858, 2'b10)
node %1862 : bv<48> = ite(_procmux_635_CMP0, RND, %1860)
node _procmux_636_CMP0 : bv<1> = eq(%1858, 2'b01)
node %1864 : bv<48> = ite(_procmux_636_CMP0, P_FDBK_in, %1862)
node _procmux_637_CMP0 : bv<1> = eq(%1858, 2'b00)
node wmux : bv<48> = ite(_procmux_637_CMP0, 48'x000000000000, %1864)
node %1098 : bv<31> = P_FDBK_in[47:17]
node P_FDBK_47_in : bv<1> = P_FDBK_in[47]
node %1100 : bv<32> = concat(P_FDBK_47_in, %1098)
node %1101 : bv<33> = concat(P_FDBK_47_in, %1100)
node %1102 : bv<34> = concat(P_FDBK_47_in, %1101)
node %1103 : bv<35> = concat(P_FDBK_47_in, %1102)
node %1104 : bv<36> = concat(P_FDBK_47_in, %1103)
node %1105 : bv<37> = concat(P_FDBK_47_in, %1104)
node %1106 : bv<38> = concat(P_FDBK_47_in, %1105)
node %1107 : bv<39> = concat(P_FDBK_47_in, %1106)
node %1108 : bv<40> = concat(P_FDBK_47_in, %1107)
node %1109 : bv<41> = concat(P_FDBK_47_in, %1108)
node %1110 : bv<42> = concat(P_FDBK_47_in, %1109)
node %1111 : bv<43> = concat(P_FDBK_47_in, %1110)
node %1112 : bv<44> = concat(P_FDBK_47_in, %1111)
node %1113 : bv<45> = concat(P_FDBK_47_in, %1112)
node %1114 : bv<46> = concat(P_FDBK_47_in, %1113)
node %1115 : bv<47> = concat(P_FDBK_47_in, %1114)
node %1116 : bv<48> = concat(P_FDBK_47_in, %1115)
node %1867 : bv<2> = OPMODE_mux[6:5]
node _procmux_616_CMP0 : bv<1> = eq(%1867, 2'b11)
node %1869 : bv<48> = ite(_procmux_616_CMP0, %1116, 48'x000000000000)
node %170 : bv<31> = PCIN[47:17]
node %171 : bv<1> = PCIN[47]
node %172 : bv<32> = concat(%171, %170)
node %173 : bv<33> = concat(%171, %172)
node %174 : bv<34> = concat(%171, %173)
node %175 : bv<35> = concat(%171, %174)
node %176 : bv<36> = concat(%171, %175)
node %177 : bv<37> = concat(%171, %176)
node %178 : bv<38> = concat(%171, %177)
node %179 : bv<39> = concat(%171, %178)
node %180 : bv<40> = concat(%171, %179)
node %181 : bv<41> = concat(%171, %180)
node %182 : bv<42> = concat(%171, %181)
node %183 : bv<43> = concat(%171, %182)
node %184 : bv<44> = concat(%171, %183)
node %185 : bv<45> = concat(%171, %184)
node %186 : bv<46> = concat(%171, %185)
node %187 : bv<47> = concat(%171, %186)
node %188 : bv<48> = concat(%171, %187)
node %1870 : bv<3> = OPMODE_mux[6:4]
node _procmux_617_CMP0 : bv<1> = eq(%1870, 3'b101)
node %1872 : bv<48> = ite(_procmux_617_CMP0, %188, %1869)
node _procmux_618_CMP0 : bv<1> = eq(%1870, 3'b100)
node %1874 : bv<48> = ite(_procmux_618_CMP0, P_FDBK_in, %1872)
node _procmux_619_CMP0 : bv<1> = eq(%1870, 3'b011)
node %1876 : bv<48> = ite(_procmux_619_CMP0, C_DATA_in, %1874)
node _procmux_620_CMP0 : bv<1> = eq(%1870, 3'b010)
node %1878 : bv<48> = ite(_procmux_620_CMP0, P_FDBK_in, %1876)
node _procmux_621_CMP0 : bv<1> = eq(%1870, 3'b001)
node %1880 : bv<48> = ite(_procmux_621_CMP0, PCIN, %1878)
node _procmux_622_CMP0 : bv<1> = eq(%1870, 3'b000)
node zmux : bv<48> = ite(_procmux_622_CMP0, 48'x000000000000, %1880)
node ALUMODE_in : bv<4> = xor(ALUMODE, IS_ALUMODE_INVERTED)
node ALUMODEREG_BIN : bv<1> = ALUMODEREG[0]
node ALUMODE_DATA : bv<4> = ite(ALUMODEREG_BIN, ALUMODE_reg, ALUMODE_in)
node %1884 : bv<1> = ALUMODE_DATA[0]
node %1885 : bv<2> = concat(%1884, %1884)
node %1886 : bv<3> = concat(%1884, %1885)
node %1887 : bv<4> = concat(%1884, %1886)
node %1888 : bv<5> = concat(%1884, %1887)
node %1889 : bv<6> = concat(%1884, %1888)
node %1890 : bv<7> = concat(%1884, %1889)
node %1891 : bv<8> = concat(%1884, %1890)
node %1892 : bv<9> = concat(%1884, %1891)
node %1893 : bv<10> = concat(%1884, %1892)
node %1894 : bv<11> = concat(%1884, %1893)
node %1895 : bv<12> = concat(%1884, %1894)
node %1896 : bv<13> = concat(%1884, %1895)
node %1897 : bv<14> = concat(%1884, %1896)
node %1898 : bv<15> = concat(%1884, %1897)
node %1899 : bv<16> = concat(%1884, %1898)
node %1900 : bv<17> = concat(%1884, %1899)
node %1901 : bv<18> = concat(%1884, %1900)
node %1902 : bv<19> = concat(%1884, %1901)
node %1903 : bv<20> = concat(%1884, %1902)
node %1904 : bv<21> = concat(%1884, %1903)
node %1905 : bv<22> = concat(%1884, %1904)
node %1906 : bv<23> = concat(%1884, %1905)
node %1907 : bv<24> = concat(%1884, %1906)
node %1908 : bv<25> = concat(%1884, %1907)
node %1909 : bv<26> = concat(%1884, %1908)
node %1910 : bv<27> = concat(%1884, %1909)
node %1911 : bv<28> = concat(%1884, %1910)
node %1912 : bv<29> = concat(%1884, %1911)
node %1913 : bv<30> = concat(%1884, %1912)
node %1914 : bv<31> = concat(%1884, %1913)
node %1915 : bv<32> = concat(%1884, %1914)
node %1916 : bv<33> = concat(%1884, %1915)
node %1917 : bv<34> = concat(%1884, %1916)
node %1918 : bv<35> = concat(%1884, %1917)
node %1919 : bv<36> = concat(%1884, %1918)
node %1920 : bv<37> = concat(%1884, %1919)
node %1921 : bv<38> = concat(%1884, %1920)
node %1922 : bv<39> = concat(%1884, %1921)
node %1923 : bv<40> = concat(%1884, %1922)
node %1924 : bv<41> = concat(%1884, %1923)
node %1925 : bv<42> = concat(%1884, %1924)
node %1926 : bv<43> = concat(%1884, %1925)
node %1927 : bv<44> = concat(%1884, %1926)
node %1928 : bv<45> = concat(%1884, %1927)
node %1929 : bv<46> = concat(%1884, %1928)
node %1930 : bv<47> = concat(%1884, %1929)
node %1931 : bv<48> = concat(%1884, %1930)
node z_optinv : bv<48> = xor(%1931, zmux)
node B_INPUT_REG : bv<56> = concat(51'x0000000000000, B_INPUT)
node %1934 : bv<1> = eq(B_INPUT_REG, 56'x0000000000000f)
node %1935 : bv<32> = ite(%1934, 32'x00000001, 32'x00000000)
node %1937 : bv<1> = eq(B_INPUT_REG, 56'x00000000000007)
node %1938 : bv<32> = ite(%1937, 32'x00000000, %1935)
node B_INPUT_BIN : bv<1> = %1938[0]
node %1940 : bv<32> = concat(31'x00000000, B_INPUT_BIN)
node %1941 : bv<1> = eq(%1940, 32'x00000001)
node _procmux_557 : bv<18> = ite(%1941, BCIN, B)
node BREG_BIN : bv<2> = BREG[1:0]
node %233 : bv<1> = eq(BREG_BIN, 2'b00)
node %234 : bv<1> = not(%233)
node B2_DATA : bv<18> = ite(%234, B2_reg, _procmux_557)
node A_INPUT_REG : bv<56> = concat(51'x0000000000000, A_INPUT)
node %1944 : bv<1> = eq(A_INPUT_REG, 56'x0000000000000f)
node %1945 : bv<32> = ite(%1944, 32'x00000001, 32'x00000000)
node %1946 : bv<1> = eq(A_INPUT_REG, 56'x00000000000007)
node %1947 : bv<32> = ite(%1946, 32'x00000000, %1945)
node A_INPUT_BIN : bv<1> = %1947[0]
node %1949 : bv<32> = concat(31'x00000000, A_INPUT_BIN)
node %1950 : bv<1> = eq(%1949, 32'x00000001)
node _procmux_576 : bv<30> = ite(%1950, ACIN, A)
node AREG_BIN : bv<2> = AREG[1:0]
node %247 : bv<1> = eq(AREG_BIN, 2'b00)
node %248 : bv<1> = not(%247)
node A_ALU : bv<30> = ite(%248, A2_reg, _procmux_576)
node %1953 : bv<48> = concat(A_ALU, B2_DATA)
node %1954 : bv<2> = OPMODE_mux[1:0]
node _procmux_629_CMP0 : bv<1> = eq(%1954, 2'b11)
node %1956 : bv<48> = ite(_procmux_629_CMP0, %1953, 48'x000000000000)
node _procmux_630_CMP0 : bv<1> = eq(%1954, 2'b10)
node %1958 : bv<48> = ite(_procmux_630_CMP0, P_FDBK_in, %1956)
node %1959 : bv<27> = A_ALU[26:0]
node %316 : bv<27> = A1_reg[26:0]
node INMODE_in : bv<5> = xor(INMODE, IS_INMODE_INVERTED)
node INMODEREG_BIN : bv<1> = INMODEREG[0]
node INMODE_mux : bv<5> = ite(INMODEREG_BIN, INMODE_reg, INMODE_in)
node %1961 : bv<1> = INMODE_mux[0]
node _procmux_462 : bv<27> = ite(%1961, %316, %1959)
node %1963 : bv<1> = INMODE_mux[1]
node PREADDINSEL_REG : bv<8> = concat(3'b000, PREADDINSEL)
node %1965 : bv<1> = eq(PREADDINSEL_REG, 8'b00000001)
node %1966 : bv<32> = ite(%1965, 32'x00000001, 32'x00000000)
node %1967 : bv<1> = eq(PREADDINSEL_REG, 8'b00000000)
node %1968 : bv<32> = ite(%1967, 32'x00000000, %1966)
node PREADDINSEL_BIN : bv<1> = %1968[0]
node %1970 : bv<32> = concat(31'x00000000, PREADDINSEL_BIN)
node %1971 : bv<1> = eq(%1970, 32'x00000000)
node %1972 : bv<1> = and(%1971, %1963)
node _procmux_465 : bv<27> = ite(%1972, 27'x0000000, _procmux_462)
node A2A1 : bv<27> = ite(%1972, 27'x0000000, _procmux_465)
node %1975 : bv<1> = INMODE_mux[4]
node _procmux_453 : bv<18> = ite(%1975, B1_DATA_out, B2_DATA)
node %1977 : bv<1> = eq(%1970, 32'x00000001)
node %1978 : bv<1> = and(%1977, %1963)
node _procmux_456 : bv<18> = ite(%1978, 18'x00000, _procmux_453)
node B2B1 : bv<18> = ite(%1978, 18'x00000, _procmux_456)
node %1981 : bv<1> = B2B1[17]
node %1982 : bv<19> = concat(%1981, B2B1)
node %1983 : bv<20> = concat(%1981, %1982)
node %1984 : bv<21> = concat(%1981, %1983)
node %1985 : bv<22> = concat(%1981, %1984)
node %1986 : bv<23> = concat(%1981, %1985)
node %1987 : bv<24> = concat(%1981, %1986)
node %1988 : bv<25> = concat(%1981, %1987)
node %1989 : bv<26> = concat(%1981, %1988)
node %1990 : bv<27> = concat(%1981, %1989)
node PREADD_AB : bv<27> = ite(%1977, %1990, A2A1)
node DREG_BIN : bv<1> = DREG[0]
node USE_MULT_REG : bv<64> = concat(59'x000000000000000, USE_MULT)
node %1993 : bv<1> = eq(USE_MULT_REG, 64'x0000000000000014)
node %1994 : bv<32> = ite(%1993, 32'x00000002, 32'x00000000)
node %1996 : bv<1> = eq(USE_MULT_REG, 64'x0000000000000012)
node %1997 : bv<32> = ite(%1996, 32'x00000001, %1994)
node %1999 : bv<1> = eq(USE_MULT_REG, 64'x000000000000000a)
node %2000 : bv<32> = ite(%1999, 32'x00000000, %1997)
node USE_MULT_BIN : bv<2> = %2000[1:0]
node %2002 : bv<32> = concat(30'x00000000, USE_MULT_BIN)
node %2003 : bv<1> = eq(%2002, 32'x00000002)
node BMULTSEL_REG : bv<16> = concat(11'x000, BMULTSEL)
node %2005 : bv<1> = eq(BMULTSEL_REG, 16'x0002)
node %2006 : bv<32> = ite(%2005, 32'x00000001, 32'x00000000)
node %2008 : bv<1> = eq(BMULTSEL_REG, 16'x0001)
node %2009 : bv<32> = ite(%2008, 32'x00000000, %2006)
node BMULTSEL_BIN : bv<1> = %2009[0]
node %2011 : bv<32> = concat(31'x00000000, BMULTSEL_BIN)
node %2012 : bv<1> = eq(%2011, 32'x00000000)
node AMULTSEL_REG : bv<16> = concat(11'x000, AMULTSEL)
node %2013 : bv<1> = eq(AMULTSEL_REG, 16'x0002)
node %2014 : bv<32> = ite(%2013, 32'x00000001, 32'x00000000)
node %2016 : bv<1> = eq(AMULTSEL_REG, 16'x0000)
node %2017 : bv<32> = ite(%2016, 32'x00000000, %2014)
node AMULTSEL_BIN : bv<1> = %2017[0]
node %2019 : bv<32> = concat(31'x00000000, AMULTSEL_BIN)
node %2020 : bv<1> = eq(%2019, 32'x00000000)
node %2021 : bv<1> = and(%2020, %2012)
node %2022 : bv<1> = or(%2021, %2003)
node DREG_INT : bv<1> = ite(%2022, 1'b0, DREG_BIN)
node D_DATA : bv<27> = ite(DREG_INT, D_DATA_reg, D)
node %2025 : bv<1> = INMODE_mux[2]
node D_DATA_mux : bv<27> = ite(%2025, D_DATA, 27'x0000000)
node %2027 : bv<27> = add(D_DATA_mux, PREADD_AB)
node %2028 : bv<27> = sub(D_DATA_mux, PREADD_AB)
node %2029 : bv<1> = INMODE_mux[3]
node AD_in : bv<27> = ite(%2029, %2028, %2027)
node ADREG_BIN : bv<1> = ADREG[0]
node ADREG_INT : bv<1> = ite(%2022, 1'b0, ADREG_BIN)
node AD_DATA : bv<27> = ite(ADREG_INT, AD_DATA_reg, AD_in)
node %2033 : bv<18> = AD_DATA[17:0]
node b_mult_mux : bv<18> = ite(%2012, B2B1, %2033)
node BMULT17_in : bv<1> = b_mult_mux[17]
node %2036 : bv<19> = concat(BMULT17_in, b_mult_mux)
node %2037 : bv<20> = concat(BMULT17_in, %2036)
node %2038 : bv<21> = concat(BMULT17_in, %2037)
node %2039 : bv<22> = concat(BMULT17_in, %2038)
node %2040 : bv<23> = concat(BMULT17_in, %2039)
node %2041 : bv<24> = concat(BMULT17_in, %2040)
node %2042 : bv<25> = concat(BMULT17_in, %2041)
node %2043 : bv<26> = concat(BMULT17_in, %2042)
node %2044 : bv<27> = concat(BMULT17_in, %2043)
node %2045 : bv<28> = concat(BMULT17_in, %2044)
node %2046 : bv<29> = concat(BMULT17_in, %2045)
node %2047 : bv<30> = concat(BMULT17_in, %2046)
node %2048 : bv<31> = concat(BMULT17_in, %2047)
node %2049 : bv<32> = concat(BMULT17_in, %2048)
node %2050 : bv<33> = concat(BMULT17_in, %2049)
node %2051 : bv<34> = concat(BMULT17_in, %2050)
node %2052 : bv<35> = concat(BMULT17_in, %2051)
node %2053 : bv<36> = concat(BMULT17_in, %2052)
node %2054 : bv<37> = concat(BMULT17_in, %2053)
node %2055 : bv<38> = concat(BMULT17_in, %2054)
node %2056 : bv<39> = concat(BMULT17_in, %2055)
node %2057 : bv<40> = concat(BMULT17_in, %2056)
node %2058 : bv<41> = concat(BMULT17_in, %2057)
node %2059 : bv<42> = concat(BMULT17_in, %2058)
node %2060 : bv<43> = concat(BMULT17_in, %2059)
node %2061 : bv<44> = concat(BMULT17_in, %2060)
node %2062 : bv<45> = concat(BMULT17_in, %2061)
node a_mult_mux : bv<27> = ite(%2020, A2A1, AD_DATA)
node AMULT26_in : bv<1> = a_mult_mux[26]
node %2065 : bv<28> = concat(AMULT26_in, a_mult_mux)
node %2066 : bv<29> = concat(AMULT26_in, %2065)
node %2067 : bv<30> = concat(AMULT26_in, %2066)
node %2068 : bv<31> = concat(AMULT26_in, %2067)
node %2069 : bv<32> = concat(AMULT26_in, %2068)
node %2070 : bv<33> = concat(AMULT26_in, %2069)
node %2071 : bv<34> = concat(AMULT26_in, %2070)
node %2072 : bv<35> = concat(AMULT26_in, %2071)
node %2073 : bv<36> = concat(AMULT26_in, %2072)
node %2074 : bv<37> = concat(AMULT26_in, %2073)
node %2075 : bv<38> = concat(AMULT26_in, %2074)
node %2076 : bv<39> = concat(AMULT26_in, %2075)
node %2077 : bv<40> = concat(AMULT26_in, %2076)
node %2078 : bv<41> = concat(AMULT26_in, %2077)
node %2079 : bv<42> = concat(AMULT26_in, %2078)
node %2080 : bv<43> = concat(AMULT26_in, %2079)
node %2081 : bv<44> = concat(AMULT26_in, %2080)
node %2082 : bv<45> = concat(AMULT26_in, %2081)
node %2083 : bv<45> = mul(%2082, %2062)
node mult : bv<45> = ite(%2003, 45'x000000000000, %2083)
node %2085 : bv<44> = mult[43:0]
node %2086 : bv<44> = and(%2085, 44'x55555555555)
node U_in : bv<45> = concat(1'b1, %2086)
node MREG_BIN : bv<1> = MREG[0]
node U_DATA : bv<45> = ite(MREG_BIN, U_DATA_reg, U_in)
node USE_SIMD_REG : bv<48> = concat(43'x00000000000, USE_SIMD)
node %2090 : bv<1> = eq(USE_SIMD_REG, 48'x000000000019)
node %2091 : bv<32> = ite(%2090, 32'x00000002, 32'x00000000)
node %2093 : bv<1> = eq(USE_SIMD_REG, 48'x000000000013)
node %2094 : bv<32> = ite(%2093, 32'x00000001, %2091)
node %2096 : bv<1> = eq(USE_SIMD_REG, 48'x00000000000c)
node %2097 : bv<32> = ite(%2096, 32'x00000000, %2094)
node USE_SIMD_BIN : bv<2> = %2097[1:0]
node %2099 : bv<32> = concat(30'x00000000, USE_SIMD_BIN)
node %2100 : bv<1> = eq(%2099, 32'x00000000)
node U_DATA_in : bv<45> = ite(%2100, U_DATA, 45'x100000000000)
node %2102 : bv<1> = U_DATA_in[44]
node %2103 : bv<46> = concat(%2102, U_DATA_in)
node %2104 : bv<47> = concat(%2102, %2103)
node %2105 : bv<48> = concat(%2102, %2104)
node _procmux_631_CMP0 : bv<1> = eq(%1954, 2'b01)
node %2107 : bv<48> = ite(_procmux_631_CMP0, %2105, %1958)
node %452 : bv<2> = concat(MULTSIGNIN, 1'b0)
node %453 : bv<48> = concat(46'x000000000000, %452)
node x_mac_cascd : bv<48> = ite(_procmux_618_CMP0, %453, 48'x000000000000)
node _procmux_632_CMP0 : bv<1> = eq(%1954, 2'b00)
node xmux : bv<48> = ite(_procmux_632_CMP0, x_mac_cascd, %2107)
node %2111 : bv<48> = and(xmux, z_optinv)
node %2112 : bv<2> = OPMODE_mux[3:2]
node _procmux_624_CMP0 : bv<1> = eq(%2112, 2'b11)
node %2114 : bv<48> = ite(_procmux_624_CMP0, C_DATA_in, 48'x000000000000)
node _procmux_625_CMP0 : bv<1> = eq(%2112, 2'b10)
node %2116 : bv<48> = ite(_procmux_625_CMP0, 48'xffffffffffff, %2114)
node %2117 : bv<44> = and(%2085, 44'xaaaaaaaaaaa)
node %2118 : bv<1> = mult[44]
node %2119 : bv<1> = not(%2118)
node V_in : bv<45> = concat(%2119, %2117)
node V_DATA : bv<45> = ite(MREG_BIN, V_DATA_reg, V_in)
node V_DATA_in : bv<45> = ite(%2100, V_DATA, 45'x100000000000)
node %2123 : bv<48> = concat(3'b000, V_DATA_in)
node _procmux_626_CMP0 : bv<1> = eq(%2112, 2'b01)
node %2125 : bv<48> = ite(_procmux_626_CMP0, %2123, %2116)
node _procmux_627_CMP0 : bv<1> = eq(%2112, 2'b00)
node ymux : bv<48> = ite(_procmux_627_CMP0, 48'x000000000000, %2125)
node %2128 : bv<48> = and(z_optinv, ymux)
node %2129 : bv<48> = and(xmux, ymux)
node %2130 : bv<48> = or(%2129, %2128)
node co : bv<48> = or(%2130, %2111)
node %2132 : bv<1> = ALUMODE_DATA[2]
node comux : bv<48> = ite(%2132, 48'x000000000000, co)
node %2134 : bv<11> = comux[10:0]
node %2135 : bv<12> = concat(%2134, 1'b0)
node %2136 : bv<1> = eq(%2099, 32'x00000001)
node %2137 : bv<1> = not(%2136)
node %2138 : bv<1> = comux[11]
node %2139 : bv<1> = and(%2138, %2137)
node %2140 : bv<13> = concat(%2139, %2135)
node %2141 : bv<11> = comux[22:12]
node %2142 : bv<24> = concat(%2141, %2140)
node %2143 : bv<1> = comux[23]
node %2144 : bv<1> = and(%2143, %2100)
node %2145 : bv<25> = concat(%2144, %2142)
node %2146 : bv<11> = comux[34:24]
node %2147 : bv<36> = concat(%2146, %2145)
node %2148 : bv<1> = comux[35]
node %2149 : bv<1> = and(%2148, %2137)
node %2150 : bv<37> = concat(%2149, %2147)
node %2151 : bv<11> = comux[46:36]
node %2152 : bv<48> = concat(%2151, %2150)
node %2153 : bv<48> = xor(z_optinv, xmux)
node s : bv<48> = xor(%2153, ymux)
node %2155 : bv<1> = ALUMODE_DATA[3]
node smux : bv<48> = ite(%2155, co, s)
node %2157 : bv<48> = xor(smux, %2152)
node smux_w : bv<48> = xor(%2157, wmux)
node %2159 : bv<12> = smux_w[11:0]
node %2160 : bv<13> = concat(1'b0, %2159)
node %1158 : bv<1> = not(P_FDBK_47_in)
node CARRYINSELREG_BIN : bv<1> = CARRYINSELREG[0]
node CARRYINSEL_mux : bv<3> = ite(CARRYINSELREG_BIN, CARRYINSEL_reg, CARRYINSEL)
node _procmux_584_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b111)
node %2163 : bv<1> = ite(_procmux_584_CMP0, %1158, 1'b0)
node %2164 : bv<1> = xor(AMULT26_in, BMULT17_in)
node c_mult : bv<1> = not(%2164)
node multcarryin_data : bv<1> = ite(MREG_BIN, qmultcarryin, c_mult)
node %2167 : bv<1> = not(multcarryin_data)
node _procmux_585_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b110)
node %2169 : bv<1> = ite(_procmux_585_CMP0, %2167, %2163)
node _procmux_586_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b101)
node %2171 : bv<1> = ite(_procmux_586_CMP0, P_FDBK_47_in, %2169)
node %729 : bv<1> = COUT_reg[3]
node CCOUT_in : bv<1> = xor(ALUMODE10_reg, %729)
node %731 : bv<1> = not(CCOUT_in)
node _procmux_587_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b100)
node %2173 : bv<1> = ite(_procmux_587_CMP0, %731, %2171)
node %734 : bv<1> = not(%171)
node _procmux_588_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b011)
node %2175 : bv<1> = ite(_procmux_588_CMP0, %734, %2173)
node %737 : bv<1> = not(CARRYCASCIN)
node _procmux_589_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b010)
node %2177 : bv<1> = ite(_procmux_589_CMP0, %737, %2175)
node _procmux_590_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b001)
node %2179 : bv<1> = ite(_procmux_590_CMP0, %171, %2177)
node CARRYIN_in : bv<1> = xor(CARRYIN, IS_CARRYIN_INVERTED)
node CARRYINREG_BIN : bv<1> = CARRYINREG[0]
node CARRYIN_mux : bv<1> = ite(CARRYINREG_BIN, CARRYIN_reg, CARRYIN_in)
node %2181 : bv<1> = not(CARRYIN_mux)
node _procmux_591_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b000)
node cin_b : bv<1> = ite(_procmux_591_CMP0, %2181, %2179)
node %2184 : bv<1> = not(cin_b)
node %2185 : bv<1> = or(%2155, %2132)
node cin : bv<1> = ite(%2185, 1'b0, %2184)
node %2187 : bv<48> = and(smux, wmux)
node %2188 : bv<48> = and(wmux, %2152)
node %2189 : bv<48> = and(smux, %2152)
node %2190 : bv<48> = or(%2189, %2188)
node comux_w : bv<48> = or(%2190, %2187)
node %2192 : bv<11> = comux_w[10:0]
node %2193 : bv<12> = concat(%2192, cin)
node %2194 : bv<13> = concat(1'b0, %2193)
node s0 : bv<13> = add(%2194, %2160)
node %2274 : bv<12> = s0[11:0]
node %2196 : bv<1> = s0[12]
node intc1 : bv<1> = and(%2137, %2196)
node %2199 : bv<13> = concat(12'x000, intc1)
node %2200 : bv<12> = smux_w[23:12]
node %2201 : bv<13> = concat(1'b0, %2200)
node %2202 : bv<1> = comux_w[11]
node co12_lsb : bv<1> = and(%2137, %2202)
node %2204 : bv<11> = comux_w[22:12]
node %2205 : bv<12> = concat(%2204, co12_lsb)
node %2206 : bv<13> = concat(1'b0, %2205)
node %2207 : bv<13> = add(%2206, %2201)
node s1 : bv<13> = add(%2207, %2199)
node %2275 : bv<12> = s1[11:0]
node %2276 : bv<24> = concat(%2275, %2274)
node %2209 : bv<1> = s1[12]
node intc2 : bv<1> = and(%2100, %2209)
node %2211 : bv<13> = concat(12'x000, intc2)
node %2212 : bv<12> = smux_w[35:24]
node %2213 : bv<13> = concat(1'b0, %2212)
node %2214 : bv<1> = comux_w[23]
node co24_lsb : bv<1> = and(%2100, %2214)
node %2216 : bv<11> = comux_w[34:24]
node %2217 : bv<12> = concat(%2216, co24_lsb)
node %2218 : bv<13> = concat(1'b0, %2217)
node %2219 : bv<13> = add(%2218, %2213)
node s2 : bv<13> = add(%2219, %2211)
node %2277 : bv<12> = s2[11:0]
node %2278 : bv<36> = concat(%2277, %2276)
node %2221 : bv<1> = s2[12]
node intc3 : bv<1> = and(%2137, %2221)
node %2224 : bv<14> = concat(13'x0000, intc3)
node %2225 : bv<12> = smux_w[47:36]
node %2226 : bv<1> = comux[47]
node %2227 : bv<13> = concat(%2226, %2225)
node %2228 : bv<14> = concat(1'b0, %2227)
node %2229 : bv<1> = comux_w[35]
node co36_lsb : bv<1> = and(%2137, %2229)
node %2231 : bv<12> = comux_w[47:36]
node %2232 : bv<13> = concat(%2231, co36_lsb)
node %2233 : bv<14> = concat(1'b0, %2232)
node %2234 : bv<14> = add(%2233, %2228)
node s3 : bv<14> = add(%2234, %2224)
node %2279 : bv<12> = s3[11:0]
node %2280 : bv<48> = concat(%2279, %2278)
node %2281 : bv<1> = ALUMODE_DATA[1]
node %2282 : bv<2> = concat(%2281, %2281)
node %2283 : bv<3> = concat(%2281, %2282)
node %2284 : bv<4> = concat(%2281, %2283)
node %2285 : bv<5> = concat(%2281, %2284)
node %2286 : bv<6> = concat(%2281, %2285)
node %2287 : bv<7> = concat(%2281, %2286)
node %2288 : bv<8> = concat(%2281, %2287)
node %2289 : bv<9> = concat(%2281, %2288)
node %2290 : bv<10> = concat(%2281, %2289)
node %2291 : bv<11> = concat(%2281, %2290)
node %2292 : bv<12> = concat(%2281, %2291)
node %2293 : bv<13> = concat(%2281, %2292)
node %2294 : bv<14> = concat(%2281, %2293)
node %2295 : bv<15> = concat(%2281, %2294)
node %2296 : bv<16> = concat(%2281, %2295)
node %2297 : bv<17> = concat(%2281, %2296)
node %2298 : bv<18> = concat(%2281, %2297)
node %2299 : bv<19> = concat(%2281, %2298)
node %2300 : bv<20> = concat(%2281, %2299)
node %2301 : bv<21> = concat(%2281, %2300)
node %2302 : bv<22> = concat(%2281, %2301)
node %2303 : bv<23> = concat(%2281, %2302)
node %2304 : bv<24> = concat(%2281, %2303)
node %2305 : bv<25> = concat(%2281, %2304)
node %2306 : bv<26> = concat(%2281, %2305)
node %2307 : bv<27> = concat(%2281, %2306)
node %2308 : bv<28> = concat(%2281, %2307)
node %2309 : bv<29> = concat(%2281, %2308)
node %2310 : bv<30> = concat(%2281, %2309)
node %2311 : bv<31> = concat(%2281, %2310)
node %2312 : bv<32> = concat(%2281, %2311)
node %2313 : bv<33> = concat(%2281, %2312)
node %2314 : bv<34> = concat(%2281, %2313)
node %2315 : bv<35> = concat(%2281, %2314)
node %2316 : bv<36> = concat(%2281, %2315)
node %2317 : bv<37> = concat(%2281, %2316)
node %2318 : bv<38> = concat(%2281, %2317)
node %2319 : bv<39> = concat(%2281, %2318)
node %2320 : bv<40> = concat(%2281, %2319)
node %2321 : bv<41> = concat(%2281, %2320)
node %2322 : bv<42> = concat(%2281, %2321)
node %2323 : bv<43> = concat(%2281, %2322)
node %2324 : bv<44> = concat(%2281, %2323)
node %2325 : bv<45> = concat(%2281, %2324)
node %2326 : bv<46> = concat(%2281, %2325)
node %2327 : bv<47> = concat(%2281, %2326)
node %2328 : bv<48> = concat(%2281, %2327)
node ALU_OUT_in : bv<48> = xor(%2328, %2280)
node SEL_PATTERN_REG : bv<56> = concat(51'x0000000000000, SEL_PATTERN)
node %2331 : bv<1> = eq(SEL_PATTERN_REG, 56'x00000000000011)
node %2332 : bv<32> = ite(%2331, 32'x00000001, 32'x00000000)
node %2334 : bv<1> = eq(SEL_PATTERN_REG, 56'x00000000000009)
node %2335 : bv<32> = ite(%2334, 32'x00000000, %2332)
node SEL_PATTERN_BIN : bv<1> = %2335[0]
node %2337 : bv<32> = concat(31'x00000000, SEL_PATTERN_BIN)
node %2338 : bv<1> = eq(%2337, 32'x00000000)
node the_pattern : bv<48> = ite(%2338, PATTERN, C_DATA_in)
node %2340 : bv<48> = xor(the_pattern, ALU_OUT_in)
node %2341 : bv<48> = not(%2340)
node %2342 : bv<48> = or(%2341, the_mask)
node pdet_o : bv<1> = eq(%2342, 48'xffffffffffff)
node PREG_BIN : bv<1> = PREG[0]
output PATTERNDETECT : bv<1> = ite(PREG_BIN, pdet_o_reg1, pdet_o)
node %2410 : bv<1> = s3[12]
node ALUMODE10_in : bv<1> = and(%1884, %2281)
node cout3 : bv<1> = xor(ALUMODE10_in, %2410)
output CARRYCASCOUT : bv<1> = ite(PREG_BIN, CCOUT_in, xor(ALUMODE10_in, cout3))
node %2385 : bv<1> = xor(%2202, %2196)
node %2386 : bv<1> = xor(%2385, %2138)
node cout0 : bv<1> = xor(ALUMODE10_in, %2386)
node %2389 : bv<2> = ALUMODE_DATA[3:2]
node %2390 : bv<1> = eq(%2389, 2'b00)
node %2391 : bv<1> = not(%2390)
node %2392 : bv<4> = OPMODE_mux[3:0]
node %2393 : bv<1> = eq(%2392, 4'b0101)
node mult_or_logic : bv<1> = or(%2393, %2391)
node cout_0 : bv<1> = ite(mult_or_logic, 1'b0, cout0)
node %2396 : bv<1> = ite(%2136, cout_0, 1'b0)
node %2397 : bv<1> = xor(%2214, %2209)
node %2398 : bv<1> = xor(%2397, %2143)
node cout1 : bv<1> = xor(ALUMODE10_in, %2398)
node cout_1 : bv<1> = ite(mult_or_logic, 1'b0, cout1)
node %2401 : bv<1> = not(%2100)
node %2402 : bv<1> = ite(%2401, cout_1, 1'b0)
node %2403 : bv<2> = concat(%2402, %2396)
node %2404 : bv<1> = xor(%2229, %2221)
node %2405 : bv<1> = xor(%2404, %2148)
node cout2 : bv<1> = xor(ALUMODE10_in, %2405)
node cout_2 : bv<1> = ite(mult_or_logic, 1'b0, cout2)
node %2408 : bv<1> = ite(%2136, cout_2, 1'b0)
node %2409 : bv<3> = concat(%2408, %2403)
node COUT_in : bv<4> = concat(cout3, %2409)
output CARRYOUT : bv<4> = ite(PREG_BIN, COUT_reg, COUT_in)
node MULTSIGN_ALU_in : bv<1> = s3[13]
output MULTSIGNOUT : bv<1> = ite(PREG_BIN, MULTSIGN_ALU_reg, MULTSIGN_ALU_in)
node %2379 : bv<48> = or(%2340, the_mask)
node pdetb_o : bv<1> = eq(%2379, 48'xffffffffffff)
output PATTERNBDETECT : bv<1> = ite(PREG_BIN, pdetb_o_reg1, pdetb_o)
node overflow_data : bv<1> = ite(PREG_BIN, pdet_o_reg2, pdet_o)
node %2345 : bv<1> = not(PATTERNDETECT)
node %2613 : bv<1> = and(%2345, not(PATTERNBDETECT))
node %2615 : bv<1> = eq(%2271, 32'x00000001)
output OVERFLOW : bv<1> = ite(%2615, and(%2613, overflow_data), 1'b0)
output PCOUT : bv<48> = ite(PREG_BIN, P_FDBK_in, ALU_OUT_in)
output UNDERFLOW : bv<1> = ite(%2615, and(%2613, ite(PREG_BIN, pdetb_o_reg2, pdetb_o)), 1'b0)
node %2422 : bv<1> = s[11]
node %2423 : bv<1> = s[10]
node %2424 : bv<1> = s[9]
node %2425 : bv<1> = s[8]
node %2426 : bv<1> = s[7]
node %2427 : bv<1> = s[6]
node %2428 : bv<1> = xor(%2427, %2426)
node %2429 : bv<1> = xor(%2428, %2425)
node %2430 : bv<1> = xor(%2429, %2424)
node %2431 : bv<1> = xor(%2430, %2423)
node %2432 : bv<1> = xor(%2431, %2422)
node %2433 : bv<32> = concat(31'x00000000, %2432)
node USE_WIDEXOR_REG : bv<40> = concat(35'x000000000, USE_WIDEXOR)
node %2435 : bv<1> = eq(USE_WIDEXOR_REG, 40'x0000000018)
node %2436 : bv<32> = ite(%2435, 32'x00000001, 32'x00000000)
node %2438 : bv<1> = eq(USE_WIDEXOR_REG, 40'x000000000d)
node %2439 : bv<32> = ite(%2438, 32'x00000000, %2436)
node USE_WIDEXOR_BIN : bv<1> = %2439[0]
node %2441 : bv<32> = ite(USE_WIDEXOR_BIN, %2433, 32'x00000000)
node xor_12b : bv<1> = %2441[0]
node %2444 : bv<1> = s[5]
node %2445 : bv<1> = s[4]
node %2446 : bv<1> = s[3]
node %2447 : bv<1> = s[2]
node %2448 : bv<1> = s[1]
node %2449 : bv<1> = s[0]
node %2450 : bv<1> = xor(%2449, %2448)
node %2451 : bv<1> = xor(%2450, %2447)
node %2452 : bv<1> = xor(%2451, %2446)
node %2453 : bv<1> = xor(%2452, %2445)
node %2454 : bv<1> = xor(%2453, %2444)
node %2455 : bv<32> = concat(31'x00000000, %2454)
node %2456 : bv<32> = ite(USE_WIDEXOR_BIN, %2455, 32'x00000000)
node xor_12a : bv<1> = %2456[0]
node xor_24a : bv<1> = xor(xor_12a, xor_12b)
node XORSIMD_REG : bv<88> = concat(83'x000000000000000000000, XORSIMD)
node %2460 : bv<1> = eq(XORSIMD_REG, 88'x000000000000000000001a)
node %2461 : bv<32> = ite(%2460, 32'x00000001, 32'x00000000)
node %2463 : bv<1> = eq(XORSIMD_REG, 88'x000000000000000000000e)
node %2464 : bv<32> = ite(%2463, 32'x00000000, %2461)
node XORSIMD_BIN : bv<1> = %2464[0]
node %2466 : bv<1> = ite(XORSIMD_BIN, xor_12a, xor_24a)
node %2468 : bv<1> = s[23]
node %2469 : bv<1> = s[22]
node %2470 : bv<1> = s[21]
node %2471 : bv<1> = s[20]
node %2472 : bv<1> = s[19]
node %2473 : bv<1> = s[18]
node %2474 : bv<1> = xor(%2473, %2472)
node %2475 : bv<1> = xor(%2474, %2471)
node %2476 : bv<1> = xor(%2475, %2470)
node %2477 : bv<1> = xor(%2476, %2469)
node %2478 : bv<1> = xor(%2477, %2468)
node %2479 : bv<32> = concat(31'x00000000, %2478)
node %2480 : bv<32> = ite(USE_WIDEXOR_BIN, %2479, 32'x00000000)
node xor_12d : bv<1> = %2480[0]
node %2483 : bv<1> = s[17]
node %2484 : bv<1> = s[16]
node %2485 : bv<1> = s[15]
node %2486 : bv<1> = s[14]
node %2487 : bv<1> = s[13]
node %2488 : bv<1> = s[12]
node %2489 : bv<1> = xor(%2488, %2487)
node %2490 : bv<1> = xor(%2489, %2486)
node %2491 : bv<1> = xor(%2490, %2485)
node %2492 : bv<1> = xor(%2491, %2484)
node %2493 : bv<1> = xor(%2492, %2483)
node %2494 : bv<32> = concat(31'x00000000, %2493)
node %2495 : bv<32> = ite(USE_WIDEXOR_BIN, %2494, 32'x00000000)
node xor_12c : bv<1> = %2495[0]
node xor_24b : bv<1> = xor(xor_12c, xor_12d)
node xor_48a : bv<1> = xor(xor_24a, xor_24b)
node %2499 : bv<1> = ite(XORSIMD_BIN, xor_12b, xor_48a)
node %2500 : bv<2> = concat(%2499, %2466)
node %2501 : bv<1> = ite(XORSIMD_BIN, xor_12c, xor_24b)
node %2502 : bv<3> = concat(%2501, %2500)
node %2504 : bv<1> = s[47]
node %2505 : bv<1> = s[46]
node %2506 : bv<1> = s[45]
node %2507 : bv<1> = s[44]
node %2508 : bv<1> = s[43]
node %2509 : bv<1> = s[42]
node %2510 : bv<1> = xor(%2509, %2508)
node %2511 : bv<1> = xor(%2510, %2507)
node %2512 : bv<1> = xor(%2511, %2506)
node %2513 : bv<1> = xor(%2512, %2505)
node %2514 : bv<1> = xor(%2513, %2504)
node %2515 : bv<32> = concat(31'x00000000, %2514)
node %2516 : bv<32> = ite(USE_WIDEXOR_BIN, %2515, 32'x00000000)
node xor_12h : bv<1> = %2516[0]
node %2519 : bv<1> = s[41]
node %2520 : bv<1> = s[40]
node %2521 : bv<1> = s[39]
node %2522 : bv<1> = s[38]
node %2523 : bv<1> = s[37]
node %2524 : bv<1> = s[36]
node %2525 : bv<1> = xor(%2524, %2523)
node %2526 : bv<1> = xor(%2525, %2522)
node %2527 : bv<1> = xor(%2526, %2521)
node %2528 : bv<1> = xor(%2527, %2520)
node %2529 : bv<1> = xor(%2528, %2519)
node %2530 : bv<32> = concat(31'x00000000, %2529)
node %2531 : bv<32> = ite(USE_WIDEXOR_BIN, %2530, 32'x00000000)
node xor_12g : bv<1> = %2531[0]
node xor_24d : bv<1> = xor(xor_12g, xor_12h)
node %2535 : bv<1> = s[35]
node %2536 : bv<1> = s[34]
node %2537 : bv<1> = s[33]
node %2538 : bv<1> = s[32]
node %2539 : bv<1> = s[31]
node %2540 : bv<1> = s[30]
node %2541 : bv<1> = xor(%2540, %2539)
node %2542 : bv<1> = xor(%2541, %2538)
node %2543 : bv<1> = xor(%2542, %2537)
node %2544 : bv<1> = xor(%2543, %2536)
node %2545 : bv<1> = xor(%2544, %2535)
node %2546 : bv<32> = concat(31'x00000000, %2545)
node %2547 : bv<32> = ite(USE_WIDEXOR_BIN, %2546, 32'x00000000)
node xor_12f : bv<1> = %2547[0]
node %2550 : bv<1> = s[29]
node %2551 : bv<1> = s[28]
node %2552 : bv<1> = s[27]
node %2553 : bv<1> = s[26]
node %2554 : bv<1> = s[25]
node %2555 : bv<1> = s[24]
node %2556 : bv<1> = xor(%2555, %2554)
node %2557 : bv<1> = xor(%2556, %2553)
node %2558 : bv<1> = xor(%2557, %2552)
node %2559 : bv<1> = xor(%2558, %2551)
node %2560 : bv<1> = xor(%2559, %2550)
node %2561 : bv<32> = concat(31'x00000000, %2560)
node %2562 : bv<32> = ite(USE_WIDEXOR_BIN, %2561, 32'x00000000)
node xor_12e : bv<1> = %2562[0]
node xor_24c : bv<1> = xor(xor_12e, xor_12f)
node xor_48b : bv<1> = xor(xor_24c, xor_24d)
node xor_96 : bv<1> = xor(xor_48a, xor_48b)
node %2567 : bv<1> = ite(XORSIMD_BIN, xor_12d, xor_96)
node %2568 : bv<4> = concat(%2567, %2502)
node %2569 : bv<1> = ite(XORSIMD_BIN, xor_12e, xor_24c)
node %2570 : bv<5> = concat(%2569, %2568)
node %2571 : bv<1> = ite(XORSIMD_BIN, xor_12f, xor_48b)
node %2572 : bv<6> = concat(%2571, %2570)
node %2573 : bv<1> = ite(XORSIMD_BIN, xor_12g, xor_24d)
node %2574 : bv<7> = concat(%2573, %2572)
node XOR_MX_in : bv<8> = concat(xor_12h, %2574)
output XOROUT : bv<8> = ite(PREG_BIN, XOR_MX_reg, XOR_MX_in)
output ACOUT : bv<30> = ite(eq(ACASCREG[1:0], AREG_BIN), A_ALU, A1_reg)
output BCOUT : bv<18> = ite(eq(BCASCREG[1:0], BREG_BIN), B2_DATA, B1_DATA_out)
node %1032 : bv<1> = and(CEP, PREG_BIN)
node AUTORESET_PRIORITY_REG : bv<40> = concat(35'x000000000, AUTORESET_PRIORITY)
node auto_reset_pri : bv<1> = or(eq(concat(31'x00000000, ite(eq(AUTORESET_PRIORITY_REG, 40'x0000000006), 32'x00000000, ite(eq(AUTORESET_PRIORITY_REG, 40'x0000000010), 32'x00000001, 32'x00000000))[0]), 32'x00000000), CEP)
node AUTORESET_PATDET_REG : bv<120> = concat(115'x00000000000000000000000000000, AUTORESET_PATDET)
node %2369 : bv<32> = concat(30'x00000000, ite(eq(AUTORESET_PATDET_REG, 120'x000000000000000000000000000003), 32'x00000000, ite(eq(AUTORESET_PATDET_REG, 120'x000000000000000000000000000004), 32'x00000001, ite(eq(AUTORESET_PATDET_REG, 120'x000000000000000000000000000005), 32'x00000002, 32'x00000000)))[1:0])
node %2375 : bv<1> = or(xor(RSTP, IS_RSTP_INVERTED), ite(eq(%2369, 32'x00000001), and(auto_reset_pri, PATTERNDETECT), ite(eq(%2369, 32'x00000002), and(and(auto_reset_pri, overflow_data), %2345), 1'b0)))
node RSTCTRL_in : bv<1> = xor(RSTCTRL, IS_RSTCTRL_INVERTED)
node RSTB_in : bv<1> = xor(RSTB, IS_RSTB_INVERTED)
node %1051 : bv<1> = or(xor(RSTA, IS_RSTA_INVERTED), %247)
node RSTD_in : bv<1> = xor(RSTD, IS_RSTD_INVERTED)
node %2580 : bv<1> = or(xor(RSTM, IS_RSTM_INVERTED), not(MREG_BIN))
node RSTALLCARRYIN_in : bv<1> = xor(RSTALLCARRYIN, IS_RSTALLCARRYIN_INVERTED)
state ALUMODE_reg : bv<4>
  [next] ite(xor(RSTALUMODE, IS_RSTALUMODE_INVERTED), 4'b0000, ite(CEALUMODE, ALUMODE_in, ALUMODE_reg))
state P_FDBK_in : bv<48>
  [next] ite(%2375, 48'x000000000000, ite(%1032, ALU_OUT_in, P_FDBK_in))
state OPMODE_reg : bv<9>
  [next] ite(RSTCTRL_in, 9'x000, ite(CECTRL, OPMODE_in, OPMODE_reg))
state C_reg : bv<48>
  [next] ite(or(xor(RSTC, IS_RSTC_INVERTED), not(CREG_BIN)), 48'x000000000000, ite(CEC, C, C_reg))
state B2_reg : bv<18>
  [next] ite(RSTB_in, 18'x00000, ite(CEB2, ite(eq(BREG_BIN, 2'b10), B1_DATA_out, _procmux_557), B2_reg))
state A2_reg : bv<30>
  [next] ite(%1051, 30'x00000000, ite(CEA2, ite(eq(AREG_BIN, 2'b10), A1_reg, _procmux_576), A2_reg))
state D_DATA_reg : bv<27>
  [next] ite(or(RSTD_in, not(DREG_INT)), 27'x0000000, ite(CED, D, D_DATA_reg))
state INMODE_reg : bv<5>
  [next] ite(or(xor(RSTINMODE, IS_RSTINMODE_INVERTED), not(INMODEREG_BIN)), 5'b00000, ite(CEINMODE, INMODE_in, INMODE_reg))
state A1_reg : bv<30>
  [next] ite(%1051, 30'x00000000, ite(CEA1, _procmux_576, A1_reg))
state B1_DATA_out : bv<18>
  [next] ite(or(RSTB_in, %233), 18'x00000, ite(CEB1, _procmux_557, B1_DATA_out))
state AD_DATA_reg : bv<27>
  [next] ite(RSTD_in, 27'x0000000, ite(CEAD, AD_in, AD_DATA_reg))
state U_DATA_reg : bv<45>
  [next] ite(%2580, 45'x000000000000, ite(CEM, U_in, U_DATA_reg))
state V_DATA_reg : bv<45>
  [next] ite(%2580, 45'x000000000000, ite(CEM, V_in, V_DATA_reg))
state XOR_MX_reg : bv<8>
  [next] ite(%2375, 8'b00000000, ite(%1032, XOR_MX_in, XOR_MX_reg))
state CARRYINSEL_reg : bv<3>
  [next] ite(RSTCTRL_in, 3'b000, ite(CECTRL, CARRYINSEL, CARRYINSEL_reg))
state qmultcarryin : bv<1>
  [next] ite(RSTALLCARRYIN_in, 32'x00000000, concat(31'x00000000, ite(CEM, c_mult, qmultcarryin)))[0]
state ALUMODE10_reg : bv<1>
  [next] ite(%2375, 1'b0, ite(%1032, ALUMODE10_in, ALUMODE10_reg))
state COUT_reg : bv<4>
  [next] ite(%2375, 4'b0000, ite(%1032, COUT_in, COUT_reg))
state CARRYIN_reg : bv<1>
  [next] ite(RSTALLCARRYIN_in, 1'b0, ite(CECARRYIN, CARRYIN_in, CARRYIN_reg))
state pdet_o_reg1 : bv<1>
  [next] ite(%2375, 1'b0, ite(%1032, pdet_o, pdet_o_reg1))
state pdetb_o_reg1 : bv<1>
  [next] ite(%2375, 1'b0, ite(%1032, pdetb_o, pdetb_o_reg1))
state pdetb_o_reg2 : bv<1>
  [next] ite(%2375, 1'b0, ite(%1032, pdetb_o_reg1, pdetb_o_reg2))
state pdet_o_reg2 : bv<1>
  [next] ite(%2375, 1'b0, ite(%1032, pdet_o_reg1, pdet_o_reg2))
state MULTSIGN_ALU_reg : bv<1>
  [next] ite(%2375, 1'b0, ite(%1032, MULTSIGN_ALU_in, MULTSIGN_ALU_reg))
