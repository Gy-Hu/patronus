---
source: tests/btor2_test.rs
expression: sys.serialize_to_str(&ctx)
---
DSP48E2
input RSTP : bv<1>
input RSTM : bv<1>
input RSTINMODE : bv<1>
input RSTD : bv<1>
input RSTCTRL : bv<1>
input RSTC : bv<1>
input RSTB : bv<1>
input RSTALUMODE : bv<1>
input RSTALLCARRYIN : bv<1>
input RSTA : bv<1>
input PCIN : bv<48>
input OPMODE : bv<9>
input MULTSIGNIN : bv<1>
input INMODE : bv<5>
input D : bv<27>
input CLK : bv<1>
input CEP : bv<1>
input CEM : bv<1>
input CEINMODE : bv<1>
input CED : bv<1>
input CECTRL : bv<1>
input CECARRYIN : bv<1>
input CEC : bv<1>
input CEB2 : bv<1>
input CEB1 : bv<1>
input CEALUMODE : bv<1>
input CEAD : bv<1>
input CEA2 : bv<1>
input CEA1 : bv<1>
input CARRYINSEL : bv<3>
input CARRYIN : bv<1>
input CARRYCASCIN : bv<1>
input C : bv<48>
input BCIN : bv<18>
input B : bv<18>
input ALUMODE : bv<4>
input ACIN : bv<30>
input A : bv<30>
input XORSIMD : bv<5>
input USE_WIDEXOR : bv<5>
input USE_SIMD : bv<5>
input USE_PATTERN_DETECT : bv<5>
input USE_MULT : bv<5>
input SEL_PATTERN : bv<5>
input SEL_MASK : bv<5>
input RND : bv<48>
input PREG : bv<32>
input PREADDINSEL : bv<5>
input PATTERN : bv<48>
input OPMODEREG : bv<32>
input MREG : bv<32>
input MASK : bv<48>
input IS_RSTP_INVERTED : bv<1>
input IS_RSTM_INVERTED : bv<1>
input IS_RSTINMODE_INVERTED : bv<1>
input IS_RSTD_INVERTED : bv<1>
input IS_RSTC_INVERTED : bv<1>
input IS_RSTCTRL_INVERTED : bv<1>
input IS_RSTB_INVERTED : bv<1>
input IS_RSTA_INVERTED : bv<1>
input IS_RSTALUMODE_INVERTED : bv<1>
input IS_RSTALLCARRYIN_INVERTED : bv<1>
input IS_OPMODE_INVERTED : bv<9>
input IS_INMODE_INVERTED : bv<5>
input IS_CLK_INVERTED : bv<1>
input IS_CARRYIN_INVERTED : bv<1>
input IS_ALUMODE_INVERTED : bv<4>
input INMODEREG : bv<32>
input DREG : bv<32>
input CREG : bv<32>
input CARRYINSELREG : bv<32>
input CARRYINREG : bv<32>
input B_INPUT : bv<5>
input BREG : bv<32>
input BMULTSEL : bv<5>
input BCASCREG : bv<32>
input A_INPUT : bv<5>
input AUTORESET_PRIORITY : bv<5>
input AUTORESET_PATDET : bv<5>
input AREG : bv<32>
input AMULTSEL : bv<5>
input ALUMODEREG : bv<32>
input ADREG : bv<32>
input ACASCREG : bv<32>
node %218 : bv<56> = zext(5'b1111, 51)
node B_INPUT_REG : bv<56> = concat(51'x0, B_INPUT)
node %219 : bv<1> = eq(B_INPUT_REG, %218)
node %220 : bv<32> = ite(%219, 32'x1, 32'x0)
node %222 : bv<56> = zext(5'b111, 51)
node %223 : bv<1> = eq(B_INPUT_REG, %222)
node %224 : bv<32> = ite(%223, 32'x0, %220)
node B_INPUT_BIN : bv<1> = %224[0]
node %226 : bv<32> = zext(B_INPUT_BIN, 31)
node %227 : bv<1> = eq(%226, 32'x1)
node _procmux_557 : bv<18> = ite(%227, BCIN, B)
node BREG_BIN : bv<2> = BREG[1:0]
node %232 : bv<1> = eq(BREG_BIN, 2'b0)
node %233 : bv<1> = not(%232)
node B2_DATA : bv<18> = ite(%233, B2_reg, _procmux_557)
output BCOUT : bv<18> = ite(eq(BCASCREG[1:0], BREG_BIN), B2_DATA, B1_DATA_out)
node A_INPUT_REG : bv<56> = concat(51'x0, A_INPUT)
node %236 : bv<1> = eq(A_INPUT_REG, %218)
node %237 : bv<32> = ite(%236, 32'x1, 32'x0)
node %238 : bv<1> = eq(A_INPUT_REG, %222)
node %239 : bv<32> = ite(%238, 32'x0, %237)
node A_INPUT_BIN : bv<1> = %239[0]
node %241 : bv<32> = zext(A_INPUT_BIN, 31)
node %242 : bv<1> = eq(%241, 32'x1)
node _procmux_576 : bv<30> = ite(%242, ACIN, A)
node AREG_BIN : bv<2> = AREG[1:0]
node %246 : bv<1> = eq(AREG_BIN, 2'b0)
node %247 : bv<1> = not(%246)
node A_ALU : bv<30> = ite(%247, A2_reg, _procmux_576)
output ACOUT : bv<30> = ite(eq(ACASCREG[1:0], AREG_BIN), A_ALU, A1_reg)
node CREG_BIN : bv<1> = CREG[0]
node %197 : bv<1> = eq(CREG_BIN, 1'b1)
node C_DATA_in : bv<48> = ite(%197, C_reg, C)
node OPMODE_in : bv<9> = xor(OPMODE, IS_OPMODE_INVERTED)
node OPMODEREG_BIN : bv<1> = OPMODEREG[0]
node %163 : bv<1> = eq(OPMODEREG_BIN, 1'b1)
node OPMODE_mux : bv<9> = ite(%163, OPMODE_reg, OPMODE_in)
node %459 : bv<2> = OPMODE_mux[3:2]
node _procmux_624_CMP0 : bv<1> = eq(%459, 2'b11)
node %1529 : bv<48> = ite(_procmux_624_CMP0, C_DATA_in, 48'x0)
node _procmux_625_CMP0 : bv<1> = eq(%459, 2'b10)
node %1530 : bv<48> = ite(_procmux_625_CMP0, 48'xffffffffffff, %1529)
node %314 : bv<27> = A_ALU[26:0]
node %316 : bv<27> = A1_reg[26:0]
node INMODE_in : bv<5> = xor(INMODE, IS_INMODE_INVERTED)
node INMODEREG_BIN : bv<1> = INMODEREG[0]
node %310 : bv<1> = eq(INMODEREG_BIN, 1'b1)
node INMODE_mux : bv<5> = ite(%310, INMODE_reg, INMODE_in)
node %317 : bv<1> = INMODE_mux[0]
node %318 : bv<1> = eq(%317, 1'b1)
node _procmux_462 : bv<27> = ite(%318, %316, %314)
node %331 : bv<1> = INMODE_mux[1]
node %322 : bv<8> = zext(5'b1, 3)
node PREADDINSEL_REG : bv<8> = concat(3'b0, PREADDINSEL)
node %323 : bv<1> = eq(PREADDINSEL_REG, %322)
node %324 : bv<32> = ite(%323, 32'x1, 32'x0)
node %325 : bv<8> = zext(5'b0, 3)
node %326 : bv<1> = eq(PREADDINSEL_REG, %325)
node %327 : bv<32> = ite(%326, 32'x0, %324)
node PREADDINSEL_BIN : bv<1> = %327[0]
node %329 : bv<32> = zext(PREADDINSEL_BIN, 31)
node %330 : bv<1> = eq(%329, 32'x0)
node %332 : bv<1> = and(%330, %331)
node _procmux_465 : bv<27> = ite(%332, 27'x0, _procmux_462)
node A2A1 : bv<27> = ite(%332, 27'x0, _procmux_465)
node %336 : bv<1> = INMODE_mux[4]
node %337 : bv<1> = eq(%336, 1'b1)
node _procmux_453 : bv<18> = ite(%337, B1_DATA_out, B2_DATA)
node %340 : bv<1> = eq(%329, 32'x1)
node %341 : bv<1> = and(%340, %331)
node _procmux_456 : bv<18> = ite(%341, 18'x0, _procmux_453)
node B2B1 : bv<18> = ite(%341, 18'x0, _procmux_456)
node %1450 : bv<1> = B2B1[17]
node %1451 : bv<19> = concat(%1450, B2B1)
node %1452 : bv<20> = concat(%1450, %1451)
node %1453 : bv<21> = concat(%1450, %1452)
node %1454 : bv<22> = concat(%1450, %1453)
node %1455 : bv<23> = concat(%1450, %1454)
node %1456 : bv<24> = concat(%1450, %1455)
node %1457 : bv<25> = concat(%1450, %1456)
node %1458 : bv<26> = concat(%1450, %1457)
node %1459 : bv<27> = concat(%1450, %1458)
node PREADD_AB : bv<27> = ite(%340, %1459, A2A1)
node DREG_BIN : bv<1> = DREG[0]
node %289 : bv<64> = zext(5'b10100, 59)
node USE_MULT_REG : bv<64> = concat(59'x0, USE_MULT)
node %290 : bv<1> = eq(USE_MULT_REG, %289)
node %291 : bv<32> = ite(%290, 32'x2, 32'x0)
node %293 : bv<64> = zext(5'b10010, 59)
node %294 : bv<1> = eq(USE_MULT_REG, %293)
node %295 : bv<32> = ite(%294, 32'x1, %291)
node %297 : bv<64> = zext(5'b1010, 59)
node %298 : bv<1> = eq(USE_MULT_REG, %297)
node %299 : bv<32> = ite(%298, 32'x0, %295)
node USE_MULT_BIN : bv<2> = %299[1:0]
node %301 : bv<32> = zext(USE_MULT_BIN, 30)
node %302 : bv<1> = eq(%301, 32'x2)
node %264 : bv<16> = zext(5'b10, 11)
node BMULTSEL_REG : bv<16> = concat(11'x0, BMULTSEL)
node %275 : bv<1> = eq(BMULTSEL_REG, %264)
node %276 : bv<32> = ite(%275, 32'x1, 32'x0)
node %278 : bv<16> = zext(5'b1, 11)
node %279 : bv<1> = eq(BMULTSEL_REG, %278)
node %280 : bv<32> = ite(%279, 32'x0, %276)
node BMULTSEL_BIN : bv<1> = %280[0]
node %282 : bv<32> = zext(BMULTSEL_BIN, 31)
node %283 : bv<1> = eq(%282, 32'x0)
node AMULTSEL_REG : bv<16> = concat(11'x0, AMULTSEL)
node %265 : bv<1> = eq(AMULTSEL_REG, %264)
node %266 : bv<32> = ite(%265, 32'x1, 32'x0)
node %268 : bv<16> = zext(5'b0, 11)
node %269 : bv<1> = eq(AMULTSEL_REG, %268)
node %270 : bv<32> = ite(%269, 32'x0, %266)
node AMULTSEL_BIN : bv<1> = %270[0]
node %272 : bv<32> = zext(AMULTSEL_BIN, 31)
node %273 : bv<1> = eq(%272, 32'x0)
node %284 : bv<1> = and(%273, %283)
node %303 : bv<1> = or(%284, %302)
node DREG_INT : bv<1> = ite(%303, 1'b0, DREG_BIN)
node %305 : bv<1> = eq(DREG_INT, 1'b1)
node D_DATA : bv<27> = ite(%305, D_DATA_reg, D)
node %312 : bv<1> = INMODE_mux[2]
node D_DATA_mux : bv<27> = ite(%312, D_DATA, 27'x0)
node %1461 : bv<27> = add(D_DATA_mux, PREADD_AB)
node %1462 : bv<27> = sub(D_DATA_mux, PREADD_AB)
node %358 : bv<1> = INMODE_mux[3]
node AD_in : bv<27> = ite(%358, %1462, %1461)
node ADREG_BIN : bv<1> = ADREG[0]
node ADREG_INT : bv<1> = ite(%303, 1'b0, ADREG_BIN)
node %363 : bv<1> = eq(ADREG_INT, 1'b1)
node AD_DATA : bv<27> = ite(%363, AD_DATA_reg, AD_in)
node %1465 : bv<18> = AD_DATA[17:0]
node b_mult_mux : bv<18> = ite(%283, B2B1, %1465)
node BMULT17_in : bv<1> = b_mult_mux[17]
node %1468 : bv<19> = concat(BMULT17_in, b_mult_mux)
node %1469 : bv<20> = concat(BMULT17_in, %1468)
node %1470 : bv<21> = concat(BMULT17_in, %1469)
node %1471 : bv<22> = concat(BMULT17_in, %1470)
node %1472 : bv<23> = concat(BMULT17_in, %1471)
node %1473 : bv<24> = concat(BMULT17_in, %1472)
node %1474 : bv<25> = concat(BMULT17_in, %1473)
node %1475 : bv<26> = concat(BMULT17_in, %1474)
node %1476 : bv<27> = concat(BMULT17_in, %1475)
node %1477 : bv<28> = concat(BMULT17_in, %1476)
node %1478 : bv<29> = concat(BMULT17_in, %1477)
node %1479 : bv<30> = concat(BMULT17_in, %1478)
node %1480 : bv<31> = concat(BMULT17_in, %1479)
node %1481 : bv<32> = concat(BMULT17_in, %1480)
node %1482 : bv<33> = concat(BMULT17_in, %1481)
node %1483 : bv<34> = concat(BMULT17_in, %1482)
node %1484 : bv<35> = concat(BMULT17_in, %1483)
node %1485 : bv<36> = concat(BMULT17_in, %1484)
node %1486 : bv<37> = concat(BMULT17_in, %1485)
node %1487 : bv<38> = concat(BMULT17_in, %1486)
node %1488 : bv<39> = concat(BMULT17_in, %1487)
node %1489 : bv<40> = concat(BMULT17_in, %1488)
node %1490 : bv<41> = concat(BMULT17_in, %1489)
node %1491 : bv<42> = concat(BMULT17_in, %1490)
node %1492 : bv<43> = concat(BMULT17_in, %1491)
node %1493 : bv<44> = concat(BMULT17_in, %1492)
node %1494 : bv<45> = concat(BMULT17_in, %1493)
node a_mult_mux : bv<27> = ite(%273, A2A1, AD_DATA)
node AMULT26_in : bv<1> = a_mult_mux[26]
node %1497 : bv<28> = concat(AMULT26_in, a_mult_mux)
node %1498 : bv<29> = concat(AMULT26_in, %1497)
node %1499 : bv<30> = concat(AMULT26_in, %1498)
node %1500 : bv<31> = concat(AMULT26_in, %1499)
node %1501 : bv<32> = concat(AMULT26_in, %1500)
node %1502 : bv<33> = concat(AMULT26_in, %1501)
node %1503 : bv<34> = concat(AMULT26_in, %1502)
node %1504 : bv<35> = concat(AMULT26_in, %1503)
node %1505 : bv<36> = concat(AMULT26_in, %1504)
node %1506 : bv<37> = concat(AMULT26_in, %1505)
node %1507 : bv<38> = concat(AMULT26_in, %1506)
node %1508 : bv<39> = concat(AMULT26_in, %1507)
node %1509 : bv<40> = concat(AMULT26_in, %1508)
node %1510 : bv<41> = concat(AMULT26_in, %1509)
node %1511 : bv<42> = concat(AMULT26_in, %1510)
node %1512 : bv<43> = concat(AMULT26_in, %1511)
node %1513 : bv<44> = concat(AMULT26_in, %1512)
node %1514 : bv<45> = concat(AMULT26_in, %1513)
node %1515 : bv<45> = mul(%1514, %1494)
node mult : bv<45> = ite(%302, 45'x0, %1515)
node %1517 : bv<44> = mult[43:0]
node %1531 : bv<44> = and(%1517, 44'xaaaaaaaaaaa)
node %1532 : bv<1> = mult[44]
node %1533 : bv<1> = not(%1532)
node V_in : bv<45> = concat(%1533, %1531)
node MREG_BIN : bv<1> = MREG[0]
node %424 : bv<1> = eq(MREG_BIN, 1'b1)
node V_DATA : bv<45> = ite(%424, V_DATA_reg, V_in)
node %429 : bv<48> = zext(5'b11001, 43)
node USE_SIMD_REG : bv<48> = concat(43'x0, USE_SIMD)
node %430 : bv<1> = eq(USE_SIMD_REG, %429)
node %431 : bv<32> = ite(%430, 32'x2, 32'x0)
node %433 : bv<48> = zext(5'b10011, 43)
node %434 : bv<1> = eq(USE_SIMD_REG, %433)
node %435 : bv<32> = ite(%434, 32'x1, %431)
node %437 : bv<48> = zext(5'b1100, 43)
node %438 : bv<1> = eq(USE_SIMD_REG, %437)
node %439 : bv<32> = ite(%438, 32'x0, %435)
node USE_SIMD_BIN : bv<2> = %439[1:0]
node %441 : bv<32> = zext(USE_SIMD_BIN, 30)
node %442 : bv<1> = eq(%441, 32'x0)
node V_DATA_in : bv<45> = ite(%442, V_DATA, 45'x100000000000)
node %1537 : bv<48> = concat(3'b0, V_DATA_in)
node _procmux_626_CMP0 : bv<1> = eq(%459, 2'b1)
node %1538 : bv<48> = ite(_procmux_626_CMP0, %1537, %1530)
node _procmux_627_CMP0 : bv<1> = eq(%459, 2'b0)
node ymux : bv<48> = ite(_procmux_627_CMP0, 48'x0, %1538)
node %249 : bv<48> = concat(A_ALU, B2_DATA)
node %250 : bv<2> = OPMODE_mux[1:0]
node _procmux_629_CMP0 : bv<1> = eq(%250, 2'b11)
node %1444 : bv<48> = ite(_procmux_629_CMP0, %249, 48'x0)
node _procmux_630_CMP0 : bv<1> = eq(%250, 2'b10)
node %1445 : bv<48> = ite(_procmux_630_CMP0, P_FDBK_in, %1444)
node %1518 : bv<44> = and(%1517, 44'x55555555555)
node U_in : bv<45> = concat(1'b1, %1518)
node U_DATA : bv<45> = ite(%424, U_DATA_reg, U_in)
node U_DATA_in : bv<45> = ite(%442, U_DATA, 45'x100000000000)
node %1522 : bv<1> = U_DATA_in[44]
node %1523 : bv<46> = concat(%1522, U_DATA_in)
node %1524 : bv<47> = concat(%1522, %1523)
node %1525 : bv<48> = concat(%1522, %1524)
node _procmux_631_CMP0 : bv<1> = eq(%250, 2'b1)
node %1526 : bv<48> = ite(_procmux_631_CMP0, %1525, %1445)
node %452 : bv<2> = concat(MULTSIGNIN, 1'b0)
node %453 : bv<48> = concat(46'x0, %452)
node %188 : bv<3> = OPMODE_mux[6:4]
node _procmux_618_CMP0 : bv<1> = eq(%188, 3'b100)
node x_mac_cascd : bv<48> = ite(_procmux_618_CMP0, %453, 48'x0)
node _procmux_632_CMP0 : bv<1> = eq(%250, 2'b0)
node xmux : bv<48> = ite(_procmux_632_CMP0, x_mac_cascd, %1526)
node %1098 : bv<31> = P_FDBK_in[47:17]
node P_FDBK_47_in : bv<1> = P_FDBK_in[47]
node %1100 : bv<32> = concat(P_FDBK_47_in, %1098)
node %1101 : bv<33> = concat(P_FDBK_47_in, %1100)
node %1102 : bv<34> = concat(P_FDBK_47_in, %1101)
node %1103 : bv<35> = concat(P_FDBK_47_in, %1102)
node %1104 : bv<36> = concat(P_FDBK_47_in, %1103)
node %1105 : bv<37> = concat(P_FDBK_47_in, %1104)
node %1106 : bv<38> = concat(P_FDBK_47_in, %1105)
node %1107 : bv<39> = concat(P_FDBK_47_in, %1106)
node %1108 : bv<40> = concat(P_FDBK_47_in, %1107)
node %1109 : bv<41> = concat(P_FDBK_47_in, %1108)
node %1110 : bv<42> = concat(P_FDBK_47_in, %1109)
node %1111 : bv<43> = concat(P_FDBK_47_in, %1110)
node %1112 : bv<44> = concat(P_FDBK_47_in, %1111)
node %1113 : bv<45> = concat(P_FDBK_47_in, %1112)
node %1114 : bv<46> = concat(P_FDBK_47_in, %1113)
node %1115 : bv<47> = concat(P_FDBK_47_in, %1114)
node %1116 : bv<48> = concat(P_FDBK_47_in, %1115)
node %165 : bv<2> = OPMODE_mux[6:5]
node _procmux_616_CMP0 : bv<1> = eq(%165, 2'b11)
node %1436 : bv<48> = ite(_procmux_616_CMP0, %1116, 48'x0)
node %169 : bv<31> = PCIN[47:17]
node %170 : bv<1> = PCIN[47]
node %171 : bv<32> = concat(%170, %169)
node %172 : bv<33> = concat(%170, %171)
node %173 : bv<34> = concat(%170, %172)
node %174 : bv<35> = concat(%170, %173)
node %175 : bv<36> = concat(%170, %174)
node %176 : bv<37> = concat(%170, %175)
node %177 : bv<38> = concat(%170, %176)
node %178 : bv<39> = concat(%170, %177)
node %179 : bv<40> = concat(%170, %178)
node %180 : bv<41> = concat(%170, %179)
node %181 : bv<42> = concat(%170, %180)
node %182 : bv<43> = concat(%170, %181)
node %183 : bv<44> = concat(%170, %182)
node %184 : bv<45> = concat(%170, %183)
node %185 : bv<46> = concat(%170, %184)
node %186 : bv<47> = concat(%170, %185)
node %187 : bv<48> = concat(%170, %186)
node _procmux_617_CMP0 : bv<1> = eq(%188, 3'b101)
node %1437 : bv<48> = ite(_procmux_617_CMP0, %187, %1436)
node %1438 : bv<48> = ite(_procmux_618_CMP0, P_FDBK_in, %1437)
node _procmux_619_CMP0 : bv<1> = eq(%188, 3'b11)
node %1439 : bv<48> = ite(_procmux_619_CMP0, C_DATA_in, %1438)
node _procmux_620_CMP0 : bv<1> = eq(%188, 3'b10)
node %1440 : bv<48> = ite(_procmux_620_CMP0, P_FDBK_in, %1439)
node _procmux_621_CMP0 : bv<1> = eq(%188, 3'b1)
node %1441 : bv<48> = ite(_procmux_621_CMP0, PCIN, %1440)
node _procmux_622_CMP0 : bv<1> = eq(%188, 3'b0)
node zmux : bv<48> = ite(_procmux_622_CMP0, 48'x0, %1441)
node ALUMODE_in : bv<4> = xor(ALUMODE, IS_ALUMODE_INVERTED)
node ALUMODEREG_BIN : bv<1> = ALUMODEREG[0]
node %89 : bv<1> = eq(ALUMODEREG_BIN, 1'b1)
node ALUMODE_DATA : bv<4> = ite(%89, ALUMODE_reg, ALUMODE_in)
node %91 : bv<1> = ALUMODE_DATA[0]
node %92 : bv<2> = concat(%91, %91)
node %93 : bv<3> = concat(%91, %92)
node %94 : bv<4> = concat(%91, %93)
node %95 : bv<5> = concat(%91, %94)
node %96 : bv<6> = concat(%91, %95)
node %97 : bv<7> = concat(%91, %96)
node %98 : bv<8> = concat(%91, %97)
node %99 : bv<9> = concat(%91, %98)
node %100 : bv<10> = concat(%91, %99)
node %101 : bv<11> = concat(%91, %100)
node %102 : bv<12> = concat(%91, %101)
node %103 : bv<13> = concat(%91, %102)
node %104 : bv<14> = concat(%91, %103)
node %105 : bv<15> = concat(%91, %104)
node %106 : bv<16> = concat(%91, %105)
node %107 : bv<17> = concat(%91, %106)
node %108 : bv<18> = concat(%91, %107)
node %109 : bv<19> = concat(%91, %108)
node %110 : bv<20> = concat(%91, %109)
node %111 : bv<21> = concat(%91, %110)
node %112 : bv<22> = concat(%91, %111)
node %113 : bv<23> = concat(%91, %112)
node %114 : bv<24> = concat(%91, %113)
node %115 : bv<25> = concat(%91, %114)
node %116 : bv<26> = concat(%91, %115)
node %117 : bv<27> = concat(%91, %116)
node %118 : bv<28> = concat(%91, %117)
node %119 : bv<29> = concat(%91, %118)
node %120 : bv<30> = concat(%91, %119)
node %121 : bv<31> = concat(%91, %120)
node %122 : bv<32> = concat(%91, %121)
node %123 : bv<33> = concat(%91, %122)
node %124 : bv<34> = concat(%91, %123)
node %125 : bv<35> = concat(%91, %124)
node %126 : bv<36> = concat(%91, %125)
node %127 : bv<37> = concat(%91, %126)
node %128 : bv<38> = concat(%91, %127)
node %129 : bv<39> = concat(%91, %128)
node %130 : bv<40> = concat(%91, %129)
node %131 : bv<41> = concat(%91, %130)
node %132 : bv<42> = concat(%91, %131)
node %133 : bv<43> = concat(%91, %132)
node %134 : bv<44> = concat(%91, %133)
node %135 : bv<45> = concat(%91, %134)
node %136 : bv<46> = concat(%91, %135)
node %137 : bv<47> = concat(%91, %136)
node %138 : bv<48> = concat(%91, %137)
node z_optinv : bv<48> = xor(%138, zmux)
node %1562 : bv<48> = xor(z_optinv, xmux)
node s : bv<48> = xor(%1562, ymux)
node %1689 : bv<6> = s[11:6]
node %1690 : bv<1> = %1689[5]
node %1691 : bv<1> = %1689[4]
node %1692 : bv<1> = %1689[3]
node %1693 : bv<1> = %1689[2]
node %1694 : bv<1> = %1689[1]
node %1695 : bv<1> = %1689[0]
node %1696 : bv<1> = xor(%1695, %1694)
node %1697 : bv<1> = xor(%1696, %1693)
node %1698 : bv<1> = xor(%1697, %1692)
node %1699 : bv<1> = xor(%1698, %1691)
node %1700 : bv<1> = xor(%1699, %1690)
node %1701 : bv<32> = concat(31'x0, %1700)
node %496 : bv<40> = zext(5'b11000, 35)
node USE_WIDEXOR_REG : bv<40> = concat(35'x0, USE_WIDEXOR)
node %497 : bv<1> = eq(USE_WIDEXOR_REG, %496)
node %498 : bv<32> = ite(%497, 32'x1, 32'x0)
node %500 : bv<40> = zext(5'b1101, 35)
node %501 : bv<1> = eq(USE_WIDEXOR_REG, %500)
node %502 : bv<32> = ite(%501, 32'x0, %498)
node USE_WIDEXOR_BIN : bv<1> = %502[0]
node %1702 : bv<32> = ite(USE_WIDEXOR_BIN, %1701, 32'x0)
node xor_12b : bv<1> = %1702[0]
node %1704 : bv<6> = s[5:0]
node %1705 : bv<1> = %1704[5]
node %1706 : bv<1> = %1704[4]
node %1707 : bv<1> = %1704[3]
node %1708 : bv<1> = %1704[2]
node %1709 : bv<1> = %1704[1]
node %1710 : bv<1> = %1704[0]
node %1711 : bv<1> = xor(%1710, %1709)
node %1712 : bv<1> = xor(%1711, %1708)
node %1713 : bv<1> = xor(%1712, %1707)
node %1714 : bv<1> = xor(%1713, %1706)
node %1715 : bv<1> = xor(%1714, %1705)
node %1716 : bv<32> = concat(31'x0, %1715)
node %1717 : bv<32> = ite(USE_WIDEXOR_BIN, %1716, 32'x0)
node xor_12a : bv<1> = %1717[0]
node xor_24a : bv<1> = xor(xor_12a, xor_12b)
node %525 : bv<88> = zext(5'b11010, 83)
node XORSIMD_REG : bv<88> = concat(83'x0, XORSIMD)
node %526 : bv<1> = eq(XORSIMD_REG, %525)
node %527 : bv<32> = ite(%526, 32'x1, 32'x0)
node %529 : bv<88> = zext(5'b1110, 83)
node %530 : bv<1> = eq(XORSIMD_REG, %529)
node %531 : bv<32> = ite(%530, 32'x0, %527)
node XORSIMD_BIN : bv<1> = %531[0]
node %1720 : bv<1> = ite(XORSIMD_BIN, xor_12a, xor_24a)
node %1721 : bv<6> = s[23:18]
node %1722 : bv<1> = %1721[5]
node %1723 : bv<1> = %1721[4]
node %1724 : bv<1> = %1721[3]
node %1725 : bv<1> = %1721[2]
node %1726 : bv<1> = %1721[1]
node %1727 : bv<1> = %1721[0]
node %1728 : bv<1> = xor(%1727, %1726)
node %1729 : bv<1> = xor(%1728, %1725)
node %1730 : bv<1> = xor(%1729, %1724)
node %1731 : bv<1> = xor(%1730, %1723)
node %1732 : bv<1> = xor(%1731, %1722)
node %1733 : bv<32> = concat(31'x0, %1732)
node %1734 : bv<32> = ite(USE_WIDEXOR_BIN, %1733, 32'x0)
node xor_12d : bv<1> = %1734[0]
node %1736 : bv<6> = s[17:12]
node %1737 : bv<1> = %1736[5]
node %1738 : bv<1> = %1736[4]
node %1739 : bv<1> = %1736[3]
node %1740 : bv<1> = %1736[2]
node %1741 : bv<1> = %1736[1]
node %1742 : bv<1> = %1736[0]
node %1743 : bv<1> = xor(%1742, %1741)
node %1744 : bv<1> = xor(%1743, %1740)
node %1745 : bv<1> = xor(%1744, %1739)
node %1746 : bv<1> = xor(%1745, %1738)
node %1747 : bv<1> = xor(%1746, %1737)
node %1748 : bv<32> = concat(31'x0, %1747)
node %1749 : bv<32> = ite(USE_WIDEXOR_BIN, %1748, 32'x0)
node xor_12c : bv<1> = %1749[0]
node xor_24b : bv<1> = xor(xor_12c, xor_12d)
node xor_48a : bv<1> = xor(xor_24a, xor_24b)
node %1753 : bv<1> = ite(XORSIMD_BIN, xor_12b, xor_48a)
node %1754 : bv<2> = concat(%1753, %1720)
node %1755 : bv<1> = ite(XORSIMD_BIN, xor_12c, xor_24b)
node %1756 : bv<3> = concat(%1755, %1754)
node %1757 : bv<6> = s[47:42]
node %1758 : bv<1> = %1757[5]
node %1759 : bv<1> = %1757[4]
node %1760 : bv<1> = %1757[3]
node %1761 : bv<1> = %1757[2]
node %1762 : bv<1> = %1757[1]
node %1763 : bv<1> = %1757[0]
node %1764 : bv<1> = xor(%1763, %1762)
node %1765 : bv<1> = xor(%1764, %1761)
node %1766 : bv<1> = xor(%1765, %1760)
node %1767 : bv<1> = xor(%1766, %1759)
node %1768 : bv<1> = xor(%1767, %1758)
node %1769 : bv<32> = concat(31'x0, %1768)
node %1770 : bv<32> = ite(USE_WIDEXOR_BIN, %1769, 32'x0)
node xor_12h : bv<1> = %1770[0]
node %1772 : bv<6> = s[41:36]
node %1773 : bv<1> = %1772[5]
node %1774 : bv<1> = %1772[4]
node %1775 : bv<1> = %1772[3]
node %1776 : bv<1> = %1772[2]
node %1777 : bv<1> = %1772[1]
node %1778 : bv<1> = %1772[0]
node %1779 : bv<1> = xor(%1778, %1777)
node %1780 : bv<1> = xor(%1779, %1776)
node %1781 : bv<1> = xor(%1780, %1775)
node %1782 : bv<1> = xor(%1781, %1774)
node %1783 : bv<1> = xor(%1782, %1773)
node %1784 : bv<32> = concat(31'x0, %1783)
node %1785 : bv<32> = ite(USE_WIDEXOR_BIN, %1784, 32'x0)
node xor_12g : bv<1> = %1785[0]
node xor_24d : bv<1> = xor(xor_12g, xor_12h)
node %1788 : bv<6> = s[35:30]
node %1789 : bv<1> = %1788[5]
node %1790 : bv<1> = %1788[4]
node %1791 : bv<1> = %1788[3]
node %1792 : bv<1> = %1788[2]
node %1793 : bv<1> = %1788[1]
node %1794 : bv<1> = %1788[0]
node %1795 : bv<1> = xor(%1794, %1793)
node %1796 : bv<1> = xor(%1795, %1792)
node %1797 : bv<1> = xor(%1796, %1791)
node %1798 : bv<1> = xor(%1797, %1790)
node %1799 : bv<1> = xor(%1798, %1789)
node %1800 : bv<32> = concat(31'x0, %1799)
node %1801 : bv<32> = ite(USE_WIDEXOR_BIN, %1800, 32'x0)
node xor_12f : bv<1> = %1801[0]
node %1803 : bv<6> = s[29:24]
node %1804 : bv<1> = %1803[5]
node %1805 : bv<1> = %1803[4]
node %1806 : bv<1> = %1803[3]
node %1807 : bv<1> = %1803[2]
node %1808 : bv<1> = %1803[1]
node %1809 : bv<1> = %1803[0]
node %1810 : bv<1> = xor(%1809, %1808)
node %1811 : bv<1> = xor(%1810, %1807)
node %1812 : bv<1> = xor(%1811, %1806)
node %1813 : bv<1> = xor(%1812, %1805)
node %1814 : bv<1> = xor(%1813, %1804)
node %1815 : bv<32> = concat(31'x0, %1814)
node %1816 : bv<32> = ite(USE_WIDEXOR_BIN, %1815, 32'x0)
node xor_12e : bv<1> = %1816[0]
node xor_24c : bv<1> = xor(xor_12e, xor_12f)
node xor_48b : bv<1> = xor(xor_24c, xor_24d)
node xor_96 : bv<1> = xor(xor_48a, xor_48b)
node %1821 : bv<1> = ite(XORSIMD_BIN, xor_12d, xor_96)
node %1822 : bv<4> = concat(%1821, %1756)
node %1823 : bv<1> = ite(XORSIMD_BIN, xor_12e, xor_24c)
node %1824 : bv<5> = concat(%1823, %1822)
node %1825 : bv<1> = ite(XORSIMD_BIN, xor_12f, xor_48b)
node %1826 : bv<6> = concat(%1825, %1824)
node %1827 : bv<1> = ite(XORSIMD_BIN, xor_12g, xor_24d)
node %1828 : bv<7> = concat(%1827, %1826)
node XOR_MX_in : bv<8> = concat(xor_12h, %1828)
node PREG_BIN : bv<1> = PREG[0]
node %645 : bv<1> = eq(PREG_BIN, 1'b1)
output XOROUT : bv<8> = ite(%645, XOR_MX_reg, XOR_MX_in)
node %853 : bv<46> = C_DATA_in[45:0]
node %854 : bv<46> = not(%853)
node %855 : bv<48> = concat(%854, 2'b0)
node %860 : bv<112> = zext(5'b10111, 107)
node SEL_MASK_REG : bv<112> = concat(107'x0, SEL_MASK)
node %861 : bv<1> = eq(SEL_MASK_REG, %860)
node %862 : bv<32> = ite(%861, 32'x3, 32'x0)
node %864 : bv<112> = zext(5'b10110, 107)
node %865 : bv<1> = eq(SEL_MASK_REG, %864)
node %866 : bv<32> = ite(%865, 32'x2, %862)
node %867 : bv<112> = zext(5'b10001, 107)
node %868 : bv<1> = eq(SEL_MASK_REG, %867)
node %869 : bv<32> = ite(%868, 32'x1, %866)
node %871 : bv<112> = zext(5'b1000, 107)
node %872 : bv<1> = eq(SEL_MASK_REG, %871)
node %873 : bv<32> = ite(%872, 32'x0, %869)
node SEL_MASK_BIN : bv<2> = %873[1:0]
node %875 : bv<32> = zext(SEL_MASK_BIN, 30)
node %876 : bv<1> = eq(%875, 32'x3)
node %877 : bv<48> = ite(%876, %855, MASK)
node %878 : bv<47> = C_DATA_in[46:0]
node %879 : bv<47> = not(%878)
node %880 : bv<48> = concat(%879, 1'b0)
node %881 : bv<1> = eq(%875, 32'x2)
node %882 : bv<48> = ite(%881, %880, %877)
node %883 : bv<1> = eq(%875, 32'x1)
node %884 : bv<48> = ite(%883, C_DATA_in, %882)
node %888 : bv<72> = zext(5'b10101, 67)
node USE_PATTERN_DETECT_REG : bv<72> = concat(67'x0, USE_PATTERN_DETECT)
node %889 : bv<1> = eq(USE_PATTERN_DETECT_REG, %888)
node %890 : bv<32> = ite(%889, 32'x1, 32'x0)
node %892 : bv<72> = zext(5'b1011, 67)
node %893 : bv<1> = eq(USE_PATTERN_DETECT_REG, %892)
node %894 : bv<32> = ite(%893, 32'x0, %890)
node USE_PATTERN_DETECT_BIN : bv<1> = %894[0]
node %896 : bv<32> = zext(USE_PATTERN_DETECT_BIN, 31)
node %897 : bv<1> = eq(%896, 32'x0)
node the_mask : bv<48> = ite(%897, 48'xffffffffffff, %884)
node %784 : bv<2> = OPMODE_mux[8:7]
node _procmux_634_CMP0 : bv<1> = eq(%784, 2'b11)
node %1432 : bv<48> = ite(_procmux_634_CMP0, C_DATA_in, 48'x0)
node _procmux_635_CMP0 : bv<1> = eq(%784, 2'b10)
node %1433 : bv<48> = ite(_procmux_635_CMP0, RND, %1432)
node _procmux_636_CMP0 : bv<1> = eq(%784, 2'b1)
node %1434 : bv<48> = ite(_procmux_636_CMP0, P_FDBK_in, %1433)
node _procmux_637_CMP0 : bv<1> = eq(%784, 2'b0)
node wmux : bv<48> = ite(_procmux_637_CMP0, 48'x0, %1434)
node %1528 : bv<48> = and(xmux, z_optinv)
node %1540 : bv<48> = and(z_optinv, ymux)
node %1541 : bv<48> = and(xmux, ymux)
node %1542 : bv<48> = or(%1541, %1540)
node co : bv<48> = or(%1542, %1528)
node %761 : bv<48> = zext(32'x0, 16)
node %752 : bv<1> = ALUMODE_DATA[2]
node comux : bv<48> = ite(%752, %761, co)
node %1545 : bv<11> = comux[10:0]
node %1546 : bv<12> = concat(%1545, 1'b0)
node %764 : bv<1> = eq(%441, 32'x1)
node %765 : bv<1> = not(%764)
node %1547 : bv<1> = comux[11]
node %1548 : bv<1> = and(%1547, %765)
node %1549 : bv<13> = concat(%1548, %1546)
node %1550 : bv<11> = comux[22:12]
node %1551 : bv<24> = concat(%1550, %1549)
node %1552 : bv<1> = comux[23]
node %1553 : bv<1> = and(%1552, %442)
node %1554 : bv<25> = concat(%1553, %1551)
node %1555 : bv<11> = comux[34:24]
node %1556 : bv<36> = concat(%1555, %1554)
node %1557 : bv<1> = comux[35]
node %1558 : bv<1> = and(%1557, %765)
node %1559 : bv<37> = concat(%1558, %1556)
node %1560 : bv<11> = comux[46:36]
node %1561 : bv<48> = concat(%1560, %1559)
node %751 : bv<1> = ALUMODE_DATA[3]
node smux : bv<48> = ite(%751, co, s)
node %1565 : bv<48> = xor(smux, %1561)
node smux_w : bv<48> = xor(%1565, wmux)
node %1567 : bv<12> = smux_w[11:0]
node %1568 : bv<13> = zext(%1567, 1)
node %1158 : bv<1> = not(P_FDBK_47_in)
node CARRYINSELREG_BIN : bv<1> = CARRYINSELREG[0]
node %712 : bv<1> = eq(CARRYINSELREG_BIN, 1'b1)
node CARRYINSEL_mux : bv<3> = ite(%712, CARRYINSEL_reg, CARRYINSEL)
node _procmux_584_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b111)
node %1569 : bv<1> = ite(_procmux_584_CMP0, %1158, 1'b0)
node %1570 : bv<1> = xor(AMULT26_in, BMULT17_in)
node c_mult : bv<1> = not(%1570)
node multcarryin_data : bv<1> = ite(%424, qmultcarryin, c_mult)
node %1573 : bv<1> = not(multcarryin_data)
node _procmux_585_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b110)
node %1574 : bv<1> = ite(_procmux_585_CMP0, %1573, %1569)
node _procmux_586_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b101)
node %1575 : bv<1> = ite(_procmux_586_CMP0, P_FDBK_47_in, %1574)
node %729 : bv<1> = COUT_reg[3]
node CCOUT_in : bv<1> = xor(ALUMODE10_reg, %729)
node %731 : bv<1> = not(CCOUT_in)
node _procmux_587_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b100)
node %1576 : bv<1> = ite(_procmux_587_CMP0, %731, %1575)
node %734 : bv<1> = not(%170)
node _procmux_588_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b11)
node %1577 : bv<1> = ite(_procmux_588_CMP0, %734, %1576)
node %737 : bv<1> = not(CARRYCASCIN)
node _procmux_589_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b10)
node %1578 : bv<1> = ite(_procmux_589_CMP0, %737, %1577)
node _procmux_590_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b1)
node %1579 : bv<1> = ite(_procmux_590_CMP0, %170, %1578)
node CARRYIN_in : bv<1> = xor(CARRYIN, IS_CARRYIN_INVERTED)
node CARRYINREG_BIN : bv<1> = CARRYINREG[0]
node %745 : bv<1> = eq(CARRYINREG_BIN, 1'b1)
node CARRYIN_mux : bv<1> = ite(%745, CARRYIN_reg, CARRYIN_in)
node %747 : bv<1> = not(CARRYIN_mux)
node _procmux_591_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b0)
node cin_b : bv<1> = ite(_procmux_591_CMP0, %747, %1579)
node %1581 : bv<1> = not(cin_b)
node %753 : bv<1> = or(%751, %752)
node cin : bv<1> = ite(%753, 1'b0, %1581)
node %1583 : bv<48> = and(smux, wmux)
node %1584 : bv<48> = and(wmux, %1561)
node %1585 : bv<48> = and(smux, %1561)
node %1586 : bv<48> = or(%1585, %1584)
node comux_w : bv<48> = or(%1586, %1583)
node %1588 : bv<11> = comux_w[10:0]
node %1589 : bv<12> = concat(%1588, cin)
node %1590 : bv<13> = zext(%1589, 1)
node s0 : bv<13> = add(%1590, %1568)
node %1632 : bv<12> = s0[11:0]
node %1592 : bv<1> = s0[12]
node intc1 : bv<1> = and(%765, %1592)
node %1594 : bv<13> = zext(intc1, 12)
node %1595 : bv<12> = smux_w[23:12]
node %1596 : bv<13> = zext(%1595, 1)
node %1597 : bv<1> = comux_w[11]
node co12_lsb : bv<1> = and(%765, %1597)
node %1599 : bv<11> = comux_w[22:12]
node %1600 : bv<12> = concat(%1599, co12_lsb)
node %1601 : bv<13> = concat(1'b0, %1600)
node %1602 : bv<13> = add(%1601, %1596)
node s1 : bv<13> = add(%1602, %1594)
node %1633 : bv<12> = s1[11:0]
node %1634 : bv<24> = concat(%1633, %1632)
node %1604 : bv<1> = s1[12]
node intc2 : bv<1> = and(%442, %1604)
node %1606 : bv<13> = zext(intc2, 12)
node %1607 : bv<12> = smux_w[35:24]
node %1608 : bv<13> = zext(%1607, 1)
node %1609 : bv<1> = comux_w[23]
node co24_lsb : bv<1> = and(%442, %1609)
node %1611 : bv<11> = comux_w[34:24]
node %1612 : bv<12> = concat(%1611, co24_lsb)
node %1613 : bv<13> = concat(1'b0, %1612)
node %1614 : bv<13> = add(%1613, %1608)
node s2 : bv<13> = add(%1614, %1606)
node %1635 : bv<12> = s2[11:0]
node %1636 : bv<36> = concat(%1635, %1634)
node %1616 : bv<1> = s2[12]
node intc3 : bv<1> = and(%765, %1616)
node %1618 : bv<14> = zext(intc3, 13)
node %1619 : bv<12> = smux_w[47:36]
node %1620 : bv<1> = comux[47]
node %1621 : bv<13> = concat(%1620, %1619)
node %1622 : bv<14> = concat(1'b0, %1621)
node %1623 : bv<1> = comux_w[35]
node co36_lsb : bv<1> = and(%765, %1623)
node %1625 : bv<12> = comux_w[47:36]
node %1626 : bv<13> = concat(%1625, co36_lsb)
node %1627 : bv<14> = concat(1'b0, %1626)
node %1628 : bv<14> = add(%1627, %1622)
node s3 : bv<14> = add(%1628, %1618)
node %1637 : bv<12> = s3[11:0]
node %1638 : bv<48> = concat(%1637, %1636)
node %660 : bv<1> = ALUMODE_DATA[1]
node %661 : bv<2> = concat(%660, %660)
node %662 : bv<3> = concat(%660, %661)
node %663 : bv<4> = concat(%660, %662)
node %664 : bv<5> = concat(%660, %663)
node %665 : bv<6> = concat(%660, %664)
node %666 : bv<7> = concat(%660, %665)
node %667 : bv<8> = concat(%660, %666)
node %668 : bv<9> = concat(%660, %667)
node %669 : bv<10> = concat(%660, %668)
node %670 : bv<11> = concat(%660, %669)
node %671 : bv<12> = concat(%660, %670)
node %672 : bv<13> = concat(%660, %671)
node %673 : bv<14> = concat(%660, %672)
node %674 : bv<15> = concat(%660, %673)
node %675 : bv<16> = concat(%660, %674)
node %676 : bv<17> = concat(%660, %675)
node %677 : bv<18> = concat(%660, %676)
node %678 : bv<19> = concat(%660, %677)
node %679 : bv<20> = concat(%660, %678)
node %680 : bv<21> = concat(%660, %679)
node %681 : bv<22> = concat(%660, %680)
node %682 : bv<23> = concat(%660, %681)
node %683 : bv<24> = concat(%660, %682)
node %684 : bv<25> = concat(%660, %683)
node %685 : bv<26> = concat(%660, %684)
node %686 : bv<27> = concat(%660, %685)
node %687 : bv<28> = concat(%660, %686)
node %688 : bv<29> = concat(%660, %687)
node %689 : bv<30> = concat(%660, %688)
node %690 : bv<31> = concat(%660, %689)
node %691 : bv<32> = concat(%660, %690)
node %692 : bv<33> = concat(%660, %691)
node %693 : bv<34> = concat(%660, %692)
node %694 : bv<35> = concat(%660, %693)
node %695 : bv<36> = concat(%660, %694)
node %696 : bv<37> = concat(%660, %695)
node %697 : bv<38> = concat(%660, %696)
node %698 : bv<39> = concat(%660, %697)
node %699 : bv<40> = concat(%660, %698)
node %700 : bv<41> = concat(%660, %699)
node %701 : bv<42> = concat(%660, %700)
node %702 : bv<43> = concat(%660, %701)
node %703 : bv<44> = concat(%660, %702)
node %704 : bv<45> = concat(%660, %703)
node %705 : bv<46> = concat(%660, %704)
node %706 : bv<47> = concat(%660, %705)
node %707 : bv<48> = concat(%660, %706)
node ALU_OUT_in : bv<48> = xor(%707, %1638)
node %649 : bv<56> = zext(5'b10001, 51)
node SEL_PATTERN_REG : bv<56> = concat(51'x0, SEL_PATTERN)
node %650 : bv<1> = eq(SEL_PATTERN_REG, %649)
node %651 : bv<32> = ite(%650, 32'x1, 32'x0)
node %653 : bv<56> = zext(5'b1001, 51)
node %654 : bv<1> = eq(SEL_PATTERN_REG, %653)
node %655 : bv<32> = ite(%654, 32'x0, %651)
node SEL_PATTERN_BIN : bv<1> = %655[0]
node %657 : bv<32> = zext(SEL_PATTERN_BIN, 31)
node %658 : bv<1> = eq(%657, 32'x0)
node the_pattern : bv<48> = ite(%658, PATTERN, C_DATA_in)
node %1640 : bv<48> = xor(the_pattern, ALU_OUT_in)
node %1656 : bv<48> = or(%1640, the_mask)
node pdetb_o : bv<1> = eq(%1656, 48'xffffffffffff)
node pdetb_o_mux : bv<1> = ite(%645, pdetb_o_reg1, pdetb_o)
node %1641 : bv<48> = not(%1640)
node %1642 : bv<48> = or(%1641, the_mask)
node pdet_o : bv<1> = eq(%1642, 48'xffffffffffff)
node pdet_o_mux : bv<1> = ite(%645, pdet_o_reg1, pdet_o)
node %1645 : bv<1> = not(pdet_o_mux)
node %1844 : bv<1> = and(%1645, not(pdetb_o_mux))
node %913 : bv<1> = eq(%896, 32'x1)
output UNDERFLOW : bv<1> = ite(%913, and(%1844, ite(%645, pdetb_o_reg2, pdetb_o)), 1'b0)
output PCOUT : bv<48> = ite(%645, P_FDBK_in, ALU_OUT_in)
output PATTERNDETECT : bv<1> = ite(1'b1, pdet_o_mux, 1'b0)
output PATTERNBDETECT : bv<1> = ite(1'b1, pdetb_o_mux, 1'b0)
node overflow_data : bv<1> = ite(%645, pdet_o_reg2, pdet_o)
output OVERFLOW : bv<1> = ite(%913, and(%1844, overflow_data), 1'b0)
node MULTSIGN_ALU_in : bv<1> = s3[13]
output MULTSIGNOUT : bv<1> = ite(%645, MULTSIGN_ALU_reg, MULTSIGN_ALU_in)
node %1662 : bv<1> = xor(%1597, %1592)
node %1663 : bv<1> = xor(%1662, %1547)
node ALUMODE10_in : bv<1> = and(%91, %660)
node cout0 : bv<1> = xor(ALUMODE10_in, %1663)
node %932 : bv<2> = ALUMODE_DATA[3:2]
node %933 : bv<1> = eq(%932, 2'b0)
node %934 : bv<1> = not(%933)
node %929 : bv<4> = OPMODE_mux[3:0]
node %931 : bv<1> = eq(%929, 4'b101)
node mult_or_logic : bv<1> = or(%931, %934)
node cout_0 : bv<1> = ite(mult_or_logic, 1'b0, cout0)
node %1666 : bv<1> = ite(%764, cout_0, 1'b0)
node %1667 : bv<1> = xor(%1609, %1604)
node %1668 : bv<1> = xor(%1667, %1552)
node cout1 : bv<1> = xor(ALUMODE10_in, %1668)
node cout_1 : bv<1> = ite(mult_or_logic, 1'b0, cout1)
node %942 : bv<1> = not(%442)
node %1671 : bv<1> = ite(%942, cout_1, 1'b0)
node %1672 : bv<2> = concat(%1671, %1666)
node %1673 : bv<1> = xor(%1623, %1616)
node %1674 : bv<1> = xor(%1673, %1557)
node cout2 : bv<1> = xor(ALUMODE10_in, %1674)
node cout_2 : bv<1> = ite(mult_or_logic, 1'b0, cout2)
node %1677 : bv<1> = ite(%764, cout_2, 1'b0)
node %1678 : bv<3> = concat(%1677, %1672)
node %1679 : bv<1> = s3[12]
node cout3 : bv<1> = xor(ALUMODE10_in, %1679)
node COUT_in : bv<4> = concat(cout3, %1678)
output CARRYOUT : bv<4> = ite(%645, COUT_reg, COUT_in)
output CARRYCASCOUT : bv<1> = ite(%645, CCOUT_in, xor(ALUMODE10_in, cout3))
node %1032 : bv<1> = and(CEP, PREG_BIN)
node AUTORESET_PRIORITY_REG : bv<40> = concat(35'x0, AUTORESET_PRIORITY)
node auto_reset_pri : bv<1> = or(eq(zext(ite(eq(AUTORESET_PRIORITY_REG, zext(5'b110, 35)), 32'x0, ite(eq(AUTORESET_PRIORITY_REG, zext(5'b10000, 35)), 32'x1, 32'x0))[0], 31), 32'x0), CEP)
node AUTORESET_PATDET_REG : bv<120> = concat(115'x0, AUTORESET_PATDET)
node %994 : bv<32> = zext(ite(eq(AUTORESET_PATDET_REG, zext(5'b11, 115)), 32'x0, ite(eq(AUTORESET_PATDET_REG, zext(5'b100, 115)), 32'x1, ite(eq(AUTORESET_PATDET_REG, zext(5'b101, 115)), 32'x2, 32'x0)))[1:0], 30)
node %1652 : bv<1> = or(xor(RSTP, IS_RSTP_INVERTED), ite(eq(%994, 32'x1), and(auto_reset_pri, pdet_o_mux), ite(eq(%994, 32'x2), and(and(auto_reset_pri, overflow_data), %1645), 1'b0)))
node RSTCTRL_in : bv<1> = xor(RSTCTRL, IS_RSTCTRL_INVERTED)
node RSTB_in : bv<1> = xor(RSTB, IS_RSTB_INVERTED)
node %1051 : bv<1> = or(xor(RSTA, IS_RSTA_INVERTED), %246)
node RSTD_in : bv<1> = xor(RSTD, IS_RSTD_INVERTED)
node %1070 : bv<1> = or(xor(RSTM, IS_RSTM_INVERTED), eq(MREG_BIN, 1'b0))
node RSTALLCARRYIN_in : bv<1> = xor(RSTALLCARRYIN, IS_RSTALLCARRYIN_INVERTED)
state ALUMODE_reg : bv<4>
  [next] ite(xor(RSTALUMODE, IS_RSTALUMODE_INVERTED), 4'b0, ite(CEALUMODE, ALUMODE_in, ALUMODE_reg))
state P_FDBK_in : bv<48>
  [next] ite(%1652, 48'x0, ite(%1032, ALU_OUT_in, P_FDBK_in))
state OPMODE_reg : bv<9>
  [next] ite(RSTCTRL_in, 9'x0, ite(CECTRL, OPMODE_in, OPMODE_reg))
state C_reg : bv<48>
  [next] ite(or(xor(RSTC, IS_RSTC_INVERTED), eq(CREG_BIN, 1'b0)), 48'x0, ite(CEC, C, C_reg))
state B2_reg : bv<18>
  [next] ite(RSTB_in, 18'x0, ite(CEB2, ite(eq(BREG_BIN, 2'b10), B1_DATA_out, _procmux_557), B2_reg))
state A2_reg : bv<30>
  [next] ite(%1051, 30'x0, ite(CEA2, ite(eq(AREG_BIN, 2'b10), A1_reg, _procmux_576), A2_reg))
state D_DATA_reg : bv<27>
  [next] ite(or(RSTD_in, eq(DREG_INT, 1'b0)), 27'x0, ite(CED, D, D_DATA_reg))
state INMODE_reg : bv<5>
  [next] ite(or(xor(RSTINMODE, IS_RSTINMODE_INVERTED), eq(INMODEREG_BIN, 1'b0)), 5'b0, ite(CEINMODE, INMODE_in, INMODE_reg))
state A1_reg : bv<30>
  [next] ite(%1051, 30'x0, ite(CEA1, _procmux_576, A1_reg))
state B1_DATA_out : bv<18>
  [next] ite(or(RSTB_in, %232), 18'x0, ite(CEB1, _procmux_557, B1_DATA_out))
state AD_DATA_reg : bv<27>
  [next] ite(RSTD_in, 27'x0, ite(CEAD, AD_in, AD_DATA_reg))
state U_DATA_reg : bv<45>
  [next] ite(%1070, 45'x0, ite(CEM, U_in, U_DATA_reg))
state V_DATA_reg : bv<45>
  [next] ite(%1070, 45'x0, ite(CEM, V_in, V_DATA_reg))
state XOR_MX_reg : bv<8>
  [next] ite(%1652, 8'b0, ite(%1032, XOR_MX_in, XOR_MX_reg))
state CARRYINSEL_reg : bv<3>
  [next] ite(RSTCTRL_in, 3'b0, ite(CECTRL, CARRYINSEL, CARRYINSEL_reg))
state qmultcarryin : bv<1>
  [next] ite(RSTALLCARRYIN_in, 32'x0, zext(ite(CEM, c_mult, qmultcarryin), 31))[0]
state ALUMODE10_reg : bv<1>
  [next] ite(%1652, 1'b0, ite(%1032, ALUMODE10_in, ALUMODE10_reg))
state COUT_reg : bv<4>
  [next] ite(%1652, 4'b0, ite(%1032, COUT_in, COUT_reg))
state CARRYIN_reg : bv<1>
  [next] ite(RSTALLCARRYIN_in, 1'b0, ite(CECARRYIN, CARRYIN_in, CARRYIN_reg))
state pdet_o_reg1 : bv<1>
  [next] ite(%1652, 1'b0, ite(%1032, pdet_o, pdet_o_reg1))
state pdetb_o_reg1 : bv<1>
  [next] ite(%1652, 1'b0, ite(%1032, pdetb_o, pdetb_o_reg1))
state pdetb_o_reg2 : bv<1>
  [next] ite(%1652, 1'b0, ite(%1032, pdetb_o_reg1, pdetb_o_reg2))
state pdet_o_reg2 : bv<1>
  [next] ite(%1652, 1'b0, ite(%1032, pdet_o_reg1, pdet_o_reg2))
state MULTSIGN_ALU_reg : bv<1>
  [next] ite(%1652, 1'b0, ite(%1032, MULTSIGN_ALU_in, MULTSIGN_ALU_reg))

