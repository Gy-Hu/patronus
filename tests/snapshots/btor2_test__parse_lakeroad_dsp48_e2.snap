---
source: tests/btor2_test.rs
expression: sys.serialize_to_str(&ctx)
---
DSP48E2
input RSTP : bv<1>
input RSTM : bv<1>
input RSTINMODE : bv<1>
input RSTD : bv<1>
input RSTCTRL : bv<1>
input RSTC : bv<1>
input RSTB : bv<1>
input RSTALUMODE : bv<1>
input RSTALLCARRYIN : bv<1>
input RSTA : bv<1>
input PCIN : bv<48>
input OPMODE : bv<9>
input MULTSIGNIN : bv<1>
input INMODE : bv<5>
input D : bv<27>
input CLK : bv<1>
input CEP : bv<1>
input CEM : bv<1>
input CEINMODE : bv<1>
input CED : bv<1>
input CECTRL : bv<1>
input CECARRYIN : bv<1>
input CEC : bv<1>
input CEB2 : bv<1>
input CEB1 : bv<1>
input CEALUMODE : bv<1>
input CEAD : bv<1>
input CEA2 : bv<1>
input CEA1 : bv<1>
input CARRYINSEL : bv<3>
input CARRYIN : bv<1>
input CARRYCASCIN : bv<1>
input C : bv<48>
input BCIN : bv<18>
input B : bv<18>
input ALUMODE : bv<4>
input ACIN : bv<30>
input A : bv<30>
input XORSIMD : bv<5>
input USE_WIDEXOR : bv<5>
input USE_SIMD : bv<5>
input USE_PATTERN_DETECT : bv<5>
input USE_MULT : bv<5>
input SEL_PATTERN : bv<5>
input SEL_MASK : bv<5>
input RND : bv<48>
input PREG : bv<32>
input PREADDINSEL : bv<5>
input PATTERN : bv<48>
input OPMODEREG : bv<32>
input MREG : bv<32>
input MASK : bv<48>
input IS_RSTP_INVERTED : bv<1>
input IS_RSTM_INVERTED : bv<1>
input IS_RSTINMODE_INVERTED : bv<1>
input IS_RSTD_INVERTED : bv<1>
input IS_RSTC_INVERTED : bv<1>
input IS_RSTCTRL_INVERTED : bv<1>
input IS_RSTB_INVERTED : bv<1>
input IS_RSTA_INVERTED : bv<1>
input IS_RSTALUMODE_INVERTED : bv<1>
input IS_RSTALLCARRYIN_INVERTED : bv<1>
input IS_OPMODE_INVERTED : bv<9>
input IS_INMODE_INVERTED : bv<5>
input IS_CLK_INVERTED : bv<1>
input IS_CARRYIN_INVERTED : bv<1>
input IS_ALUMODE_INVERTED : bv<4>
input INMODEREG : bv<32>
input DREG : bv<32>
input CREG : bv<32>
input CARRYINSELREG : bv<32>
input CARRYINREG : bv<32>
input B_INPUT : bv<5>
input BREG : bv<32>
input BMULTSEL : bv<5>
input BCASCREG : bv<32>
input A_INPUT : bv<5>
input AUTORESET_PRIORITY : bv<5>
input AUTORESET_PATDET : bv<5>
input AREG : bv<32>
input AMULTSEL : bv<5>
input ALUMODEREG : bv<32>
input ADREG : bv<32>
input ACASCREG : bv<32>
node CREG_BIN : bv<1> = CREG[0]
node C_DATA_in : bv<48> = ite(CREG_BIN, C_reg, C)
node %7850 : bv<46> = C_DATA_in[45:0]
node %7851 : bv<46> = not(%7850)
node %7852 : bv<48> = concat(%7851, 2'b00)
node %7859 : bv<1> = eq(SEL_MASK, 5'b10111)
node %7860 : bv<32> = ite(%7859, 32'x00000003, 32'x00000000)
node %7867 : bv<1> = eq(SEL_MASK, 5'b10110)
node %7868 : bv<32> = ite(%7867, 32'x00000002, %7860)
node %7875 : bv<1> = eq(SEL_MASK, 5'b10001)
node %7876 : bv<32> = ite(%7875, 32'x00000001, %7868)
node %7883 : bv<1> = eq(SEL_MASK, 5'b01000)
node %7884 : bv<32> = ite(%7883, 32'x00000000, %7876)
node SEL_MASK_BIN : bv<2> = %7884[1:0]
node %7892 : bv<1> = eq(SEL_MASK_BIN, 2'b11)
node %7893 : bv<48> = ite(%7892, %7852, MASK)
node %7894 : bv<47> = C_DATA_in[46:0]
node %7895 : bv<47> = not(%7894)
node %7896 : bv<48> = concat(%7895, 1'b0)
node %7899 : bv<1> = eq(SEL_MASK_BIN, 2'b10)
node %7900 : bv<48> = ite(%7899, %7896, %7893)
node %7903 : bv<1> = eq(SEL_MASK_BIN, 2'b01)
node %7904 : bv<48> = ite(%7903, C_DATA_in, %7900)
node %7911 : bv<1> = eq(USE_PATTERN_DETECT, 5'b10101)
node %7912 : bv<32> = ite(%7911, 32'x00000001, 32'x00000000)
node %7919 : bv<1> = eq(USE_PATTERN_DETECT, 5'b01011)
node %7920 : bv<32> = ite(%7919, 32'x00000000, %7912)
node USE_PATTERN_DETECT_BIN : bv<1> = %7920[0]
node %7925 : bv<1> = not(USE_PATTERN_DETECT_BIN)
node the_mask : bv<48> = ite(%7925, 48'xffffffffffff, %7904)
node OPMODE_in : bv<9> = xor(OPMODE, IS_OPMODE_INVERTED)
node OPMODEREG_BIN : bv<1> = OPMODEREG[0]
node OPMODE_mux : bv<9> = ite(OPMODEREG_BIN, OPMODE_reg, OPMODE_in)
node %1858 : bv<2> = OPMODE_mux[8:7]
node _procmux_634_CMP0 : bv<1> = eq(%1858, 2'b11)
node %1860 : bv<48> = ite(_procmux_634_CMP0, C_DATA_in, 48'x000000000000)
node _procmux_635_CMP0 : bv<1> = eq(%1858, 2'b10)
node %1862 : bv<48> = ite(_procmux_635_CMP0, RND, %1860)
node _procmux_636_CMP0 : bv<1> = eq(%1858, 2'b01)
node %1864 : bv<48> = ite(_procmux_636_CMP0, P_FDBK_in, %1862)
node _procmux_637_CMP0 : bv<1> = eq(%1858, 2'b00)
node wmux : bv<48> = ite(_procmux_637_CMP0, 48'x000000000000, %1864)
node %1098 : bv<31> = P_FDBK_in[47:17]
node P_FDBK_47_in : bv<1> = P_FDBK_in[47]
node %1100 : bv<32> = concat(P_FDBK_47_in, %1098)
node %1101 : bv<33> = concat(P_FDBK_47_in, %1100)
node %1102 : bv<34> = concat(P_FDBK_47_in, %1101)
node %1103 : bv<35> = concat(P_FDBK_47_in, %1102)
node %1104 : bv<36> = concat(P_FDBK_47_in, %1103)
node %1105 : bv<37> = concat(P_FDBK_47_in, %1104)
node %1106 : bv<38> = concat(P_FDBK_47_in, %1105)
node %1107 : bv<39> = concat(P_FDBK_47_in, %1106)
node %1108 : bv<40> = concat(P_FDBK_47_in, %1107)
node %1109 : bv<41> = concat(P_FDBK_47_in, %1108)
node %1110 : bv<42> = concat(P_FDBK_47_in, %1109)
node %1111 : bv<43> = concat(P_FDBK_47_in, %1110)
node %1112 : bv<44> = concat(P_FDBK_47_in, %1111)
node %1113 : bv<45> = concat(P_FDBK_47_in, %1112)
node %1114 : bv<46> = concat(P_FDBK_47_in, %1113)
node %1115 : bv<47> = concat(P_FDBK_47_in, %1114)
node %1116 : bv<48> = concat(P_FDBK_47_in, %1115)
node %1867 : bv<2> = OPMODE_mux[6:5]
node _procmux_616_CMP0 : bv<1> = eq(%1867, 2'b11)
node %1869 : bv<48> = ite(_procmux_616_CMP0, %1116, 48'x000000000000)
node %170 : bv<31> = PCIN[47:17]
node %171 : bv<1> = PCIN[47]
node %172 : bv<32> = concat(%171, %170)
node %173 : bv<33> = concat(%171, %172)
node %174 : bv<34> = concat(%171, %173)
node %175 : bv<35> = concat(%171, %174)
node %176 : bv<36> = concat(%171, %175)
node %177 : bv<37> = concat(%171, %176)
node %178 : bv<38> = concat(%171, %177)
node %179 : bv<39> = concat(%171, %178)
node %180 : bv<40> = concat(%171, %179)
node %181 : bv<41> = concat(%171, %180)
node %182 : bv<42> = concat(%171, %181)
node %183 : bv<43> = concat(%171, %182)
node %184 : bv<44> = concat(%171, %183)
node %185 : bv<45> = concat(%171, %184)
node %186 : bv<46> = concat(%171, %185)
node %187 : bv<47> = concat(%171, %186)
node %188 : bv<48> = concat(%171, %187)
node %1870 : bv<3> = OPMODE_mux[6:4]
node _procmux_617_CMP0 : bv<1> = eq(%1870, 3'b101)
node %1872 : bv<48> = ite(_procmux_617_CMP0, %188, %1869)
node _procmux_618_CMP0 : bv<1> = eq(%1870, 3'b100)
node %1874 : bv<48> = ite(_procmux_618_CMP0, P_FDBK_in, %1872)
node _procmux_619_CMP0 : bv<1> = eq(%1870, 3'b011)
node %1876 : bv<48> = ite(_procmux_619_CMP0, C_DATA_in, %1874)
node _procmux_620_CMP0 : bv<1> = eq(%1870, 3'b010)
node %1878 : bv<48> = ite(_procmux_620_CMP0, P_FDBK_in, %1876)
node _procmux_621_CMP0 : bv<1> = eq(%1870, 3'b001)
node %1880 : bv<48> = ite(_procmux_621_CMP0, PCIN, %1878)
node _procmux_622_CMP0 : bv<1> = eq(%1870, 3'b000)
node zmux : bv<48> = ite(_procmux_622_CMP0, 48'x000000000000, %1880)
node ALUMODE_in : bv<4> = xor(ALUMODE, IS_ALUMODE_INVERTED)
node ALUMODEREG_BIN : bv<1> = ALUMODEREG[0]
node ALUMODE_DATA : bv<4> = ite(ALUMODEREG_BIN, ALUMODE_reg, ALUMODE_in)
node %1884 : bv<1> = ALUMODE_DATA[0]
node %1885 : bv<2> = concat(%1884, %1884)
node %1886 : bv<3> = concat(%1884, %1885)
node %1887 : bv<4> = concat(%1884, %1886)
node %1888 : bv<5> = concat(%1884, %1887)
node %1889 : bv<6> = concat(%1884, %1888)
node %1890 : bv<7> = concat(%1884, %1889)
node %1891 : bv<8> = concat(%1884, %1890)
node %1892 : bv<9> = concat(%1884, %1891)
node %1893 : bv<10> = concat(%1884, %1892)
node %1894 : bv<11> = concat(%1884, %1893)
node %1895 : bv<12> = concat(%1884, %1894)
node %1896 : bv<13> = concat(%1884, %1895)
node %1897 : bv<14> = concat(%1884, %1896)
node %1898 : bv<15> = concat(%1884, %1897)
node %1899 : bv<16> = concat(%1884, %1898)
node %1900 : bv<17> = concat(%1884, %1899)
node %1901 : bv<18> = concat(%1884, %1900)
node %1902 : bv<19> = concat(%1884, %1901)
node %1903 : bv<20> = concat(%1884, %1902)
node %1904 : bv<21> = concat(%1884, %1903)
node %1905 : bv<22> = concat(%1884, %1904)
node %1906 : bv<23> = concat(%1884, %1905)
node %1907 : bv<24> = concat(%1884, %1906)
node %1908 : bv<25> = concat(%1884, %1907)
node %1909 : bv<26> = concat(%1884, %1908)
node %1910 : bv<27> = concat(%1884, %1909)
node %1911 : bv<28> = concat(%1884, %1910)
node %1912 : bv<29> = concat(%1884, %1911)
node %1913 : bv<30> = concat(%1884, %1912)
node %1914 : bv<31> = concat(%1884, %1913)
node %1915 : bv<32> = concat(%1884, %1914)
node %1916 : bv<33> = concat(%1884, %1915)
node %1917 : bv<34> = concat(%1884, %1916)
node %1918 : bv<35> = concat(%1884, %1917)
node %1919 : bv<36> = concat(%1884, %1918)
node %1920 : bv<37> = concat(%1884, %1919)
node %1921 : bv<38> = concat(%1884, %1920)
node %1922 : bv<39> = concat(%1884, %1921)
node %1923 : bv<40> = concat(%1884, %1922)
node %1924 : bv<41> = concat(%1884, %1923)
node %1925 : bv<42> = concat(%1884, %1924)
node %1926 : bv<43> = concat(%1884, %1925)
node %1927 : bv<44> = concat(%1884, %1926)
node %1928 : bv<45> = concat(%1884, %1927)
node %1929 : bv<46> = concat(%1884, %1928)
node %1930 : bv<47> = concat(%1884, %1929)
node %1931 : bv<48> = concat(%1884, %1930)
node z_optinv : bv<48> = xor(%1931, zmux)
node %1939 : bv<1> = eq(B_INPUT, 5'b01111)
node %1940 : bv<32> = ite(%1939, 32'x00000001, 32'x00000000)
node %1947 : bv<1> = eq(B_INPUT, 5'b00111)
node %1948 : bv<32> = ite(%1947, 32'x00000000, %1940)
node B_INPUT_BIN : bv<1> = %1948[0]
node _procmux_557 : bv<18> = ite(B_INPUT_BIN, BCIN, B)
node BREG_BIN : bv<2> = BREG[1:0]
node %233 : bv<1> = eq(BREG_BIN, 2'b00)
node %234 : bv<1> = not(%233)
node B2_DATA : bv<18> = ite(%234, B2_reg, _procmux_557)
node %1960 : bv<1> = eq(A_INPUT, 5'b01111)
node %1961 : bv<32> = ite(%1960, 32'x00000001, 32'x00000000)
node %1964 : bv<1> = eq(A_INPUT, 5'b00111)
node %1965 : bv<32> = ite(%1964, 32'x00000000, %1961)
node A_INPUT_BIN : bv<1> = %1965[0]
node _procmux_576 : bv<30> = ite(A_INPUT_BIN, ACIN, A)
node AREG_BIN : bv<2> = AREG[1:0]
node %247 : bv<1> = eq(AREG_BIN, 2'b00)
node %248 : bv<1> = not(%247)
node A_ALU : bv<30> = ite(%248, A2_reg, _procmux_576)
node %1972 : bv<48> = concat(A_ALU, B2_DATA)
node %1973 : bv<2> = OPMODE_mux[1:0]
node _procmux_629_CMP0 : bv<1> = eq(%1973, 2'b11)
node %1975 : bv<48> = ite(_procmux_629_CMP0, %1972, 48'x000000000000)
node _procmux_630_CMP0 : bv<1> = eq(%1973, 2'b10)
node %1977 : bv<48> = ite(_procmux_630_CMP0, P_FDBK_in, %1975)
node %1978 : bv<27> = A_ALU[26:0]
node %316 : bv<27> = A1_reg[26:0]
node INMODE_in : bv<5> = xor(INMODE, IS_INMODE_INVERTED)
node INMODEREG_BIN : bv<1> = INMODEREG[0]
node INMODE_mux : bv<5> = ite(INMODEREG_BIN, INMODE_reg, INMODE_in)
node %1980 : bv<1> = INMODE_mux[0]
node _procmux_462 : bv<27> = ite(%1980, %316, %1978)
node %1982 : bv<1> = INMODE_mux[1]
node %1989 : bv<1> = eq(PREADDINSEL, 5'b00001)
node %1990 : bv<32> = ite(%1989, 32'x00000001, 32'x00000000)
node %1996 : bv<1> = eq(PREADDINSEL, 5'b00000)
node %1997 : bv<32> = ite(%1996, 32'x00000000, %1990)
node PREADDINSEL_BIN : bv<1> = %1997[0]
node %2005 : bv<1> = not(PREADDINSEL_BIN)
node %2006 : bv<1> = and(%2005, %1982)
node _procmux_465 : bv<27> = ite(%2006, 27'x0000000, _procmux_462)
node A2A1 : bv<27> = ite(%2006, 27'x0000000, _procmux_465)
node %2009 : bv<1> = INMODE_mux[4]
node _procmux_453 : bv<18> = ite(%2009, B1_DATA_out, B2_DATA)
node %2013 : bv<1> = and(PREADDINSEL_BIN, %1982)
node _procmux_456 : bv<18> = ite(%2013, 18'x00000, _procmux_453)
node B2B1 : bv<18> = ite(%2013, 18'x00000, _procmux_456)
node %2016 : bv<1> = B2B1[17]
node %2017 : bv<19> = concat(%2016, B2B1)
node %2018 : bv<20> = concat(%2016, %2017)
node %2019 : bv<21> = concat(%2016, %2018)
node %2020 : bv<22> = concat(%2016, %2019)
node %2021 : bv<23> = concat(%2016, %2020)
node %2022 : bv<24> = concat(%2016, %2021)
node %2023 : bv<25> = concat(%2016, %2022)
node %2024 : bv<26> = concat(%2016, %2023)
node %2025 : bv<27> = concat(%2016, %2024)
node PREADD_AB : bv<27> = ite(PREADDINSEL_BIN, %2025, A2A1)
node DREG_BIN : bv<1> = DREG[0]
node %2033 : bv<1> = eq(USE_MULT, 5'b10100)
node %2034 : bv<32> = ite(%2033, 32'x00000002, 32'x00000000)
node %2041 : bv<1> = eq(USE_MULT, 5'b10010)
node %2042 : bv<32> = ite(%2041, 32'x00000001, %2034)
node %2049 : bv<1> = eq(USE_MULT, 5'b01010)
node %2050 : bv<32> = ite(%2049, 32'x00000000, %2042)
node USE_MULT_BIN : bv<2> = %2050[1:0]
node %2058 : bv<1> = eq(USE_MULT_BIN, 2'b10)
node %2065 : bv<1> = eq(BMULTSEL, 5'b00010)
node %2066 : bv<32> = ite(%2065, 32'x00000001, 32'x00000000)
node %2073 : bv<1> = eq(BMULTSEL, 5'b00001)
node %2074 : bv<32> = ite(%2073, 32'x00000000, %2066)
node BMULTSEL_BIN : bv<1> = %2074[0]
node %2082 : bv<1> = eq(AMULTSEL, 5'b00010)
node %2083 : bv<32> = ite(%2082, 32'x00000001, 32'x00000000)
node %2090 : bv<1> = eq(AMULTSEL, 5'b00000)
node %2091 : bv<32> = ite(%2090, 32'x00000000, %2083)
node AMULTSEL_BIN : bv<1> = %2091[0]
node %2097 : bv<1> = or(AMULTSEL_BIN, BMULTSEL_BIN)
node %2098 : bv<1> = or(%2097, %2058)
node %2099 : bv<1> = not(%2098)
node DREG_INT : bv<1> = and(%2099, DREG_BIN)
node D_DATA : bv<27> = ite(DREG_INT, D_DATA_reg, D)
node %2102 : bv<1> = INMODE_mux[2]
node D_DATA_mux : bv<27> = ite(%2102, D_DATA, 27'x0000000)
node %2104 : bv<27> = add(D_DATA_mux, PREADD_AB)
node %2105 : bv<27> = sub(D_DATA_mux, PREADD_AB)
node %2106 : bv<1> = INMODE_mux[3]
node AD_in : bv<27> = ite(%2106, %2105, %2104)
node ADREG_BIN : bv<1> = ADREG[0]
node ADREG_INT : bv<1> = and(%2099, ADREG_BIN)
node AD_DATA : bv<27> = ite(ADREG_INT, AD_DATA_reg, AD_in)
node %2110 : bv<18> = AD_DATA[17:0]
node %2079 : bv<1> = not(BMULTSEL_BIN)
node b_mult_mux : bv<18> = ite(%2079, B2B1, %2110)
node BMULT17_in : bv<1> = b_mult_mux[17]
node %2113 : bv<19> = concat(BMULT17_in, b_mult_mux)
node %2114 : bv<20> = concat(BMULT17_in, %2113)
node %2115 : bv<21> = concat(BMULT17_in, %2114)
node %2116 : bv<22> = concat(BMULT17_in, %2115)
node %2117 : bv<23> = concat(BMULT17_in, %2116)
node %2118 : bv<24> = concat(BMULT17_in, %2117)
node %2119 : bv<25> = concat(BMULT17_in, %2118)
node %2120 : bv<26> = concat(BMULT17_in, %2119)
node %2121 : bv<27> = concat(BMULT17_in, %2120)
node %2122 : bv<28> = concat(BMULT17_in, %2121)
node %2123 : bv<29> = concat(BMULT17_in, %2122)
node %2124 : bv<30> = concat(BMULT17_in, %2123)
node %2125 : bv<31> = concat(BMULT17_in, %2124)
node %2126 : bv<32> = concat(BMULT17_in, %2125)
node %2127 : bv<33> = concat(BMULT17_in, %2126)
node %2128 : bv<34> = concat(BMULT17_in, %2127)
node %2129 : bv<35> = concat(BMULT17_in, %2128)
node %2130 : bv<36> = concat(BMULT17_in, %2129)
node %2131 : bv<37> = concat(BMULT17_in, %2130)
node %2132 : bv<38> = concat(BMULT17_in, %2131)
node %2133 : bv<39> = concat(BMULT17_in, %2132)
node %2134 : bv<40> = concat(BMULT17_in, %2133)
node %2135 : bv<41> = concat(BMULT17_in, %2134)
node %2136 : bv<42> = concat(BMULT17_in, %2135)
node %2137 : bv<43> = concat(BMULT17_in, %2136)
node %2138 : bv<44> = concat(BMULT17_in, %2137)
node %2139 : bv<45> = concat(BMULT17_in, %2138)
node %2096 : bv<1> = not(AMULTSEL_BIN)
node a_mult_mux : bv<27> = ite(%2096, A2A1, AD_DATA)
node AMULT26_in : bv<1> = a_mult_mux[26]
node %2142 : bv<28> = concat(AMULT26_in, a_mult_mux)
node %2143 : bv<29> = concat(AMULT26_in, %2142)
node %2144 : bv<30> = concat(AMULT26_in, %2143)
node %2145 : bv<31> = concat(AMULT26_in, %2144)
node %2146 : bv<32> = concat(AMULT26_in, %2145)
node %2147 : bv<33> = concat(AMULT26_in, %2146)
node %2148 : bv<34> = concat(AMULT26_in, %2147)
node %2149 : bv<35> = concat(AMULT26_in, %2148)
node %2150 : bv<36> = concat(AMULT26_in, %2149)
node %2151 : bv<37> = concat(AMULT26_in, %2150)
node %2152 : bv<38> = concat(AMULT26_in, %2151)
node %2153 : bv<39> = concat(AMULT26_in, %2152)
node %2154 : bv<40> = concat(AMULT26_in, %2153)
node %2155 : bv<41> = concat(AMULT26_in, %2154)
node %2156 : bv<42> = concat(AMULT26_in, %2155)
node %2157 : bv<43> = concat(AMULT26_in, %2156)
node %2158 : bv<44> = concat(AMULT26_in, %2157)
node %2159 : bv<45> = concat(AMULT26_in, %2158)
node %2160 : bv<45> = mul(%2159, %2139)
node mult : bv<45> = ite(%2058, 45'x000000000000, %2160)
node %2228 : bv<1> = mult[0]
node %4875 : bv<2> = concat(1'b0, %2228)
node %2229 : bv<1> = mult[2]
node %4876 : bv<3> = concat(%2229, %4875)
node %4877 : bv<4> = concat(1'b0, %4876)
node %2230 : bv<1> = mult[4]
node %4878 : bv<5> = concat(%2230, %4877)
node %4879 : bv<6> = concat(1'b0, %4878)
node %2231 : bv<1> = mult[6]
node %4880 : bv<7> = concat(%2231, %4879)
node %4881 : bv<8> = concat(1'b0, %4880)
node %2232 : bv<1> = mult[8]
node %4882 : bv<9> = concat(%2232, %4881)
node %4883 : bv<10> = concat(1'b0, %4882)
node %2233 : bv<1> = mult[10]
node %4884 : bv<11> = concat(%2233, %4883)
node %4885 : bv<12> = concat(1'b0, %4884)
node %2234 : bv<1> = mult[12]
node %4886 : bv<13> = concat(%2234, %4885)
node %4887 : bv<14> = concat(1'b0, %4886)
node %2235 : bv<1> = mult[14]
node %4888 : bv<15> = concat(%2235, %4887)
node %4889 : bv<16> = concat(1'b0, %4888)
node %2236 : bv<1> = mult[16]
node %4890 : bv<17> = concat(%2236, %4889)
node %4891 : bv<18> = concat(1'b0, %4890)
node %2237 : bv<1> = mult[18]
node %4892 : bv<19> = concat(%2237, %4891)
node %4893 : bv<20> = concat(1'b0, %4892)
node %2238 : bv<1> = mult[20]
node %4894 : bv<21> = concat(%2238, %4893)
node %4895 : bv<22> = concat(1'b0, %4894)
node %2239 : bv<1> = mult[22]
node %4896 : bv<23> = concat(%2239, %4895)
node %4897 : bv<24> = concat(1'b0, %4896)
node %2240 : bv<1> = mult[24]
node %4898 : bv<25> = concat(%2240, %4897)
node %4899 : bv<26> = concat(1'b0, %4898)
node %2241 : bv<1> = mult[26]
node %4900 : bv<27> = concat(%2241, %4899)
node %4901 : bv<28> = concat(1'b0, %4900)
node %2242 : bv<1> = mult[28]
node %4902 : bv<29> = concat(%2242, %4901)
node %4903 : bv<30> = concat(1'b0, %4902)
node %2243 : bv<1> = mult[30]
node %4904 : bv<31> = concat(%2243, %4903)
node %4905 : bv<32> = concat(1'b0, %4904)
node %2244 : bv<1> = mult[32]
node %4906 : bv<33> = concat(%2244, %4905)
node %4907 : bv<34> = concat(1'b0, %4906)
node %2245 : bv<1> = mult[34]
node %4908 : bv<35> = concat(%2245, %4907)
node %4909 : bv<36> = concat(1'b0, %4908)
node %2246 : bv<1> = mult[36]
node %4910 : bv<37> = concat(%2246, %4909)
node %4911 : bv<38> = concat(1'b0, %4910)
node %2247 : bv<1> = mult[38]
node %4912 : bv<39> = concat(%2247, %4911)
node %4913 : bv<40> = concat(1'b0, %4912)
node %2248 : bv<1> = mult[40]
node %4914 : bv<41> = concat(%2248, %4913)
node %4915 : bv<42> = concat(1'b0, %4914)
node %2249 : bv<1> = mult[42]
node %4916 : bv<43> = concat(%2249, %4915)
node U_in : bv<45> = concat(2'b10, %4916)
node MREG_BIN : bv<1> = MREG[0]
node U_DATA : bv<45> = ite(MREG_BIN, U_DATA_reg, U_in)
node %4926 : bv<1> = eq(USE_SIMD, 5'b11001)
node %4927 : bv<32> = ite(%4926, 32'x00000002, 32'x00000000)
node %4934 : bv<1> = eq(USE_SIMD, 5'b10011)
node %4935 : bv<32> = ite(%4934, 32'x00000001, %4927)
node %4942 : bv<1> = eq(USE_SIMD, 5'b01100)
node %4943 : bv<32> = ite(%4942, 32'x00000000, %4935)
node USE_SIMD_BIN : bv<2> = %4943[1:0]
node %4951 : bv<1> = eq(USE_SIMD_BIN, 2'b00)
node U_DATA_in : bv<45> = ite(%4951, U_DATA, 45'x100000000000)
node %4953 : bv<1> = U_DATA_in[44]
node %4954 : bv<46> = concat(%4953, U_DATA_in)
node %4955 : bv<47> = concat(%4953, %4954)
node %4956 : bv<48> = concat(%4953, %4955)
node _procmux_631_CMP0 : bv<1> = eq(%1973, 2'b01)
node %4958 : bv<48> = ite(_procmux_631_CMP0, %4956, %1977)
node %452 : bv<2> = concat(MULTSIGNIN, 1'b0)
node %453 : bv<48> = concat(46'x000000000000, %452)
node x_mac_cascd : bv<48> = ite(_procmux_618_CMP0, %453, 48'x000000000000)
node _procmux_632_CMP0 : bv<1> = eq(%1973, 2'b00)
node xmux : bv<48> = ite(_procmux_632_CMP0, x_mac_cascd, %4958)
node %4962 : bv<48> = and(xmux, z_optinv)
node %4963 : bv<2> = OPMODE_mux[3:2]
node _procmux_624_CMP0 : bv<1> = eq(%4963, 2'b11)
node %4965 : bv<48> = ite(_procmux_624_CMP0, C_DATA_in, 48'x000000000000)
node _procmux_625_CMP0 : bv<1> = eq(%4963, 2'b10)
node %4967 : bv<48> = ite(_procmux_625_CMP0, 48'xffffffffffff, %4965)
node %5033 : bv<1> = mult[1]
node %7680 : bv<2> = concat(%5033, 1'b0)
node %7681 : bv<3> = concat(1'b0, %7680)
node %5034 : bv<1> = mult[3]
node %7682 : bv<4> = concat(%5034, %7681)
node %7683 : bv<5> = concat(1'b0, %7682)
node %5035 : bv<1> = mult[5]
node %7684 : bv<6> = concat(%5035, %7683)
node %7685 : bv<7> = concat(1'b0, %7684)
node %5036 : bv<1> = mult[7]
node %7686 : bv<8> = concat(%5036, %7685)
node %7687 : bv<9> = concat(1'b0, %7686)
node %5037 : bv<1> = mult[9]
node %7688 : bv<10> = concat(%5037, %7687)
node %7689 : bv<11> = concat(1'b0, %7688)
node %5038 : bv<1> = mult[11]
node %7690 : bv<12> = concat(%5038, %7689)
node %7691 : bv<13> = concat(1'b0, %7690)
node %5039 : bv<1> = mult[13]
node %7692 : bv<14> = concat(%5039, %7691)
node %7693 : bv<15> = concat(1'b0, %7692)
node %5040 : bv<1> = mult[15]
node %7694 : bv<16> = concat(%5040, %7693)
node %7695 : bv<17> = concat(1'b0, %7694)
node %5041 : bv<1> = mult[17]
node %7696 : bv<18> = concat(%5041, %7695)
node %7697 : bv<19> = concat(1'b0, %7696)
node %5042 : bv<1> = mult[19]
node %7698 : bv<20> = concat(%5042, %7697)
node %7699 : bv<21> = concat(1'b0, %7698)
node %5043 : bv<1> = mult[21]
node %7700 : bv<22> = concat(%5043, %7699)
node %7701 : bv<23> = concat(1'b0, %7700)
node %5044 : bv<1> = mult[23]
node %7702 : bv<24> = concat(%5044, %7701)
node %7703 : bv<25> = concat(1'b0, %7702)
node %5045 : bv<1> = mult[25]
node %7704 : bv<26> = concat(%5045, %7703)
node %7705 : bv<27> = concat(1'b0, %7704)
node %5046 : bv<1> = mult[27]
node %7706 : bv<28> = concat(%5046, %7705)
node %7707 : bv<29> = concat(1'b0, %7706)
node %5047 : bv<1> = mult[29]
node %7708 : bv<30> = concat(%5047, %7707)
node %7709 : bv<31> = concat(1'b0, %7708)
node %5048 : bv<1> = mult[31]
node %7710 : bv<32> = concat(%5048, %7709)
node %7711 : bv<33> = concat(1'b0, %7710)
node %5049 : bv<1> = mult[33]
node %7712 : bv<34> = concat(%5049, %7711)
node %7713 : bv<35> = concat(1'b0, %7712)
node %5050 : bv<1> = mult[35]
node %7714 : bv<36> = concat(%5050, %7713)
node %7715 : bv<37> = concat(1'b0, %7714)
node %5051 : bv<1> = mult[37]
node %7716 : bv<38> = concat(%5051, %7715)
node %7717 : bv<39> = concat(1'b0, %7716)
node %5052 : bv<1> = mult[39]
node %7718 : bv<40> = concat(%5052, %7717)
node %7719 : bv<41> = concat(1'b0, %7718)
node %5053 : bv<1> = mult[41]
node %7720 : bv<42> = concat(%5053, %7719)
node %7721 : bv<43> = concat(1'b0, %7720)
node %5054 : bv<1> = mult[43]
node %7722 : bv<44> = concat(%5054, %7721)
node %7723 : bv<1> = mult[44]
node %7724 : bv<1> = not(%7723)
node V_in : bv<45> = concat(%7724, %7722)
node V_DATA : bv<45> = ite(MREG_BIN, V_DATA_reg, V_in)
node V_DATA_in : bv<45> = ite(%4951, V_DATA, 45'x100000000000)
node %7728 : bv<48> = concat(3'b000, V_DATA_in)
node _procmux_626_CMP0 : bv<1> = eq(%4963, 2'b01)
node %7730 : bv<48> = ite(_procmux_626_CMP0, %7728, %4967)
node _procmux_627_CMP0 : bv<1> = eq(%4963, 2'b00)
node ymux : bv<48> = ite(_procmux_627_CMP0, 48'x000000000000, %7730)
node %7733 : bv<48> = and(z_optinv, ymux)
node %7734 : bv<48> = and(xmux, ymux)
node %7735 : bv<48> = or(%7734, %7733)
node co : bv<48> = or(%7735, %4962)
node %7737 : bv<1> = ALUMODE_DATA[2]
node comux : bv<48> = ite(%7737, 48'x000000000000, co)
node %7739 : bv<11> = comux[10:0]
node %7740 : bv<12> = concat(%7739, 1'b0)
node %7746 : bv<1> = eq(USE_SIMD_BIN, 2'b01)
node %7747 : bv<1> = not(%7746)
node %7748 : bv<1> = comux[11]
node %7749 : bv<1> = and(%7748, %7747)
node %7750 : bv<13> = concat(%7749, %7740)
node %7751 : bv<11> = comux[22:12]
node %7752 : bv<24> = concat(%7751, %7750)
node %7753 : bv<1> = comux[23]
node %7754 : bv<1> = and(%7753, %4951)
node %7755 : bv<25> = concat(%7754, %7752)
node %7756 : bv<11> = comux[34:24]
node %7757 : bv<36> = concat(%7756, %7755)
node %7758 : bv<1> = comux[35]
node %7759 : bv<1> = and(%7758, %7747)
node %7760 : bv<37> = concat(%7759, %7757)
node %7761 : bv<11> = comux[46:36]
node %7762 : bv<48> = concat(%7761, %7760)
node %7763 : bv<48> = xor(z_optinv, xmux)
node s : bv<48> = xor(%7763, ymux)
node %7765 : bv<1> = ALUMODE_DATA[3]
node smux : bv<48> = ite(%7765, co, s)
node %7767 : bv<48> = xor(smux, %7762)
node smux_w : bv<48> = xor(%7767, wmux)
node %7769 : bv<12> = smux_w[11:0]
node %7770 : bv<13> = concat(1'b0, %7769)
node %1158 : bv<1> = not(P_FDBK_47_in)
node CARRYINSELREG_BIN : bv<1> = CARRYINSELREG[0]
node CARRYINSEL_mux : bv<3> = ite(CARRYINSELREG_BIN, CARRYINSEL_reg, CARRYINSEL)
node _procmux_584_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b111)
node %7773 : bv<1> = and(_procmux_584_CMP0, %1158)
node %7774 : bv<1> = xor(AMULT26_in, BMULT17_in)
node c_mult : bv<1> = not(%7774)
node multcarryin_data : bv<1> = ite(MREG_BIN, qmultcarryin, c_mult)
node %7777 : bv<1> = not(multcarryin_data)
node _procmux_585_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b110)
node %7779 : bv<1> = ite(_procmux_585_CMP0, %7777, %7773)
node _procmux_586_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b101)
node %7781 : bv<1> = ite(_procmux_586_CMP0, P_FDBK_47_in, %7779)
node %729 : bv<1> = COUT_reg[3]
node CCOUT_in : bv<1> = xor(ALUMODE10_reg, %729)
node %731 : bv<1> = not(CCOUT_in)
node _procmux_587_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b100)
node %7783 : bv<1> = ite(_procmux_587_CMP0, %731, %7781)
node %734 : bv<1> = not(%171)
node _procmux_588_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b011)
node %7785 : bv<1> = ite(_procmux_588_CMP0, %734, %7783)
node %737 : bv<1> = not(CARRYCASCIN)
node _procmux_589_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b010)
node %7787 : bv<1> = ite(_procmux_589_CMP0, %737, %7785)
node _procmux_590_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b001)
node %7789 : bv<1> = ite(_procmux_590_CMP0, %171, %7787)
node CARRYIN_in : bv<1> = xor(CARRYIN, IS_CARRYIN_INVERTED)
node CARRYINREG_BIN : bv<1> = CARRYINREG[0]
node CARRYIN_mux : bv<1> = ite(CARRYINREG_BIN, CARRYIN_reg, CARRYIN_in)
node %7791 : bv<1> = not(CARRYIN_mux)
node _procmux_591_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b000)
node cin_b : bv<1> = ite(_procmux_591_CMP0, %7791, %7789)
node %7795 : bv<1> = or(%7765, %7737)
node cin : bv<1> = or(%7795, cin_b)
node %7799 : bv<48> = and(smux, wmux)
node %7800 : bv<48> = and(wmux, %7762)
node %7801 : bv<48> = and(smux, %7762)
node %7802 : bv<48> = or(%7801, %7800)
node comux_w : bv<48> = or(%7802, %7799)
node %7804 : bv<11> = comux_w[10:0]
node %7805 : bv<12> = concat(%7804, cin)
node %7806 : bv<13> = concat(1'b0, %7805)
node s0 : bv<13> = add(%7806, %7770)
node %7927 : bv<12> = s0[11:0]
node %7808 : bv<1> = s0[12]
node intc1 : bv<1> = and(%7747, %7808)
node %7811 : bv<13> = concat(12'x000, intc1)
node %7812 : bv<12> = smux_w[23:12]
node %7813 : bv<13> = concat(1'b0, %7812)
node %7814 : bv<1> = comux_w[11]
node co12_lsb : bv<1> = and(%7747, %7814)
node %7816 : bv<11> = comux_w[22:12]
node %7817 : bv<12> = concat(%7816, co12_lsb)
node %7818 : bv<13> = concat(1'b0, %7817)
node %7819 : bv<13> = add(%7818, %7813)
node s1 : bv<13> = add(%7819, %7811)
node %7928 : bv<12> = s1[11:0]
node %7929 : bv<24> = concat(%7928, %7927)
node %7821 : bv<1> = s1[12]
node intc2 : bv<1> = and(%4951, %7821)
node %7823 : bv<13> = concat(12'x000, intc2)
node %7824 : bv<12> = smux_w[35:24]
node %7825 : bv<13> = concat(1'b0, %7824)
node %7826 : bv<1> = comux_w[23]
node co24_lsb : bv<1> = and(%4951, %7826)
node %7828 : bv<11> = comux_w[34:24]
node %7829 : bv<12> = concat(%7828, co24_lsb)
node %7830 : bv<13> = concat(1'b0, %7829)
node %7831 : bv<13> = add(%7830, %7825)
node s2 : bv<13> = add(%7831, %7823)
node %7930 : bv<12> = s2[11:0]
node %7931 : bv<36> = concat(%7930, %7929)
node %7833 : bv<1> = s2[12]
node intc3 : bv<1> = and(%7747, %7833)
node %7836 : bv<14> = concat(13'x0000, intc3)
node %7837 : bv<12> = smux_w[47:36]
node %7838 : bv<1> = comux[47]
node %7839 : bv<13> = concat(%7838, %7837)
node %7840 : bv<14> = concat(1'b0, %7839)
node %7841 : bv<1> = comux_w[35]
node co36_lsb : bv<1> = and(%7747, %7841)
node %7843 : bv<12> = comux_w[47:36]
node %7844 : bv<13> = concat(%7843, co36_lsb)
node %7845 : bv<14> = concat(1'b0, %7844)
node %7846 : bv<14> = add(%7845, %7840)
node s3 : bv<14> = add(%7846, %7836)
node %7932 : bv<12> = s3[11:0]
node %7933 : bv<48> = concat(%7932, %7931)
node %7934 : bv<1> = ALUMODE_DATA[1]
node %7935 : bv<2> = concat(%7934, %7934)
node %7936 : bv<3> = concat(%7934, %7935)
node %7937 : bv<4> = concat(%7934, %7936)
node %7938 : bv<5> = concat(%7934, %7937)
node %7939 : bv<6> = concat(%7934, %7938)
node %7940 : bv<7> = concat(%7934, %7939)
node %7941 : bv<8> = concat(%7934, %7940)
node %7942 : bv<9> = concat(%7934, %7941)
node %7943 : bv<10> = concat(%7934, %7942)
node %7944 : bv<11> = concat(%7934, %7943)
node %7945 : bv<12> = concat(%7934, %7944)
node %7946 : bv<13> = concat(%7934, %7945)
node %7947 : bv<14> = concat(%7934, %7946)
node %7948 : bv<15> = concat(%7934, %7947)
node %7949 : bv<16> = concat(%7934, %7948)
node %7950 : bv<17> = concat(%7934, %7949)
node %7951 : bv<18> = concat(%7934, %7950)
node %7952 : bv<19> = concat(%7934, %7951)
node %7953 : bv<20> = concat(%7934, %7952)
node %7954 : bv<21> = concat(%7934, %7953)
node %7955 : bv<22> = concat(%7934, %7954)
node %7956 : bv<23> = concat(%7934, %7955)
node %7957 : bv<24> = concat(%7934, %7956)
node %7958 : bv<25> = concat(%7934, %7957)
node %7959 : bv<26> = concat(%7934, %7958)
node %7960 : bv<27> = concat(%7934, %7959)
node %7961 : bv<28> = concat(%7934, %7960)
node %7962 : bv<29> = concat(%7934, %7961)
node %7963 : bv<30> = concat(%7934, %7962)
node %7964 : bv<31> = concat(%7934, %7963)
node %7965 : bv<32> = concat(%7934, %7964)
node %7966 : bv<33> = concat(%7934, %7965)
node %7967 : bv<34> = concat(%7934, %7966)
node %7968 : bv<35> = concat(%7934, %7967)
node %7969 : bv<36> = concat(%7934, %7968)
node %7970 : bv<37> = concat(%7934, %7969)
node %7971 : bv<38> = concat(%7934, %7970)
node %7972 : bv<39> = concat(%7934, %7971)
node %7973 : bv<40> = concat(%7934, %7972)
node %7974 : bv<41> = concat(%7934, %7973)
node %7975 : bv<42> = concat(%7934, %7974)
node %7976 : bv<43> = concat(%7934, %7975)
node %7977 : bv<44> = concat(%7934, %7976)
node %7978 : bv<45> = concat(%7934, %7977)
node %7979 : bv<46> = concat(%7934, %7978)
node %7980 : bv<47> = concat(%7934, %7979)
node %7981 : bv<48> = concat(%7934, %7980)
node ALU_OUT_in : bv<48> = xor(%7981, %7933)
node %7989 : bv<1> = eq(SEL_PATTERN, 5'b10001)
node %7990 : bv<32> = ite(%7989, 32'x00000001, 32'x00000000)
node %7997 : bv<1> = eq(SEL_PATTERN, 5'b01001)
node %7998 : bv<32> = ite(%7997, 32'x00000000, %7990)
node SEL_PATTERN_BIN : bv<1> = %7998[0]
node %8003 : bv<1> = not(SEL_PATTERN_BIN)
node the_pattern : bv<48> = ite(%8003, PATTERN, C_DATA_in)
node %8005 : bv<48> = xor(the_pattern, ALU_OUT_in)
node %8006 : bv<48> = not(%8005)
node %8007 : bv<48> = or(%8006, the_mask)
node pdet_o : bv<1> = eq(%8007, 48'xffffffffffff)
node PREG_BIN : bv<1> = PREG[0]
output PATTERNDETECT : bv<1> = ite(PREG_BIN, pdet_o_reg1, pdet_o)
node %8110 : bv<1> = s3[12]
node ALUMODE10_in : bv<1> = and(%1884, %7934)
node cout3 : bv<1> = xor(ALUMODE10_in, %8110)
output CARRYCASCOUT : bv<1> = ite(PREG_BIN, CCOUT_in, xor(ALUMODE10_in, cout3))
node %8084 : bv<1> = xor(%7814, %7808)
node %8085 : bv<1> = xor(%8084, %7748)
node cout0 : bv<1> = xor(ALUMODE10_in, %8085)
node %8088 : bv<2> = ALUMODE_DATA[3:2]
node %8089 : bv<1> = eq(%8088, 2'b00)
node %8090 : bv<1> = not(%8089)
node %8091 : bv<4> = OPMODE_mux[3:0]
node %8092 : bv<1> = eq(%8091, 4'b0101)
node mult_or_logic : bv<1> = or(%8092, %8090)
node %8094 : bv<1> = not(mult_or_logic)
node cout_0 : bv<1> = and(%8094, cout0)
node %8096 : bv<1> = and(%7746, cout_0)
node %8097 : bv<1> = xor(%7826, %7821)
node %8098 : bv<1> = xor(%8097, %7753)
node cout1 : bv<1> = xor(ALUMODE10_in, %8098)
node cout_1 : bv<1> = and(%8094, cout1)
node %8101 : bv<1> = not(%4951)
node %8102 : bv<1> = and(%8101, cout_1)
node %8103 : bv<2> = concat(%8102, %8096)
node %8104 : bv<1> = xor(%7841, %7833)
node %8105 : bv<1> = xor(%8104, %7758)
node cout2 : bv<1> = xor(ALUMODE10_in, %8105)
node cout_2 : bv<1> = and(%8094, cout2)
node %8108 : bv<1> = and(%7746, cout_2)
node %8109 : bv<3> = concat(%8108, %8103)
node COUT_in : bv<4> = concat(cout3, %8109)
output CARRYOUT : bv<4> = ite(PREG_BIN, COUT_reg, COUT_in)
node MULTSIGN_ALU_in : bv<1> = s3[13]
output MULTSIGNOUT : bv<1> = ite(PREG_BIN, MULTSIGN_ALU_reg, MULTSIGN_ALU_in)
node %8076 : bv<48> = or(%8005, the_mask)
node pdetb_o : bv<1> = eq(%8076, 48'xffffffffffff)
output PATTERNBDETECT : bv<1> = ite(PREG_BIN, pdetb_o_reg1, pdetb_o)
node overflow_data : bv<1> = ite(PREG_BIN, pdet_o_reg2, pdet_o)
node %8333 : bv<1> = or(PATTERNDETECT, PATTERNBDETECT)
output OVERFLOW : bv<1> = and(USE_PATTERN_DETECT_BIN, and(%8333, overflow_data))
output PCOUT : bv<48> = ite(PREG_BIN, P_FDBK_in, ALU_OUT_in)
output UNDERFLOW : bv<1> = and(USE_PATTERN_DETECT_BIN, and(%8333, ite(PREG_BIN, pdetb_o_reg2, pdetb_o)))
node %8122 : bv<1> = s[11]
node %8123 : bv<1> = s[10]
node %8124 : bv<1> = s[9]
node %8125 : bv<1> = s[8]
node %8126 : bv<1> = s[7]
node %8127 : bv<1> = s[6]
node %8128 : bv<1> = xor(%8127, %8126)
node %8129 : bv<1> = xor(%8128, %8125)
node %8130 : bv<1> = xor(%8129, %8124)
node %8131 : bv<1> = xor(%8130, %8123)
node %8132 : bv<1> = xor(%8131, %8122)
node %8133 : bv<32> = concat(31'x00000000, %8132)
node %8140 : bv<1> = eq(USE_WIDEXOR, 5'b11000)
node %8141 : bv<32> = ite(%8140, 32'x00000001, 32'x00000000)
node %8148 : bv<1> = eq(USE_WIDEXOR, 5'b01101)
node %8149 : bv<32> = ite(%8148, 32'x00000000, %8141)
node USE_WIDEXOR_BIN : bv<1> = %8149[0]
node %8151 : bv<32> = ite(USE_WIDEXOR_BIN, %8133, 32'x00000000)
node xor_12b : bv<1> = %8151[0]
node %8154 : bv<1> = s[5]
node %8155 : bv<1> = s[4]
node %8156 : bv<1> = s[3]
node %8157 : bv<1> = s[2]
node %8158 : bv<1> = s[1]
node %8159 : bv<1> = s[0]
node %8160 : bv<1> = xor(%8159, %8158)
node %8161 : bv<1> = xor(%8160, %8157)
node %8162 : bv<1> = xor(%8161, %8156)
node %8163 : bv<1> = xor(%8162, %8155)
node %8164 : bv<1> = xor(%8163, %8154)
node %8165 : bv<32> = concat(31'x00000000, %8164)
node %8166 : bv<32> = ite(USE_WIDEXOR_BIN, %8165, 32'x00000000)
node xor_12a : bv<1> = %8166[0]
node xor_24a : bv<1> = xor(xor_12a, xor_12b)
node %8175 : bv<1> = eq(XORSIMD, 5'b11010)
node %8176 : bv<32> = ite(%8175, 32'x00000001, 32'x00000000)
node %8183 : bv<1> = eq(XORSIMD, 5'b01110)
node %8184 : bv<32> = ite(%8183, 32'x00000000, %8176)
node XORSIMD_BIN : bv<1> = %8184[0]
node %8186 : bv<1> = ite(XORSIMD_BIN, xor_12a, xor_24a)
node %8188 : bv<1> = s[23]
node %8189 : bv<1> = s[22]
node %8190 : bv<1> = s[21]
node %8191 : bv<1> = s[20]
node %8192 : bv<1> = s[19]
node %8193 : bv<1> = s[18]
node %8194 : bv<1> = xor(%8193, %8192)
node %8195 : bv<1> = xor(%8194, %8191)
node %8196 : bv<1> = xor(%8195, %8190)
node %8197 : bv<1> = xor(%8196, %8189)
node %8198 : bv<1> = xor(%8197, %8188)
node %8199 : bv<32> = concat(31'x00000000, %8198)
node %8200 : bv<32> = ite(USE_WIDEXOR_BIN, %8199, 32'x00000000)
node xor_12d : bv<1> = %8200[0]
node %8203 : bv<1> = s[17]
node %8204 : bv<1> = s[16]
node %8205 : bv<1> = s[15]
node %8206 : bv<1> = s[14]
node %8207 : bv<1> = s[13]
node %8208 : bv<1> = s[12]
node %8209 : bv<1> = xor(%8208, %8207)
node %8210 : bv<1> = xor(%8209, %8206)
node %8211 : bv<1> = xor(%8210, %8205)
node %8212 : bv<1> = xor(%8211, %8204)
node %8213 : bv<1> = xor(%8212, %8203)
node %8214 : bv<32> = concat(31'x00000000, %8213)
node %8215 : bv<32> = ite(USE_WIDEXOR_BIN, %8214, 32'x00000000)
node xor_12c : bv<1> = %8215[0]
node xor_24b : bv<1> = xor(xor_12c, xor_12d)
node xor_48a : bv<1> = xor(xor_24a, xor_24b)
node %8219 : bv<1> = ite(XORSIMD_BIN, xor_12b, xor_48a)
node %8220 : bv<2> = concat(%8219, %8186)
node %8221 : bv<1> = ite(XORSIMD_BIN, xor_12c, xor_24b)
node %8222 : bv<3> = concat(%8221, %8220)
node %8224 : bv<1> = s[47]
node %8225 : bv<1> = s[46]
node %8226 : bv<1> = s[45]
node %8227 : bv<1> = s[44]
node %8228 : bv<1> = s[43]
node %8229 : bv<1> = s[42]
node %8230 : bv<1> = xor(%8229, %8228)
node %8231 : bv<1> = xor(%8230, %8227)
node %8232 : bv<1> = xor(%8231, %8226)
node %8233 : bv<1> = xor(%8232, %8225)
node %8234 : bv<1> = xor(%8233, %8224)
node %8235 : bv<32> = concat(31'x00000000, %8234)
node %8236 : bv<32> = ite(USE_WIDEXOR_BIN, %8235, 32'x00000000)
node xor_12h : bv<1> = %8236[0]
node %8239 : bv<1> = s[41]
node %8240 : bv<1> = s[40]
node %8241 : bv<1> = s[39]
node %8242 : bv<1> = s[38]
node %8243 : bv<1> = s[37]
node %8244 : bv<1> = s[36]
node %8245 : bv<1> = xor(%8244, %8243)
node %8246 : bv<1> = xor(%8245, %8242)
node %8247 : bv<1> = xor(%8246, %8241)
node %8248 : bv<1> = xor(%8247, %8240)
node %8249 : bv<1> = xor(%8248, %8239)
node %8250 : bv<32> = concat(31'x00000000, %8249)
node %8251 : bv<32> = ite(USE_WIDEXOR_BIN, %8250, 32'x00000000)
node xor_12g : bv<1> = %8251[0]
node xor_24d : bv<1> = xor(xor_12g, xor_12h)
node %8255 : bv<1> = s[35]
node %8256 : bv<1> = s[34]
node %8257 : bv<1> = s[33]
node %8258 : bv<1> = s[32]
node %8259 : bv<1> = s[31]
node %8260 : bv<1> = s[30]
node %8261 : bv<1> = xor(%8260, %8259)
node %8262 : bv<1> = xor(%8261, %8258)
node %8263 : bv<1> = xor(%8262, %8257)
node %8264 : bv<1> = xor(%8263, %8256)
node %8265 : bv<1> = xor(%8264, %8255)
node %8266 : bv<32> = concat(31'x00000000, %8265)
node %8267 : bv<32> = ite(USE_WIDEXOR_BIN, %8266, 32'x00000000)
node xor_12f : bv<1> = %8267[0]
node %8270 : bv<1> = s[29]
node %8271 : bv<1> = s[28]
node %8272 : bv<1> = s[27]
node %8273 : bv<1> = s[26]
node %8274 : bv<1> = s[25]
node %8275 : bv<1> = s[24]
node %8276 : bv<1> = xor(%8275, %8274)
node %8277 : bv<1> = xor(%8276, %8273)
node %8278 : bv<1> = xor(%8277, %8272)
node %8279 : bv<1> = xor(%8278, %8271)
node %8280 : bv<1> = xor(%8279, %8270)
node %8281 : bv<32> = concat(31'x00000000, %8280)
node %8282 : bv<32> = ite(USE_WIDEXOR_BIN, %8281, 32'x00000000)
node xor_12e : bv<1> = %8282[0]
node xor_24c : bv<1> = xor(xor_12e, xor_12f)
node xor_48b : bv<1> = xor(xor_24c, xor_24d)
node xor_96 : bv<1> = xor(xor_48a, xor_48b)
node %8287 : bv<1> = ite(XORSIMD_BIN, xor_12d, xor_96)
node %8288 : bv<4> = concat(%8287, %8222)
node %8289 : bv<1> = ite(XORSIMD_BIN, xor_12e, xor_24c)
node %8290 : bv<5> = concat(%8289, %8288)
node %8291 : bv<1> = ite(XORSIMD_BIN, xor_12f, xor_48b)
node %8292 : bv<6> = concat(%8291, %8290)
node %8293 : bv<1> = ite(XORSIMD_BIN, xor_12g, xor_24d)
node %8294 : bv<7> = concat(%8293, %8292)
node XOR_MX_in : bv<8> = concat(xor_12h, %8294)
output XOROUT : bv<8> = ite(PREG_BIN, XOR_MX_reg, XOR_MX_in)
output ACOUT : bv<30> = ite(eq(ACASCREG[1:0], AREG_BIN), A_ALU, A1_reg)
output BCOUT : bv<18> = ite(eq(BCASCREG[1:0], BREG_BIN), B2_DATA, B1_DATA_out)
node %1032 : bv<1> = and(CEP, PREG_BIN)
node auto_reset_pri : bv<1> = or(not(ite(eq(AUTORESET_PRIORITY, 5'b00110), 32'x00000000, ite(eq(AUTORESET_PRIORITY, 5'b10000), 32'x00000001, 32'x00000000))[0]), CEP)
node AUTORESET_PATDET_BIN : bv<2> = ite(eq(AUTORESET_PATDET, 5'b00011), 32'x00000000, ite(eq(AUTORESET_PATDET, 5'b00100), 32'x00000001, ite(eq(AUTORESET_PATDET, 5'b00101), 32'x00000002, 32'x00000000)))[1:0]
node %8071 : bv<1> = or(xor(RSTP, IS_RSTP_INVERTED), ite(eq(AUTORESET_PATDET_BIN, 2'b01), and(auto_reset_pri, PATTERNDETECT), and(eq(AUTORESET_PATDET_BIN, 2'b10), and(and(auto_reset_pri, overflow_data), not(PATTERNDETECT)))))
node RSTCTRL_in : bv<1> = xor(RSTCTRL, IS_RSTCTRL_INVERTED)
node RSTB_in : bv<1> = xor(RSTB, IS_RSTB_INVERTED)
node %1051 : bv<1> = or(xor(RSTA, IS_RSTA_INVERTED), %247)
node RSTD_in : bv<1> = xor(RSTD, IS_RSTD_INVERTED)
node %8300 : bv<1> = or(xor(RSTM, IS_RSTM_INVERTED), not(MREG_BIN))
node RSTALLCARRYIN_in : bv<1> = xor(RSTALLCARRYIN, IS_RSTALLCARRYIN_INVERTED)
node %8072 : bv<1> = not(%8071)
state ALUMODE_reg : bv<4>
  [next] ite(xor(RSTALUMODE, IS_RSTALUMODE_INVERTED), 4'b0000, ite(CEALUMODE, ALUMODE_in, ALUMODE_reg))
state P_FDBK_in : bv<48>
  [next] ite(%8071, 48'x000000000000, ite(%1032, ALU_OUT_in, P_FDBK_in))
state OPMODE_reg : bv<9>
  [next] ite(RSTCTRL_in, 9'x000, ite(CECTRL, OPMODE_in, OPMODE_reg))
state C_reg : bv<48>
  [next] ite(or(xor(RSTC, IS_RSTC_INVERTED), not(CREG_BIN)), 48'x000000000000, ite(CEC, C, C_reg))
state B2_reg : bv<18>
  [next] ite(RSTB_in, 18'x00000, ite(CEB2, ite(eq(BREG_BIN, 2'b10), B1_DATA_out, _procmux_557), B2_reg))
state A2_reg : bv<30>
  [next] ite(%1051, 30'x00000000, ite(CEA2, ite(eq(AREG_BIN, 2'b10), A1_reg, _procmux_576), A2_reg))
state D_DATA_reg : bv<27>
  [next] ite(or(RSTD_in, not(DREG_INT)), 27'x0000000, ite(CED, D, D_DATA_reg))
state INMODE_reg : bv<5>
  [next] ite(or(xor(RSTINMODE, IS_RSTINMODE_INVERTED), not(INMODEREG_BIN)), 5'b00000, ite(CEINMODE, INMODE_in, INMODE_reg))
state A1_reg : bv<30>
  [next] ite(%1051, 30'x00000000, ite(CEA1, _procmux_576, A1_reg))
state B1_DATA_out : bv<18>
  [next] ite(or(RSTB_in, %233), 18'x00000, ite(CEB1, _procmux_557, B1_DATA_out))
state AD_DATA_reg : bv<27>
  [next] ite(RSTD_in, 27'x0000000, ite(CEAD, AD_in, AD_DATA_reg))
state U_DATA_reg : bv<45>
  [next] ite(%8300, 45'x000000000000, ite(CEM, U_in, U_DATA_reg))
state V_DATA_reg : bv<45>
  [next] ite(%8300, 45'x000000000000, ite(CEM, V_in, V_DATA_reg))
state XOR_MX_reg : bv<8>
  [next] ite(%8071, 8'b00000000, ite(%1032, XOR_MX_in, XOR_MX_reg))
state CARRYINSEL_reg : bv<3>
  [next] ite(RSTCTRL_in, 3'b000, ite(CECTRL, CARRYINSEL, CARRYINSEL_reg))
state qmultcarryin : bv<1>
  [next] ite(RSTALLCARRYIN_in, 32'x00000000, concat(31'x00000000, ite(CEM, c_mult, qmultcarryin)))[0]
state ALUMODE10_reg : bv<1>
  [next] and(%8072, ite(%1032, ALUMODE10_in, ALUMODE10_reg))
state COUT_reg : bv<4>
  [next] ite(%8071, 4'b0000, ite(%1032, COUT_in, COUT_reg))
state CARRYIN_reg : bv<1>
  [next] and(not(RSTALLCARRYIN_in), ite(CECARRYIN, CARRYIN_in, CARRYIN_reg))
state pdet_o_reg1 : bv<1>
  [next] and(%8072, ite(%1032, pdet_o, pdet_o_reg1))
state pdetb_o_reg1 : bv<1>
  [next] and(%8072, ite(%1032, pdetb_o, pdetb_o_reg1))
state pdetb_o_reg2 : bv<1>
  [next] and(%8072, ite(%1032, pdetb_o_reg1, pdetb_o_reg2))
state pdet_o_reg2 : bv<1>
  [next] and(%8072, ite(%1032, pdet_o_reg1, pdet_o_reg2))
state MULTSIGN_ALU_reg : bv<1>
  [next] and(%8072, ite(%1032, MULTSIGN_ALU_in, MULTSIGN_ALU_reg))
