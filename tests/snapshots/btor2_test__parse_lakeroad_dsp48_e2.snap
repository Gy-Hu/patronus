---
source: tests/btor2_test.rs
expression: sys.serialize_to_str(&ctx)
---
DSP48E2
input RSTP : bv<1>
input RSTM : bv<1>
input RSTINMODE : bv<1>
input RSTD : bv<1>
input RSTCTRL : bv<1>
input RSTC : bv<1>
input RSTB : bv<1>
input RSTALUMODE : bv<1>
input RSTALLCARRYIN : bv<1>
input RSTA : bv<1>
input PCIN : bv<48>
input OPMODE : bv<9>
input MULTSIGNIN : bv<1>
input INMODE : bv<5>
input D : bv<27>
input CLK : bv<1>
input CEP : bv<1>
input CEM : bv<1>
input CEINMODE : bv<1>
input CED : bv<1>
input CECTRL : bv<1>
input CECARRYIN : bv<1>
input CEC : bv<1>
input CEB2 : bv<1>
input CEB1 : bv<1>
input CEALUMODE : bv<1>
input CEAD : bv<1>
input CEA2 : bv<1>
input CEA1 : bv<1>
input CARRYINSEL : bv<3>
input CARRYIN : bv<1>
input CARRYCASCIN : bv<1>
input C : bv<48>
input BCIN : bv<18>
input B : bv<18>
input ALUMODE : bv<4>
input ACIN : bv<30>
input A : bv<30>
input XORSIMD : bv<5>
input USE_WIDEXOR : bv<5>
input USE_SIMD : bv<5>
input USE_PATTERN_DETECT : bv<5>
input USE_MULT : bv<5>
input SEL_PATTERN : bv<5>
input SEL_MASK : bv<5>
input RND : bv<48>
input PREG : bv<32>
input PREADDINSEL : bv<5>
input PATTERN : bv<48>
input OPMODEREG : bv<32>
input MREG : bv<32>
input MASK : bv<48>
input IS_RSTP_INVERTED : bv<1>
input IS_RSTM_INVERTED : bv<1>
input IS_RSTINMODE_INVERTED : bv<1>
input IS_RSTD_INVERTED : bv<1>
input IS_RSTC_INVERTED : bv<1>
input IS_RSTCTRL_INVERTED : bv<1>
input IS_RSTB_INVERTED : bv<1>
input IS_RSTA_INVERTED : bv<1>
input IS_RSTALUMODE_INVERTED : bv<1>
input IS_RSTALLCARRYIN_INVERTED : bv<1>
input IS_OPMODE_INVERTED : bv<9>
input IS_INMODE_INVERTED : bv<5>
input IS_CLK_INVERTED : bv<1>
input IS_CARRYIN_INVERTED : bv<1>
input IS_ALUMODE_INVERTED : bv<4>
input INMODEREG : bv<32>
input DREG : bv<32>
input CREG : bv<32>
input CARRYINSELREG : bv<32>
input CARRYINREG : bv<32>
input B_INPUT : bv<5>
input BREG : bv<32>
input BMULTSEL : bv<5>
input BCASCREG : bv<32>
input A_INPUT : bv<5>
input AUTORESET_PRIORITY : bv<5>
input AUTORESET_PATDET : bv<5>
input AREG : bv<32>
input AMULTSEL : bv<5>
input ALUMODEREG : bv<32>
input ADREG : bv<32>
input ACASCREG : bv<32>
node CREG_BIN : bv<1> = CREG[0]
node C_DATA_in : bv<48> = ite(CREG_BIN, C_reg, C)
node %2339 : bv<46> = C_DATA_in[45:0]
node %2340 : bv<46> = not(%2339)
node %2341 : bv<48> = concat(%2340, 2'b00)
node %2348 : bv<1> = eq(SEL_MASK, 5'b10111)
node %2349 : bv<32> = ite(%2348, 32'x00000003, 32'x00000000)
node %2356 : bv<1> = eq(SEL_MASK, 5'b10110)
node %2357 : bv<32> = ite(%2356, 32'x00000002, %2349)
node %2364 : bv<1> = eq(SEL_MASK, 5'b10001)
node %2365 : bv<32> = ite(%2364, 32'x00000001, %2357)
node %2372 : bv<1> = eq(SEL_MASK, 5'b01000)
node %2373 : bv<32> = ite(%2372, 32'x00000000, %2365)
node SEL_MASK_BIN : bv<2> = %2373[1:0]
node %2381 : bv<1> = eq(SEL_MASK_BIN, 2'b11)
node %2382 : bv<48> = ite(%2381, %2341, MASK)
node %2383 : bv<47> = C_DATA_in[46:0]
node %2384 : bv<47> = not(%2383)
node %2385 : bv<48> = concat(%2384, 1'b0)
node %2388 : bv<1> = eq(SEL_MASK_BIN, 2'b10)
node %2389 : bv<48> = ite(%2388, %2385, %2382)
node %2392 : bv<1> = eq(SEL_MASK_BIN, 2'b01)
node %2393 : bv<48> = ite(%2392, C_DATA_in, %2389)
node %2400 : bv<1> = eq(USE_PATTERN_DETECT, 5'b10101)
node %2401 : bv<32> = ite(%2400, 32'x00000001, 32'x00000000)
node %2408 : bv<1> = eq(USE_PATTERN_DETECT, 5'b01011)
node %2409 : bv<32> = ite(%2408, 32'x00000000, %2401)
node USE_PATTERN_DETECT_BIN : bv<1> = %2409[0]
node %2414 : bv<1> = not(USE_PATTERN_DETECT_BIN)
node the_mask : bv<48> = ite(%2414, 48'xffffffffffff, %2393)
node OPMODE_in : bv<9> = xor(OPMODE, IS_OPMODE_INVERTED)
node OPMODEREG_BIN : bv<1> = OPMODEREG[0]
node OPMODE_mux : bv<9> = ite(OPMODEREG_BIN, OPMODE_reg, OPMODE_in)
node %1858 : bv<2> = OPMODE_mux[8:7]
node _procmux_634_CMP0 : bv<1> = eq(%1858, 2'b11)
node %1860 : bv<48> = ite(_procmux_634_CMP0, C_DATA_in, 48'x000000000000)
node _procmux_635_CMP0 : bv<1> = eq(%1858, 2'b10)
node %1862 : bv<48> = ite(_procmux_635_CMP0, RND, %1860)
node _procmux_636_CMP0 : bv<1> = eq(%1858, 2'b01)
node %1864 : bv<48> = ite(_procmux_636_CMP0, P_FDBK_in, %1862)
node _procmux_637_CMP0 : bv<1> = eq(%1858, 2'b00)
node wmux : bv<48> = ite(_procmux_637_CMP0, 48'x000000000000, %1864)
node %1098 : bv<31> = P_FDBK_in[47:17]
node P_FDBK_47_in : bv<1> = P_FDBK_in[47]
node %1100 : bv<32> = concat(P_FDBK_47_in, %1098)
node %1101 : bv<33> = concat(P_FDBK_47_in, %1100)
node %1102 : bv<34> = concat(P_FDBK_47_in, %1101)
node %1103 : bv<35> = concat(P_FDBK_47_in, %1102)
node %1104 : bv<36> = concat(P_FDBK_47_in, %1103)
node %1105 : bv<37> = concat(P_FDBK_47_in, %1104)
node %1106 : bv<38> = concat(P_FDBK_47_in, %1105)
node %1107 : bv<39> = concat(P_FDBK_47_in, %1106)
node %1108 : bv<40> = concat(P_FDBK_47_in, %1107)
node %1109 : bv<41> = concat(P_FDBK_47_in, %1108)
node %1110 : bv<42> = concat(P_FDBK_47_in, %1109)
node %1111 : bv<43> = concat(P_FDBK_47_in, %1110)
node %1112 : bv<44> = concat(P_FDBK_47_in, %1111)
node %1113 : bv<45> = concat(P_FDBK_47_in, %1112)
node %1114 : bv<46> = concat(P_FDBK_47_in, %1113)
node %1115 : bv<47> = concat(P_FDBK_47_in, %1114)
node %1116 : bv<48> = concat(P_FDBK_47_in, %1115)
node %1867 : bv<2> = OPMODE_mux[6:5]
node _procmux_616_CMP0 : bv<1> = eq(%1867, 2'b11)
node %1869 : bv<48> = ite(_procmux_616_CMP0, %1116, 48'x000000000000)
node %170 : bv<31> = PCIN[47:17]
node %171 : bv<1> = PCIN[47]
node %172 : bv<32> = concat(%171, %170)
node %173 : bv<33> = concat(%171, %172)
node %174 : bv<34> = concat(%171, %173)
node %175 : bv<35> = concat(%171, %174)
node %176 : bv<36> = concat(%171, %175)
node %177 : bv<37> = concat(%171, %176)
node %178 : bv<38> = concat(%171, %177)
node %179 : bv<39> = concat(%171, %178)
node %180 : bv<40> = concat(%171, %179)
node %181 : bv<41> = concat(%171, %180)
node %182 : bv<42> = concat(%171, %181)
node %183 : bv<43> = concat(%171, %182)
node %184 : bv<44> = concat(%171, %183)
node %185 : bv<45> = concat(%171, %184)
node %186 : bv<46> = concat(%171, %185)
node %187 : bv<47> = concat(%171, %186)
node %188 : bv<48> = concat(%171, %187)
node %1870 : bv<3> = OPMODE_mux[6:4]
node _procmux_617_CMP0 : bv<1> = eq(%1870, 3'b101)
node %1872 : bv<48> = ite(_procmux_617_CMP0, %188, %1869)
node _procmux_618_CMP0 : bv<1> = eq(%1870, 3'b100)
node %1874 : bv<48> = ite(_procmux_618_CMP0, P_FDBK_in, %1872)
node _procmux_619_CMP0 : bv<1> = eq(%1870, 3'b011)
node %1876 : bv<48> = ite(_procmux_619_CMP0, C_DATA_in, %1874)
node _procmux_620_CMP0 : bv<1> = eq(%1870, 3'b010)
node %1878 : bv<48> = ite(_procmux_620_CMP0, P_FDBK_in, %1876)
node _procmux_621_CMP0 : bv<1> = eq(%1870, 3'b001)
node %1880 : bv<48> = ite(_procmux_621_CMP0, PCIN, %1878)
node _procmux_622_CMP0 : bv<1> = eq(%1870, 3'b000)
node zmux : bv<48> = ite(_procmux_622_CMP0, 48'x000000000000, %1880)
node ALUMODE_in : bv<4> = xor(ALUMODE, IS_ALUMODE_INVERTED)
node ALUMODEREG_BIN : bv<1> = ALUMODEREG[0]
node ALUMODE_DATA : bv<4> = ite(ALUMODEREG_BIN, ALUMODE_reg, ALUMODE_in)
node %1884 : bv<1> = ALUMODE_DATA[0]
node %1885 : bv<2> = concat(%1884, %1884)
node %1886 : bv<3> = concat(%1884, %1885)
node %1887 : bv<4> = concat(%1884, %1886)
node %1888 : bv<5> = concat(%1884, %1887)
node %1889 : bv<6> = concat(%1884, %1888)
node %1890 : bv<7> = concat(%1884, %1889)
node %1891 : bv<8> = concat(%1884, %1890)
node %1892 : bv<9> = concat(%1884, %1891)
node %1893 : bv<10> = concat(%1884, %1892)
node %1894 : bv<11> = concat(%1884, %1893)
node %1895 : bv<12> = concat(%1884, %1894)
node %1896 : bv<13> = concat(%1884, %1895)
node %1897 : bv<14> = concat(%1884, %1896)
node %1898 : bv<15> = concat(%1884, %1897)
node %1899 : bv<16> = concat(%1884, %1898)
node %1900 : bv<17> = concat(%1884, %1899)
node %1901 : bv<18> = concat(%1884, %1900)
node %1902 : bv<19> = concat(%1884, %1901)
node %1903 : bv<20> = concat(%1884, %1902)
node %1904 : bv<21> = concat(%1884, %1903)
node %1905 : bv<22> = concat(%1884, %1904)
node %1906 : bv<23> = concat(%1884, %1905)
node %1907 : bv<24> = concat(%1884, %1906)
node %1908 : bv<25> = concat(%1884, %1907)
node %1909 : bv<26> = concat(%1884, %1908)
node %1910 : bv<27> = concat(%1884, %1909)
node %1911 : bv<28> = concat(%1884, %1910)
node %1912 : bv<29> = concat(%1884, %1911)
node %1913 : bv<30> = concat(%1884, %1912)
node %1914 : bv<31> = concat(%1884, %1913)
node %1915 : bv<32> = concat(%1884, %1914)
node %1916 : bv<33> = concat(%1884, %1915)
node %1917 : bv<34> = concat(%1884, %1916)
node %1918 : bv<35> = concat(%1884, %1917)
node %1919 : bv<36> = concat(%1884, %1918)
node %1920 : bv<37> = concat(%1884, %1919)
node %1921 : bv<38> = concat(%1884, %1920)
node %1922 : bv<39> = concat(%1884, %1921)
node %1923 : bv<40> = concat(%1884, %1922)
node %1924 : bv<41> = concat(%1884, %1923)
node %1925 : bv<42> = concat(%1884, %1924)
node %1926 : bv<43> = concat(%1884, %1925)
node %1927 : bv<44> = concat(%1884, %1926)
node %1928 : bv<45> = concat(%1884, %1927)
node %1929 : bv<46> = concat(%1884, %1928)
node %1930 : bv<47> = concat(%1884, %1929)
node %1931 : bv<48> = concat(%1884, %1930)
node z_optinv : bv<48> = xor(%1931, zmux)
node %1939 : bv<1> = eq(B_INPUT, 5'b01111)
node %1940 : bv<32> = ite(%1939, 32'x00000001, 32'x00000000)
node %1947 : bv<1> = eq(B_INPUT, 5'b00111)
node %1948 : bv<32> = ite(%1947, 32'x00000000, %1940)
node B_INPUT_BIN : bv<1> = %1948[0]
node _procmux_557 : bv<18> = ite(B_INPUT_BIN, BCIN, B)
node BREG_BIN : bv<2> = BREG[1:0]
node %233 : bv<1> = eq(BREG_BIN, 2'b00)
node %234 : bv<1> = not(%233)
node B2_DATA : bv<18> = ite(%234, B2_reg, _procmux_557)
node %1960 : bv<1> = eq(A_INPUT, 5'b01111)
node %1961 : bv<32> = ite(%1960, 32'x00000001, 32'x00000000)
node %1964 : bv<1> = eq(A_INPUT, 5'b00111)
node %1965 : bv<32> = ite(%1964, 32'x00000000, %1961)
node A_INPUT_BIN : bv<1> = %1965[0]
node _procmux_576 : bv<30> = ite(A_INPUT_BIN, ACIN, A)
node AREG_BIN : bv<2> = AREG[1:0]
node %247 : bv<1> = eq(AREG_BIN, 2'b00)
node %248 : bv<1> = not(%247)
node A_ALU : bv<30> = ite(%248, A2_reg, _procmux_576)
node %1972 : bv<48> = concat(A_ALU, B2_DATA)
node %1973 : bv<2> = OPMODE_mux[1:0]
node _procmux_629_CMP0 : bv<1> = eq(%1973, 2'b11)
node %1975 : bv<48> = ite(_procmux_629_CMP0, %1972, 48'x000000000000)
node _procmux_630_CMP0 : bv<1> = eq(%1973, 2'b10)
node %1977 : bv<48> = ite(_procmux_630_CMP0, P_FDBK_in, %1975)
node %1978 : bv<27> = A_ALU[26:0]
node %316 : bv<27> = A1_reg[26:0]
node INMODE_in : bv<5> = xor(INMODE, IS_INMODE_INVERTED)
node INMODEREG_BIN : bv<1> = INMODEREG[0]
node INMODE_mux : bv<5> = ite(INMODEREG_BIN, INMODE_reg, INMODE_in)
node %1980 : bv<1> = INMODE_mux[0]
node _procmux_462 : bv<27> = ite(%1980, %316, %1978)
node %1982 : bv<1> = INMODE_mux[1]
node %1989 : bv<1> = eq(PREADDINSEL, 5'b00001)
node %1990 : bv<32> = ite(%1989, 32'x00000001, 32'x00000000)
node %1996 : bv<1> = eq(PREADDINSEL, 5'b00000)
node %1997 : bv<32> = ite(%1996, 32'x00000000, %1990)
node PREADDINSEL_BIN : bv<1> = %1997[0]
node %2005 : bv<1> = not(PREADDINSEL_BIN)
node %2006 : bv<1> = and(%2005, %1982)
node _procmux_465 : bv<27> = ite(%2006, 27'x0000000, _procmux_462)
node A2A1 : bv<27> = ite(%2006, 27'x0000000, _procmux_465)
node %2009 : bv<1> = INMODE_mux[4]
node _procmux_453 : bv<18> = ite(%2009, B1_DATA_out, B2_DATA)
node %2013 : bv<1> = and(PREADDINSEL_BIN, %1982)
node _procmux_456 : bv<18> = ite(%2013, 18'x00000, _procmux_453)
node B2B1 : bv<18> = ite(%2013, 18'x00000, _procmux_456)
node %2016 : bv<1> = B2B1[17]
node %2017 : bv<19> = concat(%2016, B2B1)
node %2018 : bv<20> = concat(%2016, %2017)
node %2019 : bv<21> = concat(%2016, %2018)
node %2020 : bv<22> = concat(%2016, %2019)
node %2021 : bv<23> = concat(%2016, %2020)
node %2022 : bv<24> = concat(%2016, %2021)
node %2023 : bv<25> = concat(%2016, %2022)
node %2024 : bv<26> = concat(%2016, %2023)
node %2025 : bv<27> = concat(%2016, %2024)
node PREADD_AB : bv<27> = ite(PREADDINSEL_BIN, %2025, A2A1)
node DREG_BIN : bv<1> = DREG[0]
node %2033 : bv<1> = eq(USE_MULT, 5'b10100)
node %2034 : bv<32> = ite(%2033, 32'x00000002, 32'x00000000)
node %2041 : bv<1> = eq(USE_MULT, 5'b10010)
node %2042 : bv<32> = ite(%2041, 32'x00000001, %2034)
node %2049 : bv<1> = eq(USE_MULT, 5'b01010)
node %2050 : bv<32> = ite(%2049, 32'x00000000, %2042)
node USE_MULT_BIN : bv<2> = %2050[1:0]
node %2058 : bv<1> = eq(USE_MULT_BIN, 2'b10)
node %2065 : bv<1> = eq(BMULTSEL, 5'b00010)
node %2066 : bv<32> = ite(%2065, 32'x00000001, 32'x00000000)
node %2073 : bv<1> = eq(BMULTSEL, 5'b00001)
node %2074 : bv<32> = ite(%2073, 32'x00000000, %2066)
node BMULTSEL_BIN : bv<1> = %2074[0]
node %2079 : bv<1> = not(BMULTSEL_BIN)
node %2082 : bv<1> = eq(AMULTSEL, 5'b00010)
node %2083 : bv<32> = ite(%2082, 32'x00000001, 32'x00000000)
node %2090 : bv<1> = eq(AMULTSEL, 5'b00000)
node %2091 : bv<32> = ite(%2090, 32'x00000000, %2083)
node AMULTSEL_BIN : bv<1> = %2091[0]
node %2096 : bv<1> = not(AMULTSEL_BIN)
node %2097 : bv<1> = and(%2096, %2079)
node %2098 : bv<1> = or(%2097, %2058)
node DREG_INT : bv<1> = ite(%2098, 1'b0, DREG_BIN)
node D_DATA : bv<27> = ite(DREG_INT, D_DATA_reg, D)
node %2101 : bv<1> = INMODE_mux[2]
node D_DATA_mux : bv<27> = ite(%2101, D_DATA, 27'x0000000)
node %2103 : bv<27> = add(D_DATA_mux, PREADD_AB)
node %2104 : bv<27> = sub(D_DATA_mux, PREADD_AB)
node %2105 : bv<1> = INMODE_mux[3]
node AD_in : bv<27> = ite(%2105, %2104, %2103)
node ADREG_BIN : bv<1> = ADREG[0]
node ADREG_INT : bv<1> = ite(%2098, 1'b0, ADREG_BIN)
node AD_DATA : bv<27> = ite(ADREG_INT, AD_DATA_reg, AD_in)
node %2109 : bv<18> = AD_DATA[17:0]
node b_mult_mux : bv<18> = ite(%2079, B2B1, %2109)
node BMULT17_in : bv<1> = b_mult_mux[17]
node %2112 : bv<19> = concat(BMULT17_in, b_mult_mux)
node %2113 : bv<20> = concat(BMULT17_in, %2112)
node %2114 : bv<21> = concat(BMULT17_in, %2113)
node %2115 : bv<22> = concat(BMULT17_in, %2114)
node %2116 : bv<23> = concat(BMULT17_in, %2115)
node %2117 : bv<24> = concat(BMULT17_in, %2116)
node %2118 : bv<25> = concat(BMULT17_in, %2117)
node %2119 : bv<26> = concat(BMULT17_in, %2118)
node %2120 : bv<27> = concat(BMULT17_in, %2119)
node %2121 : bv<28> = concat(BMULT17_in, %2120)
node %2122 : bv<29> = concat(BMULT17_in, %2121)
node %2123 : bv<30> = concat(BMULT17_in, %2122)
node %2124 : bv<31> = concat(BMULT17_in, %2123)
node %2125 : bv<32> = concat(BMULT17_in, %2124)
node %2126 : bv<33> = concat(BMULT17_in, %2125)
node %2127 : bv<34> = concat(BMULT17_in, %2126)
node %2128 : bv<35> = concat(BMULT17_in, %2127)
node %2129 : bv<36> = concat(BMULT17_in, %2128)
node %2130 : bv<37> = concat(BMULT17_in, %2129)
node %2131 : bv<38> = concat(BMULT17_in, %2130)
node %2132 : bv<39> = concat(BMULT17_in, %2131)
node %2133 : bv<40> = concat(BMULT17_in, %2132)
node %2134 : bv<41> = concat(BMULT17_in, %2133)
node %2135 : bv<42> = concat(BMULT17_in, %2134)
node %2136 : bv<43> = concat(BMULT17_in, %2135)
node %2137 : bv<44> = concat(BMULT17_in, %2136)
node %2138 : bv<45> = concat(BMULT17_in, %2137)
node a_mult_mux : bv<27> = ite(%2096, A2A1, AD_DATA)
node AMULT26_in : bv<1> = a_mult_mux[26]
node %2141 : bv<28> = concat(AMULT26_in, a_mult_mux)
node %2142 : bv<29> = concat(AMULT26_in, %2141)
node %2143 : bv<30> = concat(AMULT26_in, %2142)
node %2144 : bv<31> = concat(AMULT26_in, %2143)
node %2145 : bv<32> = concat(AMULT26_in, %2144)
node %2146 : bv<33> = concat(AMULT26_in, %2145)
node %2147 : bv<34> = concat(AMULT26_in, %2146)
node %2148 : bv<35> = concat(AMULT26_in, %2147)
node %2149 : bv<36> = concat(AMULT26_in, %2148)
node %2150 : bv<37> = concat(AMULT26_in, %2149)
node %2151 : bv<38> = concat(AMULT26_in, %2150)
node %2152 : bv<39> = concat(AMULT26_in, %2151)
node %2153 : bv<40> = concat(AMULT26_in, %2152)
node %2154 : bv<41> = concat(AMULT26_in, %2153)
node %2155 : bv<42> = concat(AMULT26_in, %2154)
node %2156 : bv<43> = concat(AMULT26_in, %2155)
node %2157 : bv<44> = concat(AMULT26_in, %2156)
node %2158 : bv<45> = concat(AMULT26_in, %2157)
node %2159 : bv<45> = mul(%2158, %2138)
node mult : bv<45> = ite(%2058, 45'x000000000000, %2159)
node %2161 : bv<44> = mult[43:0]
node %2162 : bv<44> = and(%2161, 44'x55555555555)
node U_in : bv<45> = concat(1'b1, %2162)
node MREG_BIN : bv<1> = MREG[0]
node U_DATA : bv<45> = ite(MREG_BIN, U_DATA_reg, U_in)
node %2171 : bv<1> = eq(USE_SIMD, 5'b11001)
node %2172 : bv<32> = ite(%2171, 32'x00000002, 32'x00000000)
node %2179 : bv<1> = eq(USE_SIMD, 5'b10011)
node %2180 : bv<32> = ite(%2179, 32'x00000001, %2172)
node %2187 : bv<1> = eq(USE_SIMD, 5'b01100)
node %2188 : bv<32> = ite(%2187, 32'x00000000, %2180)
node USE_SIMD_BIN : bv<2> = %2188[1:0]
node %2196 : bv<1> = eq(USE_SIMD_BIN, 2'b00)
node U_DATA_in : bv<45> = ite(%2196, U_DATA, 45'x100000000000)
node %2198 : bv<1> = U_DATA_in[44]
node %2199 : bv<46> = concat(%2198, U_DATA_in)
node %2200 : bv<47> = concat(%2198, %2199)
node %2201 : bv<48> = concat(%2198, %2200)
node _procmux_631_CMP0 : bv<1> = eq(%1973, 2'b01)
node %2203 : bv<48> = ite(_procmux_631_CMP0, %2201, %1977)
node %452 : bv<2> = concat(MULTSIGNIN, 1'b0)
node %453 : bv<48> = concat(46'x000000000000, %452)
node x_mac_cascd : bv<48> = ite(_procmux_618_CMP0, %453, 48'x000000000000)
node _procmux_632_CMP0 : bv<1> = eq(%1973, 2'b00)
node xmux : bv<48> = ite(_procmux_632_CMP0, x_mac_cascd, %2203)
node %2207 : bv<48> = and(xmux, z_optinv)
node %2208 : bv<2> = OPMODE_mux[3:2]
node _procmux_624_CMP0 : bv<1> = eq(%2208, 2'b11)
node %2210 : bv<48> = ite(_procmux_624_CMP0, C_DATA_in, 48'x000000000000)
node _procmux_625_CMP0 : bv<1> = eq(%2208, 2'b10)
node %2212 : bv<48> = ite(_procmux_625_CMP0, 48'xffffffffffff, %2210)
node %2213 : bv<44> = and(%2161, 44'xaaaaaaaaaaa)
node %2214 : bv<1> = mult[44]
node %2215 : bv<1> = not(%2214)
node V_in : bv<45> = concat(%2215, %2213)
node V_DATA : bv<45> = ite(MREG_BIN, V_DATA_reg, V_in)
node V_DATA_in : bv<45> = ite(%2196, V_DATA, 45'x100000000000)
node %2219 : bv<48> = concat(3'b000, V_DATA_in)
node _procmux_626_CMP0 : bv<1> = eq(%2208, 2'b01)
node %2221 : bv<48> = ite(_procmux_626_CMP0, %2219, %2212)
node _procmux_627_CMP0 : bv<1> = eq(%2208, 2'b00)
node ymux : bv<48> = ite(_procmux_627_CMP0, 48'x000000000000, %2221)
node %2224 : bv<48> = and(z_optinv, ymux)
node %2225 : bv<48> = and(xmux, ymux)
node %2226 : bv<48> = or(%2225, %2224)
node co : bv<48> = or(%2226, %2207)
node %2228 : bv<1> = ALUMODE_DATA[2]
node comux : bv<48> = ite(%2228, 48'x000000000000, co)
node %2230 : bv<11> = comux[10:0]
node %2231 : bv<12> = concat(%2230, 1'b0)
node %2237 : bv<1> = eq(USE_SIMD_BIN, 2'b01)
node %2238 : bv<1> = not(%2237)
node %2239 : bv<1> = comux[11]
node %2240 : bv<1> = and(%2239, %2238)
node %2241 : bv<13> = concat(%2240, %2231)
node %2242 : bv<11> = comux[22:12]
node %2243 : bv<24> = concat(%2242, %2241)
node %2244 : bv<1> = comux[23]
node %2245 : bv<1> = and(%2244, %2196)
node %2246 : bv<25> = concat(%2245, %2243)
node %2247 : bv<11> = comux[34:24]
node %2248 : bv<36> = concat(%2247, %2246)
node %2249 : bv<1> = comux[35]
node %2250 : bv<1> = and(%2249, %2238)
node %2251 : bv<37> = concat(%2250, %2248)
node %2252 : bv<11> = comux[46:36]
node %2253 : bv<48> = concat(%2252, %2251)
node %2254 : bv<48> = xor(z_optinv, xmux)
node s : bv<48> = xor(%2254, ymux)
node %2256 : bv<1> = ALUMODE_DATA[3]
node smux : bv<48> = ite(%2256, co, s)
node %2258 : bv<48> = xor(smux, %2253)
node smux_w : bv<48> = xor(%2258, wmux)
node %2260 : bv<12> = smux_w[11:0]
node %2261 : bv<13> = concat(1'b0, %2260)
node %1158 : bv<1> = not(P_FDBK_47_in)
node CARRYINSELREG_BIN : bv<1> = CARRYINSELREG[0]
node CARRYINSEL_mux : bv<3> = ite(CARRYINSELREG_BIN, CARRYINSEL_reg, CARRYINSEL)
node _procmux_584_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b111)
node %2264 : bv<1> = ite(_procmux_584_CMP0, %1158, 1'b0)
node %2265 : bv<1> = xor(AMULT26_in, BMULT17_in)
node c_mult : bv<1> = not(%2265)
node multcarryin_data : bv<1> = ite(MREG_BIN, qmultcarryin, c_mult)
node %2268 : bv<1> = not(multcarryin_data)
node _procmux_585_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b110)
node %2270 : bv<1> = ite(_procmux_585_CMP0, %2268, %2264)
node _procmux_586_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b101)
node %2272 : bv<1> = ite(_procmux_586_CMP0, P_FDBK_47_in, %2270)
node %729 : bv<1> = COUT_reg[3]
node CCOUT_in : bv<1> = xor(ALUMODE10_reg, %729)
node %731 : bv<1> = not(CCOUT_in)
node _procmux_587_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b100)
node %2274 : bv<1> = ite(_procmux_587_CMP0, %731, %2272)
node %734 : bv<1> = not(%171)
node _procmux_588_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b011)
node %2276 : bv<1> = ite(_procmux_588_CMP0, %734, %2274)
node %737 : bv<1> = not(CARRYCASCIN)
node _procmux_589_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b010)
node %2278 : bv<1> = ite(_procmux_589_CMP0, %737, %2276)
node _procmux_590_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b001)
node %2280 : bv<1> = ite(_procmux_590_CMP0, %171, %2278)
node CARRYIN_in : bv<1> = xor(CARRYIN, IS_CARRYIN_INVERTED)
node CARRYINREG_BIN : bv<1> = CARRYINREG[0]
node CARRYIN_mux : bv<1> = ite(CARRYINREG_BIN, CARRYIN_reg, CARRYIN_in)
node %2282 : bv<1> = not(CARRYIN_mux)
node _procmux_591_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b000)
node cin_b : bv<1> = ite(_procmux_591_CMP0, %2282, %2280)
node %2285 : bv<1> = not(cin_b)
node %2286 : bv<1> = or(%2256, %2228)
node cin : bv<1> = ite(%2286, 1'b0, %2285)
node %2288 : bv<48> = and(smux, wmux)
node %2289 : bv<48> = and(wmux, %2253)
node %2290 : bv<48> = and(smux, %2253)
node %2291 : bv<48> = or(%2290, %2289)
node comux_w : bv<48> = or(%2291, %2288)
node %2293 : bv<11> = comux_w[10:0]
node %2294 : bv<12> = concat(%2293, cin)
node %2295 : bv<13> = concat(1'b0, %2294)
node s0 : bv<13> = add(%2295, %2261)
node %2416 : bv<12> = s0[11:0]
node %2297 : bv<1> = s0[12]
node intc1 : bv<1> = and(%2238, %2297)
node %2300 : bv<13> = concat(12'x000, intc1)
node %2301 : bv<12> = smux_w[23:12]
node %2302 : bv<13> = concat(1'b0, %2301)
node %2303 : bv<1> = comux_w[11]
node co12_lsb : bv<1> = and(%2238, %2303)
node %2305 : bv<11> = comux_w[22:12]
node %2306 : bv<12> = concat(%2305, co12_lsb)
node %2307 : bv<13> = concat(1'b0, %2306)
node %2308 : bv<13> = add(%2307, %2302)
node s1 : bv<13> = add(%2308, %2300)
node %2417 : bv<12> = s1[11:0]
node %2418 : bv<24> = concat(%2417, %2416)
node %2310 : bv<1> = s1[12]
node intc2 : bv<1> = and(%2196, %2310)
node %2312 : bv<13> = concat(12'x000, intc2)
node %2313 : bv<12> = smux_w[35:24]
node %2314 : bv<13> = concat(1'b0, %2313)
node %2315 : bv<1> = comux_w[23]
node co24_lsb : bv<1> = and(%2196, %2315)
node %2317 : bv<11> = comux_w[34:24]
node %2318 : bv<12> = concat(%2317, co24_lsb)
node %2319 : bv<13> = concat(1'b0, %2318)
node %2320 : bv<13> = add(%2319, %2314)
node s2 : bv<13> = add(%2320, %2312)
node %2419 : bv<12> = s2[11:0]
node %2420 : bv<36> = concat(%2419, %2418)
node %2322 : bv<1> = s2[12]
node intc3 : bv<1> = and(%2238, %2322)
node %2325 : bv<14> = concat(13'x0000, intc3)
node %2326 : bv<12> = smux_w[47:36]
node %2327 : bv<1> = comux[47]
node %2328 : bv<13> = concat(%2327, %2326)
node %2329 : bv<14> = concat(1'b0, %2328)
node %2330 : bv<1> = comux_w[35]
node co36_lsb : bv<1> = and(%2238, %2330)
node %2332 : bv<12> = comux_w[47:36]
node %2333 : bv<13> = concat(%2332, co36_lsb)
node %2334 : bv<14> = concat(1'b0, %2333)
node %2335 : bv<14> = add(%2334, %2329)
node s3 : bv<14> = add(%2335, %2325)
node %2421 : bv<12> = s3[11:0]
node %2422 : bv<48> = concat(%2421, %2420)
node %2423 : bv<1> = ALUMODE_DATA[1]
node %2424 : bv<2> = concat(%2423, %2423)
node %2425 : bv<3> = concat(%2423, %2424)
node %2426 : bv<4> = concat(%2423, %2425)
node %2427 : bv<5> = concat(%2423, %2426)
node %2428 : bv<6> = concat(%2423, %2427)
node %2429 : bv<7> = concat(%2423, %2428)
node %2430 : bv<8> = concat(%2423, %2429)
node %2431 : bv<9> = concat(%2423, %2430)
node %2432 : bv<10> = concat(%2423, %2431)
node %2433 : bv<11> = concat(%2423, %2432)
node %2434 : bv<12> = concat(%2423, %2433)
node %2435 : bv<13> = concat(%2423, %2434)
node %2436 : bv<14> = concat(%2423, %2435)
node %2437 : bv<15> = concat(%2423, %2436)
node %2438 : bv<16> = concat(%2423, %2437)
node %2439 : bv<17> = concat(%2423, %2438)
node %2440 : bv<18> = concat(%2423, %2439)
node %2441 : bv<19> = concat(%2423, %2440)
node %2442 : bv<20> = concat(%2423, %2441)
node %2443 : bv<21> = concat(%2423, %2442)
node %2444 : bv<22> = concat(%2423, %2443)
node %2445 : bv<23> = concat(%2423, %2444)
node %2446 : bv<24> = concat(%2423, %2445)
node %2447 : bv<25> = concat(%2423, %2446)
node %2448 : bv<26> = concat(%2423, %2447)
node %2449 : bv<27> = concat(%2423, %2448)
node %2450 : bv<28> = concat(%2423, %2449)
node %2451 : bv<29> = concat(%2423, %2450)
node %2452 : bv<30> = concat(%2423, %2451)
node %2453 : bv<31> = concat(%2423, %2452)
node %2454 : bv<32> = concat(%2423, %2453)
node %2455 : bv<33> = concat(%2423, %2454)
node %2456 : bv<34> = concat(%2423, %2455)
node %2457 : bv<35> = concat(%2423, %2456)
node %2458 : bv<36> = concat(%2423, %2457)
node %2459 : bv<37> = concat(%2423, %2458)
node %2460 : bv<38> = concat(%2423, %2459)
node %2461 : bv<39> = concat(%2423, %2460)
node %2462 : bv<40> = concat(%2423, %2461)
node %2463 : bv<41> = concat(%2423, %2462)
node %2464 : bv<42> = concat(%2423, %2463)
node %2465 : bv<43> = concat(%2423, %2464)
node %2466 : bv<44> = concat(%2423, %2465)
node %2467 : bv<45> = concat(%2423, %2466)
node %2468 : bv<46> = concat(%2423, %2467)
node %2469 : bv<47> = concat(%2423, %2468)
node %2470 : bv<48> = concat(%2423, %2469)
node ALU_OUT_in : bv<48> = xor(%2470, %2422)
node %2478 : bv<1> = eq(SEL_PATTERN, 5'b10001)
node %2479 : bv<32> = ite(%2478, 32'x00000001, 32'x00000000)
node %2486 : bv<1> = eq(SEL_PATTERN, 5'b01001)
node %2487 : bv<32> = ite(%2486, 32'x00000000, %2479)
node SEL_PATTERN_BIN : bv<1> = %2487[0]
node %2492 : bv<1> = not(SEL_PATTERN_BIN)
node the_pattern : bv<48> = ite(%2492, PATTERN, C_DATA_in)
node %2494 : bv<48> = xor(the_pattern, ALU_OUT_in)
node %2495 : bv<48> = not(%2494)
node %2496 : bv<48> = or(%2495, the_mask)
node pdet_o : bv<1> = eq(%2496, 48'xffffffffffff)
node PREG_BIN : bv<1> = PREG[0]
output PATTERNDETECT : bv<1> = ite(PREG_BIN, pdet_o_reg1, pdet_o)
node %2595 : bv<1> = s3[12]
node ALUMODE10_in : bv<1> = and(%1884, %2423)
node cout3 : bv<1> = xor(ALUMODE10_in, %2595)
output CARRYCASCOUT : bv<1> = ite(PREG_BIN, CCOUT_in, xor(ALUMODE10_in, cout3))
node %2570 : bv<1> = xor(%2303, %2297)
node %2571 : bv<1> = xor(%2570, %2239)
node cout0 : bv<1> = xor(ALUMODE10_in, %2571)
node %2574 : bv<2> = ALUMODE_DATA[3:2]
node %2575 : bv<1> = eq(%2574, 2'b00)
node %2576 : bv<1> = not(%2575)
node %2577 : bv<4> = OPMODE_mux[3:0]
node %2578 : bv<1> = eq(%2577, 4'b0101)
node mult_or_logic : bv<1> = or(%2578, %2576)
node cout_0 : bv<1> = ite(mult_or_logic, 1'b0, cout0)
node %2581 : bv<1> = ite(%2237, cout_0, 1'b0)
node %2582 : bv<1> = xor(%2315, %2310)
node %2583 : bv<1> = xor(%2582, %2244)
node cout1 : bv<1> = xor(ALUMODE10_in, %2583)
node cout_1 : bv<1> = ite(mult_or_logic, 1'b0, cout1)
node %2586 : bv<1> = not(%2196)
node %2587 : bv<1> = ite(%2586, cout_1, 1'b0)
node %2588 : bv<2> = concat(%2587, %2581)
node %2589 : bv<1> = xor(%2330, %2322)
node %2590 : bv<1> = xor(%2589, %2249)
node cout2 : bv<1> = xor(ALUMODE10_in, %2590)
node cout_2 : bv<1> = ite(mult_or_logic, 1'b0, cout2)
node %2593 : bv<1> = ite(%2237, cout_2, 1'b0)
node %2594 : bv<3> = concat(%2593, %2588)
node COUT_in : bv<4> = concat(cout3, %2594)
output CARRYOUT : bv<4> = ite(PREG_BIN, COUT_reg, COUT_in)
node MULTSIGN_ALU_in : bv<1> = s3[13]
output MULTSIGNOUT : bv<1> = ite(PREG_BIN, MULTSIGN_ALU_reg, MULTSIGN_ALU_in)
node %2564 : bv<48> = or(%2494, the_mask)
node pdetb_o : bv<1> = eq(%2564, 48'xffffffffffff)
output PATTERNBDETECT : bv<1> = ite(PREG_BIN, pdetb_o_reg1, pdetb_o)
node overflow_data : bv<1> = ite(PREG_BIN, pdet_o_reg2, pdet_o)
node %2499 : bv<1> = not(PATTERNDETECT)
node %2818 : bv<1> = and(%2499, not(PATTERNBDETECT))
output OVERFLOW : bv<1> = ite(USE_PATTERN_DETECT_BIN, and(%2818, overflow_data), 1'b0)
output PCOUT : bv<48> = ite(PREG_BIN, P_FDBK_in, ALU_OUT_in)
output UNDERFLOW : bv<1> = ite(USE_PATTERN_DETECT_BIN, and(%2818, ite(PREG_BIN, pdetb_o_reg2, pdetb_o)), 1'b0)
node %2607 : bv<1> = s[11]
node %2608 : bv<1> = s[10]
node %2609 : bv<1> = s[9]
node %2610 : bv<1> = s[8]
node %2611 : bv<1> = s[7]
node %2612 : bv<1> = s[6]
node %2613 : bv<1> = xor(%2612, %2611)
node %2614 : bv<1> = xor(%2613, %2610)
node %2615 : bv<1> = xor(%2614, %2609)
node %2616 : bv<1> = xor(%2615, %2608)
node %2617 : bv<1> = xor(%2616, %2607)
node %2618 : bv<32> = concat(31'x00000000, %2617)
node %2625 : bv<1> = eq(USE_WIDEXOR, 5'b11000)
node %2626 : bv<32> = ite(%2625, 32'x00000001, 32'x00000000)
node %2633 : bv<1> = eq(USE_WIDEXOR, 5'b01101)
node %2634 : bv<32> = ite(%2633, 32'x00000000, %2626)
node USE_WIDEXOR_BIN : bv<1> = %2634[0]
node %2636 : bv<32> = ite(USE_WIDEXOR_BIN, %2618, 32'x00000000)
node xor_12b : bv<1> = %2636[0]
node %2639 : bv<1> = s[5]
node %2640 : bv<1> = s[4]
node %2641 : bv<1> = s[3]
node %2642 : bv<1> = s[2]
node %2643 : bv<1> = s[1]
node %2644 : bv<1> = s[0]
node %2645 : bv<1> = xor(%2644, %2643)
node %2646 : bv<1> = xor(%2645, %2642)
node %2647 : bv<1> = xor(%2646, %2641)
node %2648 : bv<1> = xor(%2647, %2640)
node %2649 : bv<1> = xor(%2648, %2639)
node %2650 : bv<32> = concat(31'x00000000, %2649)
node %2651 : bv<32> = ite(USE_WIDEXOR_BIN, %2650, 32'x00000000)
node xor_12a : bv<1> = %2651[0]
node xor_24a : bv<1> = xor(xor_12a, xor_12b)
node %2660 : bv<1> = eq(XORSIMD, 5'b11010)
node %2661 : bv<32> = ite(%2660, 32'x00000001, 32'x00000000)
node %2668 : bv<1> = eq(XORSIMD, 5'b01110)
node %2669 : bv<32> = ite(%2668, 32'x00000000, %2661)
node XORSIMD_BIN : bv<1> = %2669[0]
node %2671 : bv<1> = ite(XORSIMD_BIN, xor_12a, xor_24a)
node %2673 : bv<1> = s[23]
node %2674 : bv<1> = s[22]
node %2675 : bv<1> = s[21]
node %2676 : bv<1> = s[20]
node %2677 : bv<1> = s[19]
node %2678 : bv<1> = s[18]
node %2679 : bv<1> = xor(%2678, %2677)
node %2680 : bv<1> = xor(%2679, %2676)
node %2681 : bv<1> = xor(%2680, %2675)
node %2682 : bv<1> = xor(%2681, %2674)
node %2683 : bv<1> = xor(%2682, %2673)
node %2684 : bv<32> = concat(31'x00000000, %2683)
node %2685 : bv<32> = ite(USE_WIDEXOR_BIN, %2684, 32'x00000000)
node xor_12d : bv<1> = %2685[0]
node %2688 : bv<1> = s[17]
node %2689 : bv<1> = s[16]
node %2690 : bv<1> = s[15]
node %2691 : bv<1> = s[14]
node %2692 : bv<1> = s[13]
node %2693 : bv<1> = s[12]
node %2694 : bv<1> = xor(%2693, %2692)
node %2695 : bv<1> = xor(%2694, %2691)
node %2696 : bv<1> = xor(%2695, %2690)
node %2697 : bv<1> = xor(%2696, %2689)
node %2698 : bv<1> = xor(%2697, %2688)
node %2699 : bv<32> = concat(31'x00000000, %2698)
node %2700 : bv<32> = ite(USE_WIDEXOR_BIN, %2699, 32'x00000000)
node xor_12c : bv<1> = %2700[0]
node xor_24b : bv<1> = xor(xor_12c, xor_12d)
node xor_48a : bv<1> = xor(xor_24a, xor_24b)
node %2704 : bv<1> = ite(XORSIMD_BIN, xor_12b, xor_48a)
node %2705 : bv<2> = concat(%2704, %2671)
node %2706 : bv<1> = ite(XORSIMD_BIN, xor_12c, xor_24b)
node %2707 : bv<3> = concat(%2706, %2705)
node %2709 : bv<1> = s[47]
node %2710 : bv<1> = s[46]
node %2711 : bv<1> = s[45]
node %2712 : bv<1> = s[44]
node %2713 : bv<1> = s[43]
node %2714 : bv<1> = s[42]
node %2715 : bv<1> = xor(%2714, %2713)
node %2716 : bv<1> = xor(%2715, %2712)
node %2717 : bv<1> = xor(%2716, %2711)
node %2718 : bv<1> = xor(%2717, %2710)
node %2719 : bv<1> = xor(%2718, %2709)
node %2720 : bv<32> = concat(31'x00000000, %2719)
node %2721 : bv<32> = ite(USE_WIDEXOR_BIN, %2720, 32'x00000000)
node xor_12h : bv<1> = %2721[0]
node %2724 : bv<1> = s[41]
node %2725 : bv<1> = s[40]
node %2726 : bv<1> = s[39]
node %2727 : bv<1> = s[38]
node %2728 : bv<1> = s[37]
node %2729 : bv<1> = s[36]
node %2730 : bv<1> = xor(%2729, %2728)
node %2731 : bv<1> = xor(%2730, %2727)
node %2732 : bv<1> = xor(%2731, %2726)
node %2733 : bv<1> = xor(%2732, %2725)
node %2734 : bv<1> = xor(%2733, %2724)
node %2735 : bv<32> = concat(31'x00000000, %2734)
node %2736 : bv<32> = ite(USE_WIDEXOR_BIN, %2735, 32'x00000000)
node xor_12g : bv<1> = %2736[0]
node xor_24d : bv<1> = xor(xor_12g, xor_12h)
node %2740 : bv<1> = s[35]
node %2741 : bv<1> = s[34]
node %2742 : bv<1> = s[33]
node %2743 : bv<1> = s[32]
node %2744 : bv<1> = s[31]
node %2745 : bv<1> = s[30]
node %2746 : bv<1> = xor(%2745, %2744)
node %2747 : bv<1> = xor(%2746, %2743)
node %2748 : bv<1> = xor(%2747, %2742)
node %2749 : bv<1> = xor(%2748, %2741)
node %2750 : bv<1> = xor(%2749, %2740)
node %2751 : bv<32> = concat(31'x00000000, %2750)
node %2752 : bv<32> = ite(USE_WIDEXOR_BIN, %2751, 32'x00000000)
node xor_12f : bv<1> = %2752[0]
node %2755 : bv<1> = s[29]
node %2756 : bv<1> = s[28]
node %2757 : bv<1> = s[27]
node %2758 : bv<1> = s[26]
node %2759 : bv<1> = s[25]
node %2760 : bv<1> = s[24]
node %2761 : bv<1> = xor(%2760, %2759)
node %2762 : bv<1> = xor(%2761, %2758)
node %2763 : bv<1> = xor(%2762, %2757)
node %2764 : bv<1> = xor(%2763, %2756)
node %2765 : bv<1> = xor(%2764, %2755)
node %2766 : bv<32> = concat(31'x00000000, %2765)
node %2767 : bv<32> = ite(USE_WIDEXOR_BIN, %2766, 32'x00000000)
node xor_12e : bv<1> = %2767[0]
node xor_24c : bv<1> = xor(xor_12e, xor_12f)
node xor_48b : bv<1> = xor(xor_24c, xor_24d)
node xor_96 : bv<1> = xor(xor_48a, xor_48b)
node %2772 : bv<1> = ite(XORSIMD_BIN, xor_12d, xor_96)
node %2773 : bv<4> = concat(%2772, %2707)
node %2774 : bv<1> = ite(XORSIMD_BIN, xor_12e, xor_24c)
node %2775 : bv<5> = concat(%2774, %2773)
node %2776 : bv<1> = ite(XORSIMD_BIN, xor_12f, xor_48b)
node %2777 : bv<6> = concat(%2776, %2775)
node %2778 : bv<1> = ite(XORSIMD_BIN, xor_12g, xor_24d)
node %2779 : bv<7> = concat(%2778, %2777)
node XOR_MX_in : bv<8> = concat(xor_12h, %2779)
output XOROUT : bv<8> = ite(PREG_BIN, XOR_MX_reg, XOR_MX_in)
output ACOUT : bv<30> = ite(eq(ACASCREG[1:0], AREG_BIN), A_ALU, A1_reg)
output BCOUT : bv<18> = ite(eq(BCASCREG[1:0], BREG_BIN), B2_DATA, B1_DATA_out)
node %1032 : bv<1> = and(CEP, PREG_BIN)
node auto_reset_pri : bv<1> = or(not(ite(eq(AUTORESET_PRIORITY, 5'b00110), 32'x00000000, ite(eq(AUTORESET_PRIORITY, 5'b10000), 32'x00000001, 32'x00000000))[0]), CEP)
node AUTORESET_PATDET_BIN : bv<2> = ite(eq(AUTORESET_PATDET, 5'b00011), 32'x00000000, ite(eq(AUTORESET_PATDET, 5'b00100), 32'x00000001, ite(eq(AUTORESET_PATDET, 5'b00101), 32'x00000002, 32'x00000000)))[1:0]
node %2560 : bv<1> = or(xor(RSTP, IS_RSTP_INVERTED), ite(eq(AUTORESET_PATDET_BIN, 2'b01), and(auto_reset_pri, PATTERNDETECT), ite(eq(AUTORESET_PATDET_BIN, 2'b10), and(and(auto_reset_pri, overflow_data), %2499), 1'b0)))
node RSTCTRL_in : bv<1> = xor(RSTCTRL, IS_RSTCTRL_INVERTED)
node RSTB_in : bv<1> = xor(RSTB, IS_RSTB_INVERTED)
node %1051 : bv<1> = or(xor(RSTA, IS_RSTA_INVERTED), %247)
node RSTD_in : bv<1> = xor(RSTD, IS_RSTD_INVERTED)
node %2785 : bv<1> = or(xor(RSTM, IS_RSTM_INVERTED), not(MREG_BIN))
node RSTALLCARRYIN_in : bv<1> = xor(RSTALLCARRYIN, IS_RSTALLCARRYIN_INVERTED)
state ALUMODE_reg : bv<4>
  [next] ite(xor(RSTALUMODE, IS_RSTALUMODE_INVERTED), 4'b0000, ite(CEALUMODE, ALUMODE_in, ALUMODE_reg))
state P_FDBK_in : bv<48>
  [next] ite(%2560, 48'x000000000000, ite(%1032, ALU_OUT_in, P_FDBK_in))
state OPMODE_reg : bv<9>
  [next] ite(RSTCTRL_in, 9'x000, ite(CECTRL, OPMODE_in, OPMODE_reg))
state C_reg : bv<48>
  [next] ite(or(xor(RSTC, IS_RSTC_INVERTED), not(CREG_BIN)), 48'x000000000000, ite(CEC, C, C_reg))
state B2_reg : bv<18>
  [next] ite(RSTB_in, 18'x00000, ite(CEB2, ite(eq(BREG_BIN, 2'b10), B1_DATA_out, _procmux_557), B2_reg))
state A2_reg : bv<30>
  [next] ite(%1051, 30'x00000000, ite(CEA2, ite(eq(AREG_BIN, 2'b10), A1_reg, _procmux_576), A2_reg))
state D_DATA_reg : bv<27>
  [next] ite(or(RSTD_in, not(DREG_INT)), 27'x0000000, ite(CED, D, D_DATA_reg))
state INMODE_reg : bv<5>
  [next] ite(or(xor(RSTINMODE, IS_RSTINMODE_INVERTED), not(INMODEREG_BIN)), 5'b00000, ite(CEINMODE, INMODE_in, INMODE_reg))
state A1_reg : bv<30>
  [next] ite(%1051, 30'x00000000, ite(CEA1, _procmux_576, A1_reg))
state B1_DATA_out : bv<18>
  [next] ite(or(RSTB_in, %233), 18'x00000, ite(CEB1, _procmux_557, B1_DATA_out))
state AD_DATA_reg : bv<27>
  [next] ite(RSTD_in, 27'x0000000, ite(CEAD, AD_in, AD_DATA_reg))
state U_DATA_reg : bv<45>
  [next] ite(%2785, 45'x000000000000, ite(CEM, U_in, U_DATA_reg))
state V_DATA_reg : bv<45>
  [next] ite(%2785, 45'x000000000000, ite(CEM, V_in, V_DATA_reg))
state XOR_MX_reg : bv<8>
  [next] ite(%2560, 8'b00000000, ite(%1032, XOR_MX_in, XOR_MX_reg))
state CARRYINSEL_reg : bv<3>
  [next] ite(RSTCTRL_in, 3'b000, ite(CECTRL, CARRYINSEL, CARRYINSEL_reg))
state qmultcarryin : bv<1>
  [next] ite(RSTALLCARRYIN_in, 32'x00000000, concat(31'x00000000, ite(CEM, c_mult, qmultcarryin)))[0]
state ALUMODE10_reg : bv<1>
  [next] ite(%2560, 1'b0, ite(%1032, ALUMODE10_in, ALUMODE10_reg))
state COUT_reg : bv<4>
  [next] ite(%2560, 4'b0000, ite(%1032, COUT_in, COUT_reg))
state CARRYIN_reg : bv<1>
  [next] ite(RSTALLCARRYIN_in, 1'b0, ite(CECARRYIN, CARRYIN_in, CARRYIN_reg))
state pdet_o_reg1 : bv<1>
  [next] ite(%2560, 1'b0, ite(%1032, pdet_o, pdet_o_reg1))
state pdetb_o_reg1 : bv<1>
  [next] ite(%2560, 1'b0, ite(%1032, pdetb_o, pdetb_o_reg1))
state pdetb_o_reg2 : bv<1>
  [next] ite(%2560, 1'b0, ite(%1032, pdetb_o_reg1, pdetb_o_reg2))
state pdet_o_reg2 : bv<1>
  [next] ite(%2560, 1'b0, ite(%1032, pdet_o_reg1, pdet_o_reg2))
state MULTSIGN_ALU_reg : bv<1>
  [next] ite(%2560, 1'b0, ite(%1032, MULTSIGN_ALU_in, MULTSIGN_ALU_reg))
