---
source: tests/btor2_test.rs
expression: sys.serialize_to_str(&ctx)
---
DSP48E2
input RSTP : bv<1>
input RSTM : bv<1>
input RSTINMODE : bv<1>
input RSTD : bv<1>
input RSTCTRL : bv<1>
input RSTC : bv<1>
input RSTB : bv<1>
input RSTALUMODE : bv<1>
input RSTALLCARRYIN : bv<1>
input RSTA : bv<1>
input PCIN : bv<48>
input OPMODE : bv<9>
input MULTSIGNIN : bv<1>
input INMODE : bv<5>
input D : bv<27>
input CLK : bv<1>
input CEP : bv<1>
input CEM : bv<1>
input CEINMODE : bv<1>
input CED : bv<1>
input CECTRL : bv<1>
input CECARRYIN : bv<1>
input CEC : bv<1>
input CEB2 : bv<1>
input CEB1 : bv<1>
input CEALUMODE : bv<1>
input CEAD : bv<1>
input CEA2 : bv<1>
input CEA1 : bv<1>
input CARRYINSEL : bv<3>
input CARRYIN : bv<1>
input CARRYCASCIN : bv<1>
input C : bv<48>
input BCIN : bv<18>
input B : bv<18>
input ALUMODE : bv<4>
input ACIN : bv<30>
input A : bv<30>
input XORSIMD : bv<5>
input USE_WIDEXOR : bv<5>
input USE_SIMD : bv<5>
input USE_PATTERN_DETECT : bv<5>
input USE_MULT : bv<5>
input SEL_PATTERN : bv<5>
input SEL_MASK : bv<5>
input RND : bv<48>
input PREG : bv<32>
input PREADDINSEL : bv<5>
input PATTERN : bv<48>
input OPMODEREG : bv<32>
input MREG : bv<32>
input MASK : bv<48>
input IS_RSTP_INVERTED : bv<1>
input IS_RSTM_INVERTED : bv<1>
input IS_RSTINMODE_INVERTED : bv<1>
input IS_RSTD_INVERTED : bv<1>
input IS_RSTC_INVERTED : bv<1>
input IS_RSTCTRL_INVERTED : bv<1>
input IS_RSTB_INVERTED : bv<1>
input IS_RSTA_INVERTED : bv<1>
input IS_RSTALUMODE_INVERTED : bv<1>
input IS_RSTALLCARRYIN_INVERTED : bv<1>
input IS_OPMODE_INVERTED : bv<9>
input IS_INMODE_INVERTED : bv<5>
input IS_CLK_INVERTED : bv<1>
input IS_CARRYIN_INVERTED : bv<1>
input IS_ALUMODE_INVERTED : bv<4>
input INMODEREG : bv<32>
input DREG : bv<32>
input CREG : bv<32>
input CARRYINSELREG : bv<32>
input CARRYINREG : bv<32>
input B_INPUT : bv<5>
input BREG : bv<32>
input BMULTSEL : bv<5>
input BCASCREG : bv<32>
input A_INPUT : bv<5>
input AUTORESET_PRIORITY : bv<5>
input AUTORESET_PATDET : bv<5>
input AREG : bv<32>
input AMULTSEL : bv<5>
input ALUMODEREG : bv<32>
input ADREG : bv<32>
input ACASCREG : bv<32>
node %8208 : bv<46> = C[45:0]
node %8207 : bv<46> = C_reg[45:0]
node CREG_BIN : bv<1> = CREG[0]
node %8209 : bv<46> = ite(CREG_BIN, %8207, %8208)
node %8210 : bv<46> = not(%8209)
node %8211 : bv<48> = concat(%8210, 2'b00)
node %8218 : bv<1> = eq(SEL_MASK, 5'b10111)
node %8252 : bv<2> = ite(%8218, 2'b11, 2'b00)
node %8226 : bv<1> = eq(SEL_MASK, 5'b10110)
node %8253 : bv<2> = ite(%8226, 2'b10, %8252)
node %8234 : bv<1> = eq(SEL_MASK, 5'b10001)
node %8254 : bv<2> = ite(%8234, 2'b01, %8253)
node %8242 : bv<1> = eq(SEL_MASK, 5'b01000)
node SEL_MASK_BIN : bv<2> = ite(%8242, 2'b00, %8254)
node %8261 : bv<1> = eq(SEL_MASK_BIN, 2'b11)
node %8262 : bv<48> = ite(%8261, %8211, MASK)
node %8264 : bv<47> = C[46:0]
node %8263 : bv<47> = C_reg[46:0]
node %8265 : bv<47> = ite(CREG_BIN, %8263, %8264)
node %8266 : bv<47> = not(%8265)
node %8267 : bv<48> = concat(%8266, 1'b0)
node %8270 : bv<1> = eq(SEL_MASK_BIN, 2'b10)
node %8271 : bv<48> = ite(%8270, %8267, %8262)
node C_DATA_in : bv<48> = ite(CREG_BIN, C_reg, C)
node %8274 : bv<1> = eq(SEL_MASK_BIN, 2'b01)
node %8275 : bv<48> = ite(%8274, C_DATA_in, %8271)
node %8282 : bv<1> = eq(USE_PATTERN_DETECT, 5'b10101)
node %8290 : bv<1> = eq(USE_PATTERN_DETECT, 5'b01011)
node %8295 : bv<1> = not(%8290)
node USE_PATTERN_DETECT_BIN : bv<1> = and(%8295, %8282)
node %8300 : bv<1> = not(USE_PATTERN_DETECT_BIN)
node the_mask : bv<48> = ite(%8300, 48'xffffffffffff, %8275)
node OPMODE_in : bv<9> = xor(OPMODE, IS_OPMODE_INVERTED)
node %1859 : bv<2> = OPMODE_in[8:7]
node %1858 : bv<2> = OPMODE_reg[8:7]
node OPMODEREG_BIN : bv<1> = OPMODEREG[0]
node %1860 : bv<2> = ite(OPMODEREG_BIN, %1858, %1859)
node _procmux_634_CMP0 : bv<1> = eq(%1860, 2'b11)
node %1862 : bv<48> = ite(_procmux_634_CMP0, C_DATA_in, 48'x000000000000)
node _procmux_635_CMP0 : bv<1> = eq(%1860, 2'b10)
node %1864 : bv<48> = ite(_procmux_635_CMP0, RND, %1862)
node _procmux_636_CMP0 : bv<1> = eq(%1860, 2'b01)
node %1866 : bv<48> = ite(_procmux_636_CMP0, P_FDBK_in, %1864)
node _procmux_637_CMP0 : bv<1> = eq(%1860, 2'b00)
node wmux : bv<48> = ite(_procmux_637_CMP0, 48'x000000000000, %1866)
node %1098 : bv<31> = P_FDBK_in[47:17]
node P_FDBK_47_in : bv<1> = P_FDBK_in[47]
node %1100 : bv<32> = concat(P_FDBK_47_in, %1098)
node %1101 : bv<33> = concat(P_FDBK_47_in, %1100)
node %1102 : bv<34> = concat(P_FDBK_47_in, %1101)
node %1103 : bv<35> = concat(P_FDBK_47_in, %1102)
node %1104 : bv<36> = concat(P_FDBK_47_in, %1103)
node %1105 : bv<37> = concat(P_FDBK_47_in, %1104)
node %1106 : bv<38> = concat(P_FDBK_47_in, %1105)
node %1107 : bv<39> = concat(P_FDBK_47_in, %1106)
node %1108 : bv<40> = concat(P_FDBK_47_in, %1107)
node %1109 : bv<41> = concat(P_FDBK_47_in, %1108)
node %1110 : bv<42> = concat(P_FDBK_47_in, %1109)
node %1111 : bv<43> = concat(P_FDBK_47_in, %1110)
node %1112 : bv<44> = concat(P_FDBK_47_in, %1111)
node %1113 : bv<45> = concat(P_FDBK_47_in, %1112)
node %1114 : bv<46> = concat(P_FDBK_47_in, %1113)
node %1115 : bv<47> = concat(P_FDBK_47_in, %1114)
node %1116 : bv<48> = concat(P_FDBK_47_in, %1115)
node %1870 : bv<2> = OPMODE_in[6:5]
node %1869 : bv<2> = OPMODE_reg[6:5]
node %1871 : bv<2> = ite(OPMODEREG_BIN, %1869, %1870)
node _procmux_616_CMP0 : bv<1> = eq(%1871, 2'b11)
node %1873 : bv<48> = ite(_procmux_616_CMP0, %1116, 48'x000000000000)
node %170 : bv<31> = PCIN[47:17]
node %171 : bv<1> = PCIN[47]
node %172 : bv<32> = concat(%171, %170)
node %173 : bv<33> = concat(%171, %172)
node %174 : bv<34> = concat(%171, %173)
node %175 : bv<35> = concat(%171, %174)
node %176 : bv<36> = concat(%171, %175)
node %177 : bv<37> = concat(%171, %176)
node %178 : bv<38> = concat(%171, %177)
node %179 : bv<39> = concat(%171, %178)
node %180 : bv<40> = concat(%171, %179)
node %181 : bv<41> = concat(%171, %180)
node %182 : bv<42> = concat(%171, %181)
node %183 : bv<43> = concat(%171, %182)
node %184 : bv<44> = concat(%171, %183)
node %185 : bv<45> = concat(%171, %184)
node %186 : bv<46> = concat(%171, %185)
node %187 : bv<47> = concat(%171, %186)
node %188 : bv<48> = concat(%171, %187)
node %1875 : bv<3> = OPMODE_in[6:4]
node %1874 : bv<3> = OPMODE_reg[6:4]
node %1876 : bv<3> = ite(OPMODEREG_BIN, %1874, %1875)
node _procmux_617_CMP0 : bv<1> = eq(%1876, 3'b101)
node %1878 : bv<48> = ite(_procmux_617_CMP0, %188, %1873)
node _procmux_618_CMP0 : bv<1> = eq(%1876, 3'b100)
node %1880 : bv<48> = ite(_procmux_618_CMP0, P_FDBK_in, %1878)
node _procmux_619_CMP0 : bv<1> = eq(%1876, 3'b011)
node %1882 : bv<48> = ite(_procmux_619_CMP0, C_DATA_in, %1880)
node _procmux_620_CMP0 : bv<1> = eq(%1876, 3'b010)
node %1884 : bv<48> = ite(_procmux_620_CMP0, P_FDBK_in, %1882)
node _procmux_621_CMP0 : bv<1> = eq(%1876, 3'b001)
node %1886 : bv<48> = ite(_procmux_621_CMP0, PCIN, %1884)
node _procmux_622_CMP0 : bv<1> = eq(%1876, 3'b000)
node zmux : bv<48> = ite(_procmux_622_CMP0, 48'x000000000000, %1886)
node ALUMODE_in : bv<4> = xor(ALUMODE, IS_ALUMODE_INVERTED)
node %1891 : bv<1> = ALUMODE_in[0]
node %1890 : bv<1> = ALUMODE_reg[0]
node ALUMODEREG_BIN : bv<1> = ALUMODEREG[0]
node %1892 : bv<1> = ite(ALUMODEREG_BIN, %1890, %1891)
node %1893 : bv<2> = concat(%1892, %1892)
node %1894 : bv<3> = concat(%1892, %1893)
node %1895 : bv<4> = concat(%1892, %1894)
node %1896 : bv<5> = concat(%1892, %1895)
node %1897 : bv<6> = concat(%1892, %1896)
node %1898 : bv<7> = concat(%1892, %1897)
node %1899 : bv<8> = concat(%1892, %1898)
node %1900 : bv<9> = concat(%1892, %1899)
node %1901 : bv<10> = concat(%1892, %1900)
node %1902 : bv<11> = concat(%1892, %1901)
node %1903 : bv<12> = concat(%1892, %1902)
node %1904 : bv<13> = concat(%1892, %1903)
node %1905 : bv<14> = concat(%1892, %1904)
node %1906 : bv<15> = concat(%1892, %1905)
node %1907 : bv<16> = concat(%1892, %1906)
node %1908 : bv<17> = concat(%1892, %1907)
node %1909 : bv<18> = concat(%1892, %1908)
node %1910 : bv<19> = concat(%1892, %1909)
node %1911 : bv<20> = concat(%1892, %1910)
node %1912 : bv<21> = concat(%1892, %1911)
node %1913 : bv<22> = concat(%1892, %1912)
node %1914 : bv<23> = concat(%1892, %1913)
node %1915 : bv<24> = concat(%1892, %1914)
node %1916 : bv<25> = concat(%1892, %1915)
node %1917 : bv<26> = concat(%1892, %1916)
node %1918 : bv<27> = concat(%1892, %1917)
node %1919 : bv<28> = concat(%1892, %1918)
node %1920 : bv<29> = concat(%1892, %1919)
node %1921 : bv<30> = concat(%1892, %1920)
node %1922 : bv<31> = concat(%1892, %1921)
node %1923 : bv<32> = concat(%1892, %1922)
node %1924 : bv<33> = concat(%1892, %1923)
node %1925 : bv<34> = concat(%1892, %1924)
node %1926 : bv<35> = concat(%1892, %1925)
node %1927 : bv<36> = concat(%1892, %1926)
node %1928 : bv<37> = concat(%1892, %1927)
node %1929 : bv<38> = concat(%1892, %1928)
node %1930 : bv<39> = concat(%1892, %1929)
node %1931 : bv<40> = concat(%1892, %1930)
node %1932 : bv<41> = concat(%1892, %1931)
node %1933 : bv<42> = concat(%1892, %1932)
node %1934 : bv<43> = concat(%1892, %1933)
node %1935 : bv<44> = concat(%1892, %1934)
node %1936 : bv<45> = concat(%1892, %1935)
node %1937 : bv<46> = concat(%1892, %1936)
node %1938 : bv<47> = concat(%1892, %1937)
node %1939 : bv<48> = concat(%1892, %1938)
node z_optinv : bv<48> = xor(%1939, zmux)
node %1947 : bv<1> = eq(B_INPUT, 5'b01111)
node %1955 : bv<1> = eq(B_INPUT, 5'b00111)
node %1962 : bv<1> = not(%1955)
node B_INPUT_BIN : bv<1> = and(%1962, %1947)
node _procmux_557 : bv<18> = ite(B_INPUT_BIN, BCIN, B)
node BREG_BIN : bv<2> = BREG[1:0]
node %233 : bv<1> = eq(BREG_BIN, 2'b00)
node %234 : bv<1> = not(%233)
node B2_DATA : bv<18> = ite(%234, B2_reg, _procmux_557)
node %1973 : bv<1> = eq(A_INPUT, 5'b01111)
node %1977 : bv<1> = eq(A_INPUT, 5'b00111)
node %1982 : bv<1> = not(%1977)
node A_INPUT_BIN : bv<1> = and(%1982, %1973)
node _procmux_576 : bv<30> = ite(A_INPUT_BIN, ACIN, A)
node AREG_BIN : bv<2> = AREG[1:0]
node %247 : bv<1> = eq(AREG_BIN, 2'b00)
node %248 : bv<1> = not(%247)
node A_ALU : bv<30> = ite(%248, A2_reg, _procmux_576)
node %1989 : bv<48> = concat(A_ALU, B2_DATA)
node %1991 : bv<2> = OPMODE_in[1:0]
node %1990 : bv<2> = OPMODE_reg[1:0]
node %1992 : bv<2> = ite(OPMODEREG_BIN, %1990, %1991)
node _procmux_629_CMP0 : bv<1> = eq(%1992, 2'b11)
node %1994 : bv<48> = ite(_procmux_629_CMP0, %1989, 48'x000000000000)
node _procmux_630_CMP0 : bv<1> = eq(%1992, 2'b10)
node %1996 : bv<48> = ite(_procmux_630_CMP0, P_FDBK_in, %1994)
node %2001 : bv<27> = A[26:0]
node %2000 : bv<27> = ACIN[26:0]
node %2002 : bv<27> = ite(A_INPUT_BIN, %2000, %2001)
node %1997 : bv<27> = A2_reg[26:0]
node %2003 : bv<27> = ite(%248, %1997, %2002)
node %316 : bv<27> = A1_reg[26:0]
node INMODE_in : bv<5> = xor(INMODE, IS_INMODE_INVERTED)
node %2006 : bv<1> = INMODE_in[0]
node %2005 : bv<1> = INMODE_reg[0]
node INMODEREG_BIN : bv<1> = INMODEREG[0]
node %2007 : bv<1> = ite(INMODEREG_BIN, %2005, %2006)
node _procmux_462 : bv<27> = ite(%2007, %316, %2003)
node %2010 : bv<1> = INMODE_in[1]
node %2009 : bv<1> = INMODE_reg[1]
node %2011 : bv<1> = ite(INMODEREG_BIN, %2009, %2010)
node %2018 : bv<1> = eq(PREADDINSEL, 5'b00001)
node %2025 : bv<1> = eq(PREADDINSEL, 5'b00000)
node %2030 : bv<1> = not(%2025)
node PREADDINSEL_BIN : bv<1> = and(%2030, %2018)
node %2037 : bv<1> = not(PREADDINSEL_BIN)
node %2038 : bv<1> = and(%2037, %2011)
node _procmux_465 : bv<27> = ite(%2038, 27'x0000000, _procmux_462)
node A2A1 : bv<27> = ite(%2038, 27'x0000000, _procmux_465)
node %2042 : bv<1> = INMODE_in[4]
node %2041 : bv<1> = INMODE_reg[4]
node %2043 : bv<1> = ite(INMODEREG_BIN, %2041, %2042)
node _procmux_453 : bv<18> = ite(%2043, B1_DATA_out, B2_DATA)
node %2047 : bv<1> = and(PREADDINSEL_BIN, %2011)
node _procmux_456 : bv<18> = ite(%2047, 18'x00000, _procmux_453)
node B2B1 : bv<18> = ite(%2047, 18'x00000, _procmux_456)
node %2062 : bv<1> = B[17]
node %2061 : bv<1> = BCIN[17]
node %2063 : bv<1> = ite(B_INPUT_BIN, %2061, %2062)
node %2058 : bv<1> = B2_reg[17]
node %2064 : bv<1> = ite(%234, %2058, %2063)
node %2055 : bv<1> = B1_DATA_out[17]
node %2065 : bv<1> = ite(%2043, %2055, %2064)
node %2066 : bv<1> = not(%2047)
node %2067 : bv<1> = and(%2066, %2065)
node %2068 : bv<1> = and(%2066, %2067)
node %2069 : bv<19> = concat(%2068, B2B1)
node %2070 : bv<20> = concat(%2068, %2069)
node %2071 : bv<21> = concat(%2068, %2070)
node %2072 : bv<22> = concat(%2068, %2071)
node %2073 : bv<23> = concat(%2068, %2072)
node %2074 : bv<24> = concat(%2068, %2073)
node %2075 : bv<25> = concat(%2068, %2074)
node %2076 : bv<26> = concat(%2068, %2075)
node %2077 : bv<27> = concat(%2068, %2076)
node PREADD_AB : bv<27> = ite(PREADDINSEL_BIN, %2077, A2A1)
node DREG_BIN : bv<1> = DREG[0]
node %2085 : bv<1> = eq(USE_MULT, 5'b10100)
node %2111 : bv<2> = ite(%2085, 2'b10, 2'b00)
node %2093 : bv<1> = eq(USE_MULT, 5'b10010)
node %2112 : bv<2> = ite(%2093, 2'b01, %2111)
node %2101 : bv<1> = eq(USE_MULT, 5'b01010)
node USE_MULT_BIN : bv<2> = ite(%2101, 2'b00, %2112)
node %2119 : bv<1> = eq(USE_MULT_BIN, 2'b10)
node %2126 : bv<1> = eq(BMULTSEL, 5'b00010)
node %2134 : bv<1> = eq(BMULTSEL, 5'b00001)
node %2139 : bv<1> = not(%2134)
node BMULTSEL_BIN : bv<1> = and(%2139, %2126)
node %2147 : bv<1> = eq(AMULTSEL, 5'b00010)
node %2155 : bv<1> = eq(AMULTSEL, 5'b00000)
node %2160 : bv<1> = not(%2155)
node AMULTSEL_BIN : bv<1> = and(%2160, %2147)
node %2166 : bv<1> = or(AMULTSEL_BIN, BMULTSEL_BIN)
node %2167 : bv<1> = or(%2166, %2119)
node %2168 : bv<1> = not(%2167)
node DREG_INT : bv<1> = and(%2168, DREG_BIN)
node D_DATA : bv<27> = ite(DREG_INT, D_DATA_reg, D)
node %2172 : bv<1> = INMODE_in[2]
node %2171 : bv<1> = INMODE_reg[2]
node %2173 : bv<1> = ite(INMODEREG_BIN, %2171, %2172)
node D_DATA_mux : bv<27> = ite(%2173, D_DATA, 27'x0000000)
node %2175 : bv<27> = add(D_DATA_mux, PREADD_AB)
node %2187 : bv<18> = %2175[17:0]
node %2176 : bv<27> = sub(D_DATA_mux, PREADD_AB)
node %2186 : bv<18> = %2176[17:0]
node %2178 : bv<1> = INMODE_in[3]
node %2177 : bv<1> = INMODE_reg[3]
node %2179 : bv<1> = ite(INMODEREG_BIN, %2177, %2178)
node %2188 : bv<18> = ite(%2179, %2186, %2187)
node %2183 : bv<18> = AD_DATA_reg[17:0]
node ADREG_BIN : bv<1> = ADREG[0]
node ADREG_INT : bv<1> = and(%2168, ADREG_BIN)
node %2189 : bv<18> = ite(ADREG_INT, %2183, %2188)
node %2144 : bv<1> = not(BMULTSEL_BIN)
node b_mult_mux : bv<18> = ite(%2144, B2B1, %2189)
node %2200 : bv<1> = %2175[17]
node %2201 : bv<1> = %2176[17]
node %2202 : bv<1> = ite(%2179, %2201, %2200)
node %2203 : bv<1> = AD_DATA_reg[17]
node %2204 : bv<1> = ite(ADREG_INT, %2203, %2202)
node BMULT17_in : bv<1> = ite(%2144, %2068, %2204)
node %2206 : bv<19> = concat(BMULT17_in, b_mult_mux)
node %2207 : bv<20> = concat(BMULT17_in, %2206)
node %2208 : bv<21> = concat(BMULT17_in, %2207)
node %2209 : bv<22> = concat(BMULT17_in, %2208)
node %2210 : bv<23> = concat(BMULT17_in, %2209)
node %2211 : bv<24> = concat(BMULT17_in, %2210)
node %2212 : bv<25> = concat(BMULT17_in, %2211)
node %2213 : bv<26> = concat(BMULT17_in, %2212)
node %2214 : bv<27> = concat(BMULT17_in, %2213)
node %2215 : bv<28> = concat(BMULT17_in, %2214)
node %2216 : bv<29> = concat(BMULT17_in, %2215)
node %2217 : bv<30> = concat(BMULT17_in, %2216)
node %2218 : bv<31> = concat(BMULT17_in, %2217)
node %2219 : bv<32> = concat(BMULT17_in, %2218)
node %2220 : bv<33> = concat(BMULT17_in, %2219)
node %2221 : bv<34> = concat(BMULT17_in, %2220)
node %2222 : bv<35> = concat(BMULT17_in, %2221)
node %2223 : bv<36> = concat(BMULT17_in, %2222)
node %2224 : bv<37> = concat(BMULT17_in, %2223)
node %2225 : bv<38> = concat(BMULT17_in, %2224)
node %2226 : bv<39> = concat(BMULT17_in, %2225)
node %2227 : bv<40> = concat(BMULT17_in, %2226)
node %2228 : bv<41> = concat(BMULT17_in, %2227)
node %2229 : bv<42> = concat(BMULT17_in, %2228)
node %2230 : bv<43> = concat(BMULT17_in, %2229)
node %2231 : bv<44> = concat(BMULT17_in, %2230)
node %2232 : bv<45> = concat(BMULT17_in, %2231)
node AD_in : bv<27> = ite(%2179, %2176, %2175)
node AD_DATA : bv<27> = ite(ADREG_INT, AD_DATA_reg, AD_in)
node %2165 : bv<1> = not(AMULTSEL_BIN)
node a_mult_mux : bv<27> = ite(%2165, A2A1, AD_DATA)
node %2241 : bv<1> = %2175[26]
node %2240 : bv<1> = %2176[26]
node %2242 : bv<1> = ite(%2179, %2240, %2241)
node %2237 : bv<1> = AD_DATA_reg[26]
node %2243 : bv<1> = ite(ADREG_INT, %2237, %2242)
node %2258 : bv<1> = A[26]
node %2259 : bv<1> = ACIN[26]
node %2260 : bv<1> = ite(A_INPUT_BIN, %2259, %2258)
node %2261 : bv<1> = A2_reg[26]
node %2262 : bv<1> = ite(%248, %2261, %2260)
node %2263 : bv<1> = A1_reg[26]
node %2264 : bv<1> = ite(%2007, %2263, %2262)
node %2265 : bv<1> = not(%2038)
node %2266 : bv<1> = and(%2265, %2264)
node %2267 : bv<1> = and(%2265, %2266)
node AMULT26_in : bv<1> = ite(%2165, %2267, %2243)
node %2269 : bv<28> = concat(AMULT26_in, a_mult_mux)
node %2270 : bv<29> = concat(AMULT26_in, %2269)
node %2271 : bv<30> = concat(AMULT26_in, %2270)
node %2272 : bv<31> = concat(AMULT26_in, %2271)
node %2273 : bv<32> = concat(AMULT26_in, %2272)
node %2274 : bv<33> = concat(AMULT26_in, %2273)
node %2275 : bv<34> = concat(AMULT26_in, %2274)
node %2276 : bv<35> = concat(AMULT26_in, %2275)
node %2277 : bv<36> = concat(AMULT26_in, %2276)
node %2278 : bv<37> = concat(AMULT26_in, %2277)
node %2279 : bv<38> = concat(AMULT26_in, %2278)
node %2280 : bv<39> = concat(AMULT26_in, %2279)
node %2281 : bv<40> = concat(AMULT26_in, %2280)
node %2282 : bv<41> = concat(AMULT26_in, %2281)
node %2283 : bv<42> = concat(AMULT26_in, %2282)
node %2284 : bv<43> = concat(AMULT26_in, %2283)
node %2285 : bv<44> = concat(AMULT26_in, %2284)
node %2286 : bv<45> = concat(AMULT26_in, %2285)
node %2287 : bv<45> = mul(%2286, %2232)
node %2362 : bv<1> = %2287[0]
node %2363 : bv<1> = not(%2119)
node %2364 : bv<1> = and(%2363, %2362)
node %5095 : bv<2> = concat(1'b0, %2364)
node %2368 : bv<1> = %2287[2]
node %2369 : bv<1> = and(%2363, %2368)
node %5096 : bv<3> = concat(%2369, %5095)
node %5097 : bv<4> = concat(1'b0, %5096)
node %2373 : bv<1> = %2287[4]
node %2374 : bv<1> = and(%2363, %2373)
node %5098 : bv<5> = concat(%2374, %5097)
node %5099 : bv<6> = concat(1'b0, %5098)
node %2378 : bv<1> = %2287[6]
node %2379 : bv<1> = and(%2363, %2378)
node %5100 : bv<7> = concat(%2379, %5099)
node %5101 : bv<8> = concat(1'b0, %5100)
node %2383 : bv<1> = %2287[8]
node %2384 : bv<1> = and(%2363, %2383)
node %5102 : bv<9> = concat(%2384, %5101)
node %5103 : bv<10> = concat(1'b0, %5102)
node %2388 : bv<1> = %2287[10]
node %2389 : bv<1> = and(%2363, %2388)
node %5104 : bv<11> = concat(%2389, %5103)
node %5105 : bv<12> = concat(1'b0, %5104)
node %2393 : bv<1> = %2287[12]
node %2394 : bv<1> = and(%2363, %2393)
node %5106 : bv<13> = concat(%2394, %5105)
node %5107 : bv<14> = concat(1'b0, %5106)
node %2398 : bv<1> = %2287[14]
node %2399 : bv<1> = and(%2363, %2398)
node %5108 : bv<15> = concat(%2399, %5107)
node %5109 : bv<16> = concat(1'b0, %5108)
node %2403 : bv<1> = %2287[16]
node %2404 : bv<1> = and(%2363, %2403)
node %5110 : bv<17> = concat(%2404, %5109)
node %5111 : bv<18> = concat(1'b0, %5110)
node %2408 : bv<1> = %2287[18]
node %2409 : bv<1> = and(%2363, %2408)
node %5112 : bv<19> = concat(%2409, %5111)
node %5113 : bv<20> = concat(1'b0, %5112)
node %2413 : bv<1> = %2287[20]
node %2414 : bv<1> = and(%2363, %2413)
node %5114 : bv<21> = concat(%2414, %5113)
node %5115 : bv<22> = concat(1'b0, %5114)
node %2418 : bv<1> = %2287[22]
node %2419 : bv<1> = and(%2363, %2418)
node %5116 : bv<23> = concat(%2419, %5115)
node %5117 : bv<24> = concat(1'b0, %5116)
node %2423 : bv<1> = %2287[24]
node %2424 : bv<1> = and(%2363, %2423)
node %5118 : bv<25> = concat(%2424, %5117)
node %5119 : bv<26> = concat(1'b0, %5118)
node %2428 : bv<1> = %2287[26]
node %2429 : bv<1> = and(%2363, %2428)
node %5120 : bv<27> = concat(%2429, %5119)
node %5121 : bv<28> = concat(1'b0, %5120)
node %2433 : bv<1> = %2287[28]
node %2434 : bv<1> = and(%2363, %2433)
node %5122 : bv<29> = concat(%2434, %5121)
node %5123 : bv<30> = concat(1'b0, %5122)
node %2438 : bv<1> = %2287[30]
node %2439 : bv<1> = and(%2363, %2438)
node %5124 : bv<31> = concat(%2439, %5123)
node %5125 : bv<32> = concat(1'b0, %5124)
node %2443 : bv<1> = %2287[32]
node %2444 : bv<1> = and(%2363, %2443)
node %5126 : bv<33> = concat(%2444, %5125)
node %5127 : bv<34> = concat(1'b0, %5126)
node %2448 : bv<1> = %2287[34]
node %2449 : bv<1> = and(%2363, %2448)
node %5128 : bv<35> = concat(%2449, %5127)
node %5129 : bv<36> = concat(1'b0, %5128)
node %2453 : bv<1> = %2287[36]
node %2454 : bv<1> = and(%2363, %2453)
node %5130 : bv<37> = concat(%2454, %5129)
node %5131 : bv<38> = concat(1'b0, %5130)
node %2458 : bv<1> = %2287[38]
node %2459 : bv<1> = and(%2363, %2458)
node %5132 : bv<39> = concat(%2459, %5131)
node %5133 : bv<40> = concat(1'b0, %5132)
node %2463 : bv<1> = %2287[40]
node %2464 : bv<1> = and(%2363, %2463)
node %5134 : bv<41> = concat(%2464, %5133)
node %5135 : bv<42> = concat(1'b0, %5134)
node %2468 : bv<1> = %2287[42]
node %2469 : bv<1> = and(%2363, %2468)
node %5136 : bv<43> = concat(%2469, %5135)
node U_in : bv<45> = concat(2'b10, %5136)
node MREG_BIN : bv<1> = MREG[0]
node U_DATA : bv<45> = ite(MREG_BIN, U_DATA_reg, U_in)
node %5146 : bv<1> = eq(USE_SIMD, 5'b11001)
node %5169 : bv<2> = ite(%5146, 2'b10, 2'b00)
node %5154 : bv<1> = eq(USE_SIMD, 5'b10011)
node %5170 : bv<2> = ite(%5154, 2'b01, %5169)
node %5162 : bv<1> = eq(USE_SIMD, 5'b01100)
node USE_SIMD_BIN : bv<2> = ite(%5162, 2'b00, %5170)
node %5177 : bv<1> = eq(USE_SIMD_BIN, 2'b00)
node U_DATA_in : bv<45> = ite(%5177, U_DATA, 45'x100000000000)
node %5182 : bv<1> = U_DATA_reg[44]
node %5186 : bv<1> = not(MREG_BIN)
node %5187 : bv<1> = or(%5186, %5182)
node %5188 : bv<1> = not(%5177)
node %5189 : bv<1> = or(%5188, %5187)
node %5190 : bv<46> = concat(%5189, U_DATA_in)
node %5191 : bv<47> = concat(%5189, %5190)
node %5192 : bv<48> = concat(%5189, %5191)
node _procmux_631_CMP0 : bv<1> = eq(%1992, 2'b01)
node %5194 : bv<48> = ite(_procmux_631_CMP0, %5192, %1996)
node %452 : bv<2> = concat(MULTSIGNIN, 1'b0)
node %453 : bv<48> = concat(46'x000000000000, %452)
node x_mac_cascd : bv<48> = ite(_procmux_618_CMP0, %453, 48'x000000000000)
node _procmux_632_CMP0 : bv<1> = eq(%1992, 2'b00)
node xmux : bv<48> = ite(_procmux_632_CMP0, x_mac_cascd, %5194)
node %5198 : bv<48> = and(xmux, z_optinv)
node %5200 : bv<2> = OPMODE_in[3:2]
node %5199 : bv<2> = OPMODE_reg[3:2]
node %5201 : bv<2> = ite(OPMODEREG_BIN, %5199, %5200)
node _procmux_624_CMP0 : bv<1> = eq(%5201, 2'b11)
node %5203 : bv<48> = ite(_procmux_624_CMP0, C_DATA_in, 48'x000000000000)
node _procmux_625_CMP0 : bv<1> = eq(%5201, 2'b10)
node %5205 : bv<48> = ite(_procmux_625_CMP0, 48'xffffffffffff, %5203)
node %5274 : bv<1> = %2287[1]
node %5275 : bv<1> = and(%2363, %5274)
node %8006 : bv<2> = concat(%5275, 1'b0)
node %8007 : bv<3> = concat(1'b0, %8006)
node %5279 : bv<1> = %2287[3]
node %5280 : bv<1> = and(%2363, %5279)
node %8008 : bv<4> = concat(%5280, %8007)
node %8009 : bv<5> = concat(1'b0, %8008)
node %5284 : bv<1> = %2287[5]
node %5285 : bv<1> = and(%2363, %5284)
node %8010 : bv<6> = concat(%5285, %8009)
node %8011 : bv<7> = concat(1'b0, %8010)
node %5289 : bv<1> = %2287[7]
node %5290 : bv<1> = and(%2363, %5289)
node %8012 : bv<8> = concat(%5290, %8011)
node %8013 : bv<9> = concat(1'b0, %8012)
node %5294 : bv<1> = %2287[9]
node %5295 : bv<1> = and(%2363, %5294)
node %8014 : bv<10> = concat(%5295, %8013)
node %8015 : bv<11> = concat(1'b0, %8014)
node %5299 : bv<1> = %2287[11]
node %5300 : bv<1> = and(%2363, %5299)
node %8016 : bv<12> = concat(%5300, %8015)
node %8017 : bv<13> = concat(1'b0, %8016)
node %5304 : bv<1> = %2287[13]
node %5305 : bv<1> = and(%2363, %5304)
node %8018 : bv<14> = concat(%5305, %8017)
node %8019 : bv<15> = concat(1'b0, %8018)
node %5309 : bv<1> = %2287[15]
node %5310 : bv<1> = and(%2363, %5309)
node %8020 : bv<16> = concat(%5310, %8019)
node %8021 : bv<17> = concat(1'b0, %8020)
node %5314 : bv<1> = %2287[17]
node %5315 : bv<1> = and(%2363, %5314)
node %8022 : bv<18> = concat(%5315, %8021)
node %8023 : bv<19> = concat(1'b0, %8022)
node %5319 : bv<1> = %2287[19]
node %5320 : bv<1> = and(%2363, %5319)
node %8024 : bv<20> = concat(%5320, %8023)
node %8025 : bv<21> = concat(1'b0, %8024)
node %5324 : bv<1> = %2287[21]
node %5325 : bv<1> = and(%2363, %5324)
node %8026 : bv<22> = concat(%5325, %8025)
node %8027 : bv<23> = concat(1'b0, %8026)
node %5329 : bv<1> = %2287[23]
node %5330 : bv<1> = and(%2363, %5329)
node %8028 : bv<24> = concat(%5330, %8027)
node %8029 : bv<25> = concat(1'b0, %8028)
node %5334 : bv<1> = %2287[25]
node %5335 : bv<1> = and(%2363, %5334)
node %8030 : bv<26> = concat(%5335, %8029)
node %8031 : bv<27> = concat(1'b0, %8030)
node %5339 : bv<1> = %2287[27]
node %5340 : bv<1> = and(%2363, %5339)
node %8032 : bv<28> = concat(%5340, %8031)
node %8033 : bv<29> = concat(1'b0, %8032)
node %5344 : bv<1> = %2287[29]
node %5345 : bv<1> = and(%2363, %5344)
node %8034 : bv<30> = concat(%5345, %8033)
node %8035 : bv<31> = concat(1'b0, %8034)
node %5349 : bv<1> = %2287[31]
node %5350 : bv<1> = and(%2363, %5349)
node %8036 : bv<32> = concat(%5350, %8035)
node %8037 : bv<33> = concat(1'b0, %8036)
node %5354 : bv<1> = %2287[33]
node %5355 : bv<1> = and(%2363, %5354)
node %8038 : bv<34> = concat(%5355, %8037)
node %8039 : bv<35> = concat(1'b0, %8038)
node %5359 : bv<1> = %2287[35]
node %5360 : bv<1> = and(%2363, %5359)
node %8040 : bv<36> = concat(%5360, %8039)
node %8041 : bv<37> = concat(1'b0, %8040)
node %5364 : bv<1> = %2287[37]
node %5365 : bv<1> = and(%2363, %5364)
node %8042 : bv<38> = concat(%5365, %8041)
node %8043 : bv<39> = concat(1'b0, %8042)
node %5369 : bv<1> = %2287[39]
node %5370 : bv<1> = and(%2363, %5369)
node %8044 : bv<40> = concat(%5370, %8043)
node %8045 : bv<41> = concat(1'b0, %8044)
node %5374 : bv<1> = %2287[41]
node %5375 : bv<1> = and(%2363, %5374)
node %8046 : bv<42> = concat(%5375, %8045)
node %8047 : bv<43> = concat(1'b0, %8046)
node %5379 : bv<1> = %2287[43]
node %5380 : bv<1> = and(%2363, %5379)
node %8048 : bv<44> = concat(%5380, %8047)
node %8050 : bv<1> = %2287[44]
node %8052 : bv<1> = and(%2363, %8050)
node %8053 : bv<1> = not(%8052)
node V_in : bv<45> = concat(%8053, %8048)
node V_DATA : bv<45> = ite(MREG_BIN, V_DATA_reg, V_in)
node V_DATA_in : bv<45> = ite(%5177, V_DATA, 45'x100000000000)
node %8057 : bv<48> = concat(3'b000, V_DATA_in)
node _procmux_626_CMP0 : bv<1> = eq(%5201, 2'b01)
node %8059 : bv<48> = ite(_procmux_626_CMP0, %8057, %5205)
node _procmux_627_CMP0 : bv<1> = eq(%5201, 2'b00)
node ymux : bv<48> = ite(_procmux_627_CMP0, 48'x000000000000, %8059)
node %8062 : bv<48> = and(z_optinv, ymux)
node %8063 : bv<48> = and(xmux, ymux)
node %8064 : bv<48> = or(%8063, %8062)
node co : bv<48> = or(%8064, %5198)
node %8071 : bv<11> = co[10:0]
node %8067 : bv<1> = ALUMODE_in[2]
node %8066 : bv<1> = ALUMODE_reg[2]
node %8068 : bv<1> = ite(ALUMODEREG_BIN, %8066, %8067)
node %8073 : bv<11> = ite(%8068, 11'x000, %8071)
node %8074 : bv<12> = concat(%8073, 1'b0)
node %8079 : bv<1> = eq(USE_SIMD_BIN, 2'b01)
node %8080 : bv<1> = not(%8079)
node %8082 : bv<1> = co[11]
node %8084 : bv<1> = not(%8068)
node %8085 : bv<1> = and(%8084, %8082)
node %8086 : bv<1> = and(%8085, %8080)
node %8087 : bv<13> = concat(%8086, %8074)
node %8089 : bv<11> = co[22:12]
node %8091 : bv<11> = ite(%8068, 11'x000, %8089)
node %8092 : bv<24> = concat(%8091, %8087)
node %8094 : bv<1> = co[23]
node %8096 : bv<1> = and(%8084, %8094)
node %8097 : bv<1> = and(%8096, %5177)
node %8098 : bv<25> = concat(%8097, %8092)
node %8100 : bv<11> = co[34:24]
node %8102 : bv<11> = ite(%8068, 11'x000, %8100)
node %8103 : bv<36> = concat(%8102, %8098)
node %8105 : bv<1> = co[35]
node %8107 : bv<1> = and(%8084, %8105)
node %8108 : bv<1> = and(%8107, %8080)
node %8109 : bv<37> = concat(%8108, %8103)
node %8111 : bv<11> = co[46:36]
node %8113 : bv<11> = ite(%8068, 11'x000, %8111)
node %8114 : bv<48> = concat(%8113, %8109)
node %8115 : bv<48> = xor(z_optinv, xmux)
node s : bv<48> = xor(%8115, ymux)
node %8118 : bv<1> = ALUMODE_in[3]
node %8117 : bv<1> = ALUMODE_reg[3]
node %8119 : bv<1> = ite(ALUMODEREG_BIN, %8117, %8118)
node smux : bv<48> = ite(%8119, co, s)
node %8121 : bv<48> = xor(smux, %8114)
node smux_w : bv<48> = xor(%8121, wmux)
node %8123 : bv<12> = smux_w[11:0]
node %8124 : bv<13> = concat(1'b0, %8123)
node %1158 : bv<1> = not(P_FDBK_47_in)
node CARRYINSELREG_BIN : bv<1> = CARRYINSELREG[0]
node CARRYINSEL_mux : bv<3> = ite(CARRYINSELREG_BIN, CARRYINSEL_reg, CARRYINSEL)
node _procmux_584_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b111)
node %8127 : bv<1> = and(_procmux_584_CMP0, %1158)
node %8128 : bv<1> = xor(AMULT26_in, BMULT17_in)
node c_mult : bv<1> = not(%8128)
node multcarryin_data : bv<1> = ite(MREG_BIN, qmultcarryin, c_mult)
node %8131 : bv<1> = not(multcarryin_data)
node _procmux_585_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b110)
node %8133 : bv<1> = ite(_procmux_585_CMP0, %8131, %8127)
node _procmux_586_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b101)
node %8135 : bv<1> = ite(_procmux_586_CMP0, P_FDBK_47_in, %8133)
node %729 : bv<1> = COUT_reg[3]
node CCOUT_in : bv<1> = xor(ALUMODE10_reg, %729)
node %731 : bv<1> = not(CCOUT_in)
node _procmux_587_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b100)
node %8137 : bv<1> = ite(_procmux_587_CMP0, %731, %8135)
node %734 : bv<1> = not(%171)
node _procmux_588_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b011)
node %8139 : bv<1> = ite(_procmux_588_CMP0, %734, %8137)
node %737 : bv<1> = not(CARRYCASCIN)
node _procmux_589_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b010)
node %8141 : bv<1> = ite(_procmux_589_CMP0, %737, %8139)
node _procmux_590_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b001)
node %8143 : bv<1> = ite(_procmux_590_CMP0, %171, %8141)
node CARRYIN_in : bv<1> = xor(CARRYIN, IS_CARRYIN_INVERTED)
node CARRYINREG_BIN : bv<1> = CARRYINREG[0]
node CARRYIN_mux : bv<1> = ite(CARRYINREG_BIN, CARRYIN_reg, CARRYIN_in)
node %8145 : bv<1> = not(CARRYIN_mux)
node _procmux_591_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b000)
node cin_b : bv<1> = ite(_procmux_591_CMP0, %8145, %8143)
node %8149 : bv<1> = or(%8119, %8068)
node cin : bv<1> = or(%8149, cin_b)
node %8153 : bv<48> = and(smux, wmux)
node %8154 : bv<48> = and(wmux, %8114)
node %8155 : bv<48> = and(smux, %8114)
node %8156 : bv<48> = or(%8155, %8154)
node comux_w : bv<48> = or(%8156, %8153)
node %8158 : bv<11> = comux_w[10:0]
node %8159 : bv<12> = concat(%8158, cin)
node %8160 : bv<13> = concat(1'b0, %8159)
node s0 : bv<13> = add(%8160, %8124)
node %8302 : bv<12> = s0[11:0]
node %8162 : bv<1> = s0[12]
node intc1 : bv<1> = and(%8080, %8162)
node %8165 : bv<13> = concat(12'x000, intc1)
node %8166 : bv<12> = smux_w[23:12]
node %8167 : bv<13> = concat(1'b0, %8166)
node %8168 : bv<1> = comux_w[11]
node co12_lsb : bv<1> = and(%8080, %8168)
node %8170 : bv<11> = comux_w[22:12]
node %8171 : bv<12> = concat(%8170, co12_lsb)
node %8172 : bv<13> = concat(1'b0, %8171)
node %8173 : bv<13> = add(%8172, %8167)
node s1 : bv<13> = add(%8173, %8165)
node %8303 : bv<12> = s1[11:0]
node %8304 : bv<24> = concat(%8303, %8302)
node %8175 : bv<1> = s1[12]
node intc2 : bv<1> = and(%5177, %8175)
node %8177 : bv<13> = concat(12'x000, intc2)
node %8178 : bv<12> = smux_w[35:24]
node %8179 : bv<13> = concat(1'b0, %8178)
node %8180 : bv<1> = comux_w[23]
node co24_lsb : bv<1> = and(%5177, %8180)
node %8182 : bv<11> = comux_w[34:24]
node %8183 : bv<12> = concat(%8182, co24_lsb)
node %8184 : bv<13> = concat(1'b0, %8183)
node %8185 : bv<13> = add(%8184, %8179)
node s2 : bv<13> = add(%8185, %8177)
node %8305 : bv<12> = s2[11:0]
node %8306 : bv<36> = concat(%8305, %8304)
node %8187 : bv<1> = s2[12]
node intc3 : bv<1> = and(%8080, %8187)
node %8190 : bv<14> = concat(13'x0000, intc3)
node %8191 : bv<12> = smux_w[47:36]
node %8193 : bv<1> = co[47]
node %8195 : bv<1> = and(%8084, %8193)
node %8196 : bv<13> = concat(%8195, %8191)
node %8197 : bv<14> = concat(1'b0, %8196)
node %8198 : bv<1> = comux_w[35]
node co36_lsb : bv<1> = and(%8080, %8198)
node %8200 : bv<12> = comux_w[47:36]
node %8201 : bv<13> = concat(%8200, co36_lsb)
node %8202 : bv<14> = concat(1'b0, %8201)
node %8203 : bv<14> = add(%8202, %8197)
node s3 : bv<14> = add(%8203, %8190)
node %8307 : bv<12> = s3[11:0]
node %8308 : bv<48> = concat(%8307, %8306)
node %8310 : bv<1> = ALUMODE_in[1]
node %8309 : bv<1> = ALUMODE_reg[1]
node %8311 : bv<1> = ite(ALUMODEREG_BIN, %8309, %8310)
node %8312 : bv<2> = concat(%8311, %8311)
node %8313 : bv<3> = concat(%8311, %8312)
node %8314 : bv<4> = concat(%8311, %8313)
node %8315 : bv<5> = concat(%8311, %8314)
node %8316 : bv<6> = concat(%8311, %8315)
node %8317 : bv<7> = concat(%8311, %8316)
node %8318 : bv<8> = concat(%8311, %8317)
node %8319 : bv<9> = concat(%8311, %8318)
node %8320 : bv<10> = concat(%8311, %8319)
node %8321 : bv<11> = concat(%8311, %8320)
node %8322 : bv<12> = concat(%8311, %8321)
node %8323 : bv<13> = concat(%8311, %8322)
node %8324 : bv<14> = concat(%8311, %8323)
node %8325 : bv<15> = concat(%8311, %8324)
node %8326 : bv<16> = concat(%8311, %8325)
node %8327 : bv<17> = concat(%8311, %8326)
node %8328 : bv<18> = concat(%8311, %8327)
node %8329 : bv<19> = concat(%8311, %8328)
node %8330 : bv<20> = concat(%8311, %8329)
node %8331 : bv<21> = concat(%8311, %8330)
node %8332 : bv<22> = concat(%8311, %8331)
node %8333 : bv<23> = concat(%8311, %8332)
node %8334 : bv<24> = concat(%8311, %8333)
node %8335 : bv<25> = concat(%8311, %8334)
node %8336 : bv<26> = concat(%8311, %8335)
node %8337 : bv<27> = concat(%8311, %8336)
node %8338 : bv<28> = concat(%8311, %8337)
node %8339 : bv<29> = concat(%8311, %8338)
node %8340 : bv<30> = concat(%8311, %8339)
node %8341 : bv<31> = concat(%8311, %8340)
node %8342 : bv<32> = concat(%8311, %8341)
node %8343 : bv<33> = concat(%8311, %8342)
node %8344 : bv<34> = concat(%8311, %8343)
node %8345 : bv<35> = concat(%8311, %8344)
node %8346 : bv<36> = concat(%8311, %8345)
node %8347 : bv<37> = concat(%8311, %8346)
node %8348 : bv<38> = concat(%8311, %8347)
node %8349 : bv<39> = concat(%8311, %8348)
node %8350 : bv<40> = concat(%8311, %8349)
node %8351 : bv<41> = concat(%8311, %8350)
node %8352 : bv<42> = concat(%8311, %8351)
node %8353 : bv<43> = concat(%8311, %8352)
node %8354 : bv<44> = concat(%8311, %8353)
node %8355 : bv<45> = concat(%8311, %8354)
node %8356 : bv<46> = concat(%8311, %8355)
node %8357 : bv<47> = concat(%8311, %8356)
node %8358 : bv<48> = concat(%8311, %8357)
node ALU_OUT_in : bv<48> = xor(%8358, %8308)
node %8366 : bv<1> = eq(SEL_PATTERN, 5'b10001)
node %8374 : bv<1> = eq(SEL_PATTERN, 5'b01001)
node %8379 : bv<1> = not(%8374)
node SEL_PATTERN_BIN : bv<1> = and(%8379, %8366)
node %8384 : bv<1> = not(SEL_PATTERN_BIN)
node the_pattern : bv<48> = ite(%8384, PATTERN, C_DATA_in)
node %8386 : bv<48> = xor(the_pattern, ALU_OUT_in)
node %8387 : bv<48> = not(%8386)
node %8388 : bv<48> = or(%8387, the_mask)
node pdet_o : bv<1> = eq(%8388, 48'xffffffffffff)
node PREG_BIN : bv<1> = PREG[0]
output PATTERNDETECT : bv<1> = ite(PREG_BIN, pdet_o_reg1, pdet_o)
node %8505 : bv<1> = s3[12]
node ALUMODE10_in : bv<1> = and(%1892, %8311)
node cout3 : bv<1> = xor(ALUMODE10_in, %8505)
output CARRYCASCOUT : bv<1> = ite(PREG_BIN, CCOUT_in, xor(ALUMODE10_in, cout3))
node %8476 : bv<1> = xor(%8168, %8162)
node %8477 : bv<1> = xor(%8476, %8085)
node cout0 : bv<1> = xor(ALUMODE10_in, %8477)
node %8481 : bv<2> = ALUMODE_in[3:2]
node %8480 : bv<2> = ALUMODE_reg[3:2]
node %8482 : bv<2> = ite(ALUMODEREG_BIN, %8480, %8481)
node %8483 : bv<1> = eq(%8482, 2'b00)
node %8484 : bv<1> = not(%8483)
node %8486 : bv<4> = OPMODE_in[3:0]
node %8485 : bv<4> = OPMODE_reg[3:0]
node %8487 : bv<4> = ite(OPMODEREG_BIN, %8485, %8486)
node %8488 : bv<1> = eq(%8487, 4'b0101)
node mult_or_logic : bv<1> = or(%8488, %8484)
node %8490 : bv<1> = not(mult_or_logic)
node cout_0 : bv<1> = and(%8490, cout0)
node %8492 : bv<1> = and(%8079, cout_0)
node %8493 : bv<1> = xor(%8180, %8175)
node %8494 : bv<1> = xor(%8493, %8096)
node cout1 : bv<1> = xor(ALUMODE10_in, %8494)
node cout_1 : bv<1> = and(%8490, cout1)
node %8497 : bv<1> = and(%5188, cout_1)
node %8498 : bv<2> = concat(%8497, %8492)
node %8499 : bv<1> = xor(%8198, %8187)
node %8500 : bv<1> = xor(%8499, %8107)
node cout2 : bv<1> = xor(ALUMODE10_in, %8500)
node cout_2 : bv<1> = and(%8490, cout2)
node %8503 : bv<1> = and(%8079, cout_2)
node %8504 : bv<3> = concat(%8503, %8498)
node COUT_in : bv<4> = concat(cout3, %8504)
output CARRYOUT : bv<4> = ite(PREG_BIN, COUT_reg, COUT_in)
node MULTSIGN_ALU_in : bv<1> = s3[13]
output MULTSIGNOUT : bv<1> = ite(PREG_BIN, MULTSIGN_ALU_reg, MULTSIGN_ALU_in)
node %8468 : bv<48> = or(%8386, the_mask)
node pdetb_o : bv<1> = eq(%8468, 48'xffffffffffff)
output PATTERNBDETECT : bv<1> = ite(PREG_BIN, pdetb_o_reg1, pdetb_o)
node overflow_data : bv<1> = ite(PREG_BIN, pdet_o_reg2, pdet_o)
node %8753 : bv<1> = or(PATTERNDETECT, PATTERNBDETECT)
output OVERFLOW : bv<1> = and(USE_PATTERN_DETECT_BIN, and(%8753, overflow_data))
output PCOUT : bv<48> = ite(PREG_BIN, P_FDBK_in, ALU_OUT_in)
output UNDERFLOW : bv<1> = and(USE_PATTERN_DETECT_BIN, and(%8753, ite(PREG_BIN, pdetb_o_reg2, pdetb_o)))
node %8519 : bv<1> = s[11]
node %8520 : bv<1> = s[10]
node %8521 : bv<1> = s[9]
node %8522 : bv<1> = s[8]
node %8523 : bv<1> = s[7]
node %8524 : bv<1> = s[6]
node %8525 : bv<1> = xor(%8524, %8523)
node %8526 : bv<1> = xor(%8525, %8522)
node %8527 : bv<1> = xor(%8526, %8521)
node %8528 : bv<1> = xor(%8527, %8520)
node %8529 : bv<1> = xor(%8528, %8519)
node %8537 : bv<1> = eq(USE_WIDEXOR, 5'b11000)
node %8545 : bv<1> = eq(USE_WIDEXOR, 5'b01101)
node %8550 : bv<1> = not(%8545)
node USE_WIDEXOR_BIN : bv<1> = and(%8550, %8537)
node xor_12b : bv<1> = and(USE_WIDEXOR_BIN, %8529)
node %8557 : bv<1> = s[5]
node %8558 : bv<1> = s[4]
node %8559 : bv<1> = s[3]
node %8560 : bv<1> = s[2]
node %8561 : bv<1> = s[1]
node %8562 : bv<1> = s[0]
node %8563 : bv<1> = xor(%8562, %8561)
node %8564 : bv<1> = xor(%8563, %8560)
node %8565 : bv<1> = xor(%8564, %8559)
node %8566 : bv<1> = xor(%8565, %8558)
node %8567 : bv<1> = xor(%8566, %8557)
node xor_12a : bv<1> = and(USE_WIDEXOR_BIN, %8567)
node xor_24a : bv<1> = xor(xor_12a, xor_12b)
node %8580 : bv<1> = eq(XORSIMD, 5'b11010)
node %8588 : bv<1> = eq(XORSIMD, 5'b01110)
node %8593 : bv<1> = not(%8588)
node XORSIMD_BIN : bv<1> = and(%8593, %8580)
node %8595 : bv<1> = ite(XORSIMD_BIN, xor_12a, xor_24a)
node %8597 : bv<1> = s[23]
node %8598 : bv<1> = s[22]
node %8599 : bv<1> = s[21]
node %8600 : bv<1> = s[20]
node %8601 : bv<1> = s[19]
node %8602 : bv<1> = s[18]
node %8603 : bv<1> = xor(%8602, %8601)
node %8604 : bv<1> = xor(%8603, %8600)
node %8605 : bv<1> = xor(%8604, %8599)
node %8606 : bv<1> = xor(%8605, %8598)
node %8607 : bv<1> = xor(%8606, %8597)
node xor_12d : bv<1> = and(USE_WIDEXOR_BIN, %8607)
node %8614 : bv<1> = s[17]
node %8615 : bv<1> = s[16]
node %8616 : bv<1> = s[15]
node %8617 : bv<1> = s[14]
node %8618 : bv<1> = s[13]
node %8619 : bv<1> = s[12]
node %8620 : bv<1> = xor(%8619, %8618)
node %8621 : bv<1> = xor(%8620, %8617)
node %8622 : bv<1> = xor(%8621, %8616)
node %8623 : bv<1> = xor(%8622, %8615)
node %8624 : bv<1> = xor(%8623, %8614)
node xor_12c : bv<1> = and(USE_WIDEXOR_BIN, %8624)
node xor_24b : bv<1> = xor(xor_12c, xor_12d)
node xor_48a : bv<1> = xor(xor_24a, xor_24b)
node %8632 : bv<1> = ite(XORSIMD_BIN, xor_12b, xor_48a)
node %8633 : bv<2> = concat(%8632, %8595)
node %8634 : bv<1> = ite(XORSIMD_BIN, xor_12c, xor_24b)
node %8635 : bv<3> = concat(%8634, %8633)
node %8637 : bv<1> = s[47]
node %8638 : bv<1> = s[46]
node %8639 : bv<1> = s[45]
node %8640 : bv<1> = s[44]
node %8641 : bv<1> = s[43]
node %8642 : bv<1> = s[42]
node %8643 : bv<1> = xor(%8642, %8641)
node %8644 : bv<1> = xor(%8643, %8640)
node %8645 : bv<1> = xor(%8644, %8639)
node %8646 : bv<1> = xor(%8645, %8638)
node %8647 : bv<1> = xor(%8646, %8637)
node xor_12h : bv<1> = and(USE_WIDEXOR_BIN, %8647)
node %8654 : bv<1> = s[41]
node %8655 : bv<1> = s[40]
node %8656 : bv<1> = s[39]
node %8657 : bv<1> = s[38]
node %8658 : bv<1> = s[37]
node %8659 : bv<1> = s[36]
node %8660 : bv<1> = xor(%8659, %8658)
node %8661 : bv<1> = xor(%8660, %8657)
node %8662 : bv<1> = xor(%8661, %8656)
node %8663 : bv<1> = xor(%8662, %8655)
node %8664 : bv<1> = xor(%8663, %8654)
node xor_12g : bv<1> = and(USE_WIDEXOR_BIN, %8664)
node xor_24d : bv<1> = xor(xor_12g, xor_12h)
node %8672 : bv<1> = s[35]
node %8673 : bv<1> = s[34]
node %8674 : bv<1> = s[33]
node %8675 : bv<1> = s[32]
node %8676 : bv<1> = s[31]
node %8677 : bv<1> = s[30]
node %8678 : bv<1> = xor(%8677, %8676)
node %8679 : bv<1> = xor(%8678, %8675)
node %8680 : bv<1> = xor(%8679, %8674)
node %8681 : bv<1> = xor(%8680, %8673)
node %8682 : bv<1> = xor(%8681, %8672)
node xor_12f : bv<1> = and(USE_WIDEXOR_BIN, %8682)
node %8689 : bv<1> = s[29]
node %8690 : bv<1> = s[28]
node %8691 : bv<1> = s[27]
node %8692 : bv<1> = s[26]
node %8693 : bv<1> = s[25]
node %8694 : bv<1> = s[24]
node %8695 : bv<1> = xor(%8694, %8693)
node %8696 : bv<1> = xor(%8695, %8692)
node %8697 : bv<1> = xor(%8696, %8691)
node %8698 : bv<1> = xor(%8697, %8690)
node %8699 : bv<1> = xor(%8698, %8689)
node xor_12e : bv<1> = and(USE_WIDEXOR_BIN, %8699)
node xor_24c : bv<1> = xor(xor_12e, xor_12f)
node xor_48b : bv<1> = xor(xor_24c, xor_24d)
node xor_96 : bv<1> = xor(xor_48a, xor_48b)
node %8708 : bv<1> = ite(XORSIMD_BIN, xor_12d, xor_96)
node %8709 : bv<4> = concat(%8708, %8635)
node %8710 : bv<1> = ite(XORSIMD_BIN, xor_12e, xor_24c)
node %8711 : bv<5> = concat(%8710, %8709)
node %8712 : bv<1> = ite(XORSIMD_BIN, xor_12f, xor_48b)
node %8713 : bv<6> = concat(%8712, %8711)
node %8714 : bv<1> = ite(XORSIMD_BIN, xor_12g, xor_24d)
node %8715 : bv<7> = concat(%8714, %8713)
node XOR_MX_in : bv<8> = concat(xor_12h, %8715)
output XOROUT : bv<8> = ite(PREG_BIN, XOR_MX_reg, XOR_MX_in)
output ACOUT : bv<30> = ite(eq(ACASCREG[1:0], AREG_BIN), A_ALU, A1_reg)
output BCOUT : bv<18> = ite(eq(BCASCREG[1:0], BREG_BIN), B2_DATA, B1_DATA_out)
node %1032 : bv<1> = and(CEP, PREG_BIN)
node auto_reset_pri : bv<1> = or(not(and(not(eq(AUTORESET_PRIORITY, 5'b00110)), eq(AUTORESET_PRIORITY, 5'b10000))), CEP)
node AUTORESET_PATDET_BIN : bv<2> = ite(eq(AUTORESET_PATDET, 5'b00011), 2'b00, ite(eq(AUTORESET_PATDET, 5'b00100), 2'b01, ite(eq(AUTORESET_PATDET, 5'b00101), 2'b10, 2'b00)))
node %8463 : bv<1> = or(xor(RSTP, IS_RSTP_INVERTED), ite(eq(AUTORESET_PATDET_BIN, 2'b01), and(auto_reset_pri, PATTERNDETECT), and(eq(AUTORESET_PATDET_BIN, 2'b10), and(and(auto_reset_pri, overflow_data), not(PATTERNDETECT)))))
node RSTCTRL_in : bv<1> = xor(RSTCTRL, IS_RSTCTRL_INVERTED)
node RSTB_in : bv<1> = xor(RSTB, IS_RSTB_INVERTED)
node %1051 : bv<1> = or(xor(RSTA, IS_RSTA_INVERTED), %247)
node RSTD_in : bv<1> = xor(RSTD, IS_RSTD_INVERTED)
node %8720 : bv<1> = or(xor(RSTM, IS_RSTM_INVERTED), %5186)
node %8474 : bv<1> = not(xor(RSTALLCARRYIN, IS_RSTALLCARRYIN_INVERTED))
node %8464 : bv<1> = not(%8463)
state ALUMODE_reg : bv<4>
  [next] ite(xor(RSTALUMODE, IS_RSTALUMODE_INVERTED), 4'b0000, ite(CEALUMODE, ALUMODE_in, ALUMODE_reg))
state P_FDBK_in : bv<48>
  [next] ite(%8463, 48'x000000000000, ite(%1032, ALU_OUT_in, P_FDBK_in))
state OPMODE_reg : bv<9>
  [next] ite(RSTCTRL_in, 9'x000, ite(CECTRL, OPMODE_in, OPMODE_reg))
state C_reg : bv<48>
  [next] ite(or(xor(RSTC, IS_RSTC_INVERTED), not(CREG_BIN)), 48'x000000000000, ite(CEC, C, C_reg))
state B2_reg : bv<18>
  [next] ite(RSTB_in, 18'x00000, ite(CEB2, ite(eq(BREG_BIN, 2'b10), B1_DATA_out, _procmux_557), B2_reg))
state A2_reg : bv<30>
  [next] ite(%1051, 30'x00000000, ite(CEA2, ite(eq(AREG_BIN, 2'b10), A1_reg, _procmux_576), A2_reg))
state D_DATA_reg : bv<27>
  [next] ite(or(RSTD_in, not(DREG_INT)), 27'x0000000, ite(CED, D, D_DATA_reg))
state INMODE_reg : bv<5>
  [next] ite(or(xor(RSTINMODE, IS_RSTINMODE_INVERTED), not(INMODEREG_BIN)), 5'b00000, ite(CEINMODE, INMODE_in, INMODE_reg))
state A1_reg : bv<30>
  [next] ite(%1051, 30'x00000000, ite(CEA1, _procmux_576, A1_reg))
state B1_DATA_out : bv<18>
  [next] ite(or(RSTB_in, %233), 18'x00000, ite(CEB1, _procmux_557, B1_DATA_out))
state AD_DATA_reg : bv<27>
  [next] ite(RSTD_in, 27'x0000000, ite(CEAD, AD_in, AD_DATA_reg))
state U_DATA_reg : bv<45>
  [next] ite(%8720, 45'x000000000000, ite(CEM, U_in, U_DATA_reg))
state V_DATA_reg : bv<45>
  [next] ite(%8720, 45'x000000000000, ite(CEM, V_in, V_DATA_reg))
state XOR_MX_reg : bv<8>
  [next] ite(%8463, 8'b00000000, ite(%1032, XOR_MX_in, XOR_MX_reg))
state CARRYINSEL_reg : bv<3>
  [next] ite(RSTCTRL_in, 3'b000, ite(CECTRL, CARRYINSEL, CARRYINSEL_reg))
state qmultcarryin : bv<1>
  [next] and(%8474, ite(CEM, c_mult, qmultcarryin))
state ALUMODE10_reg : bv<1>
  [next] and(%8464, ite(%1032, ALUMODE10_in, ALUMODE10_reg))
state COUT_reg : bv<4>
  [next] ite(%8463, 4'b0000, ite(%1032, COUT_in, COUT_reg))
state CARRYIN_reg : bv<1>
  [next] and(%8474, ite(CECARRYIN, CARRYIN_in, CARRYIN_reg))
state pdet_o_reg1 : bv<1>
  [next] and(%8464, ite(%1032, pdet_o, pdet_o_reg1))
state pdetb_o_reg1 : bv<1>
  [next] and(%8464, ite(%1032, pdetb_o, pdetb_o_reg1))
state pdetb_o_reg2 : bv<1>
  [next] and(%8464, ite(%1032, pdetb_o_reg1, pdetb_o_reg2))
state pdet_o_reg2 : bv<1>
  [next] and(%8464, ite(%1032, pdet_o_reg1, pdet_o_reg2))
state MULTSIGN_ALU_reg : bv<1>
  [next] and(%8464, ite(%1032, MULTSIGN_ALU_in, MULTSIGN_ALU_reg))
