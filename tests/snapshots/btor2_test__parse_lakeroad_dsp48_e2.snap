---
source: tests/btor2_test.rs
expression: sys.serialize_to_str(&ctx)
---
DSP48E2
input RSTP : bv<1>
input RSTM : bv<1>
input RSTINMODE : bv<1>
input RSTD : bv<1>
input RSTCTRL : bv<1>
input RSTC : bv<1>
input RSTB : bv<1>
input RSTALUMODE : bv<1>
input RSTALLCARRYIN : bv<1>
input RSTA : bv<1>
input PCIN : bv<48>
input OPMODE : bv<9>
input MULTSIGNIN : bv<1>
input INMODE : bv<5>
input D : bv<27>
input CLK : bv<1>
input CEP : bv<1>
input CEM : bv<1>
input CEINMODE : bv<1>
input CED : bv<1>
input CECTRL : bv<1>
input CECARRYIN : bv<1>
input CEC : bv<1>
input CEB2 : bv<1>
input CEB1 : bv<1>
input CEALUMODE : bv<1>
input CEAD : bv<1>
input CEA2 : bv<1>
input CEA1 : bv<1>
input CARRYINSEL : bv<3>
input CARRYIN : bv<1>
input CARRYCASCIN : bv<1>
input C : bv<48>
input BCIN : bv<18>
input B : bv<18>
input ALUMODE : bv<4>
input ACIN : bv<30>
input A : bv<30>
input XORSIMD : bv<5>
input USE_WIDEXOR : bv<5>
input USE_SIMD : bv<5>
input USE_PATTERN_DETECT : bv<5>
input USE_MULT : bv<5>
input SEL_PATTERN : bv<5>
input SEL_MASK : bv<5>
input RND : bv<48>
input PREG : bv<32>
input PREADDINSEL : bv<5>
input PATTERN : bv<48>
input OPMODEREG : bv<32>
input MREG : bv<32>
input MASK : bv<48>
input IS_RSTP_INVERTED : bv<1>
input IS_RSTM_INVERTED : bv<1>
input IS_RSTINMODE_INVERTED : bv<1>
input IS_RSTD_INVERTED : bv<1>
input IS_RSTC_INVERTED : bv<1>
input IS_RSTCTRL_INVERTED : bv<1>
input IS_RSTB_INVERTED : bv<1>
input IS_RSTA_INVERTED : bv<1>
input IS_RSTALUMODE_INVERTED : bv<1>
input IS_RSTALLCARRYIN_INVERTED : bv<1>
input IS_OPMODE_INVERTED : bv<9>
input IS_INMODE_INVERTED : bv<5>
input IS_CLK_INVERTED : bv<1>
input IS_CARRYIN_INVERTED : bv<1>
input IS_ALUMODE_INVERTED : bv<4>
input INMODEREG : bv<32>
input DREG : bv<32>
input CREG : bv<32>
input CARRYINSELREG : bv<32>
input CARRYINREG : bv<32>
input B_INPUT : bv<5>
input BREG : bv<32>
input BMULTSEL : bv<5>
input BCASCREG : bv<32>
input A_INPUT : bv<5>
input AUTORESET_PRIORITY : bv<5>
input AUTORESET_PATDET : bv<5>
input AREG : bv<32>
input AMULTSEL : bv<5>
input ALUMODEREG : bv<32>
input ADREG : bv<32>
input ACASCREG : bv<32>
input _input_0 : bv<48>
input _input_1 : bv<48>
input _input_2 : bv<27>
input _input_3 : bv<18>
input _input_4 : bv<48>
input _input_5 : bv<1>
input _input_6 : bv<48>
input _input_7 : bv<1>
input _input_8 : bv<1>
input _input_9 : bv<1>
input _input_10 : bv<1>
input _input_11 : bv<1>
input _input_12 : bv<1>
node %218 : bv<56> = zext(5'b1111, 51)
node B_INPUT_REG : bv<56> = concat(51'x0, B_INPUT)
node %219 : bv<1> = eq(B_INPUT_REG, %218)
node %220 : bv<32> = ite(%219, 32'x1, 32'x0)
node %222 : bv<56> = zext(5'b111, 51)
node %223 : bv<1> = eq(B_INPUT_REG, %222)
node %224 : bv<32> = ite(%223, 32'x0, %220)
node B_INPUT_BIN : bv<1> = %224[0]
node %226 : bv<32> = zext(B_INPUT_BIN, 31)
node %227 : bv<1> = eq(%226, 32'x1)
node _procmux_557 : bv<18> = ite(%227, BCIN, B)
node BREG_BIN : bv<2> = BREG[1:0]
node %232 : bv<1> = eq(BREG_BIN, 2'b0)
node %233 : bv<1> = not(%232)
node B2_DATA : bv<18> = ite(%233, B2_reg, _procmux_557)
output BCOUT : bv<18> = ite(eq(BCASCREG[1:0], BREG_BIN), B2_DATA, B1_DATA_out)
node A_INPUT_REG : bv<56> = concat(51'x0, A_INPUT)
node %236 : bv<1> = eq(A_INPUT_REG, %218)
node %237 : bv<32> = ite(%236, 32'x1, 32'x0)
node %238 : bv<1> = eq(A_INPUT_REG, %222)
node %239 : bv<32> = ite(%238, 32'x0, %237)
node A_INPUT_BIN : bv<1> = %239[0]
node %241 : bv<32> = zext(A_INPUT_BIN, 31)
node %242 : bv<1> = eq(%241, 32'x1)
node _procmux_576 : bv<30> = ite(%242, ACIN, A)
node AREG_BIN : bv<2> = AREG[1:0]
node %246 : bv<1> = eq(AREG_BIN, 2'b0)
node %247 : bv<1> = not(%246)
node A_ALU : bv<30> = ite(%247, A2_reg, _procmux_576)
output ACOUT : bv<30> = ite(eq(ACASCREG[1:0], AREG_BIN), A_ALU, A1_reg)
node CREG_BIN : bv<1> = CREG[0]
node %197 : bv<1> = eq(CREG_BIN, 1'b1)
node C_DATA_in : bv<48> = ite(%197, C_reg, C)
node OPMODE_in : bv<9> = xor(OPMODE, IS_OPMODE_INVERTED)
node OPMODEREG_BIN : bv<1> = OPMODEREG[0]
node %163 : bv<1> = eq(OPMODEREG_BIN, 1'b1)
node OPMODE_mux : bv<9> = ite(%163, OPMODE_reg, OPMODE_in)
node %784 : bv<2> = OPMODE_mux[8:7]
node _procmux_634_CMP0 : bv<1> = eq(%784, 2'b11)
node %786 : bv<48> = ite(_procmux_634_CMP0, C_DATA_in, _input_6)
node _procmux_635_CMP0 : bv<1> = eq(%784, 2'b10)
node %788 : bv<48> = ite(_procmux_635_CMP0, RND, %786)
node _procmux_636_CMP0 : bv<1> = eq(%784, 2'b1)
node %1096 : bv<48> = ite(_procmux_636_CMP0, P_FDBK_in, %788)
node _procmux_637_CMP0 : bv<1> = eq(%784, 2'b0)
node wmux : bv<48> = ite(_procmux_637_CMP0, 48'x0, %1096)
node %1098 : bv<31> = P_FDBK_in[47:17]
node P_FDBK_47_in : bv<1> = P_FDBK_in[47]
node %1100 : bv<32> = concat(P_FDBK_47_in, %1098)
node %1101 : bv<33> = concat(P_FDBK_47_in, %1100)
node %1102 : bv<34> = concat(P_FDBK_47_in, %1101)
node %1103 : bv<35> = concat(P_FDBK_47_in, %1102)
node %1104 : bv<36> = concat(P_FDBK_47_in, %1103)
node %1105 : bv<37> = concat(P_FDBK_47_in, %1104)
node %1106 : bv<38> = concat(P_FDBK_47_in, %1105)
node %1107 : bv<39> = concat(P_FDBK_47_in, %1106)
node %1108 : bv<40> = concat(P_FDBK_47_in, %1107)
node %1109 : bv<41> = concat(P_FDBK_47_in, %1108)
node %1110 : bv<42> = concat(P_FDBK_47_in, %1109)
node %1111 : bv<43> = concat(P_FDBK_47_in, %1110)
node %1112 : bv<44> = concat(P_FDBK_47_in, %1111)
node %1113 : bv<45> = concat(P_FDBK_47_in, %1112)
node %1114 : bv<46> = concat(P_FDBK_47_in, %1113)
node %1115 : bv<47> = concat(P_FDBK_47_in, %1114)
node %1116 : bv<48> = concat(P_FDBK_47_in, %1115)
node %165 : bv<2> = OPMODE_mux[6:5]
node _procmux_616_CMP0 : bv<1> = eq(%165, 2'b11)
node %1117 : bv<48> = ite(_procmux_616_CMP0, %1116, _input_0)
node %169 : bv<31> = PCIN[47:17]
node %170 : bv<1> = PCIN[47]
node %171 : bv<32> = concat(%170, %169)
node %172 : bv<33> = concat(%170, %171)
node %173 : bv<34> = concat(%170, %172)
node %174 : bv<35> = concat(%170, %173)
node %175 : bv<36> = concat(%170, %174)
node %176 : bv<37> = concat(%170, %175)
node %177 : bv<38> = concat(%170, %176)
node %178 : bv<39> = concat(%170, %177)
node %179 : bv<40> = concat(%170, %178)
node %180 : bv<41> = concat(%170, %179)
node %181 : bv<42> = concat(%170, %180)
node %182 : bv<43> = concat(%170, %181)
node %183 : bv<44> = concat(%170, %182)
node %184 : bv<45> = concat(%170, %183)
node %185 : bv<46> = concat(%170, %184)
node %186 : bv<47> = concat(%170, %185)
node %187 : bv<48> = concat(%170, %186)
node %188 : bv<3> = OPMODE_mux[6:4]
node _procmux_617_CMP0 : bv<1> = eq(%188, 3'b101)
node %1118 : bv<48> = ite(_procmux_617_CMP0, %187, %1117)
node _procmux_618_CMP0 : bv<1> = eq(%188, 3'b100)
node %1119 : bv<48> = ite(_procmux_618_CMP0, P_FDBK_in, %1118)
node _procmux_619_CMP0 : bv<1> = eq(%188, 3'b11)
node %1120 : bv<48> = ite(_procmux_619_CMP0, C_DATA_in, %1119)
node _procmux_620_CMP0 : bv<1> = eq(%188, 3'b10)
node %1121 : bv<48> = ite(_procmux_620_CMP0, P_FDBK_in, %1120)
node _procmux_621_CMP0 : bv<1> = eq(%188, 3'b1)
node %1122 : bv<48> = ite(_procmux_621_CMP0, PCIN, %1121)
node _procmux_622_CMP0 : bv<1> = eq(%188, 3'b0)
node zmux : bv<48> = ite(_procmux_622_CMP0, 48'x0, %1122)
node ALUMODE_in : bv<4> = xor(ALUMODE, IS_ALUMODE_INVERTED)
node ALUMODEREG_BIN : bv<1> = ALUMODEREG[0]
node %89 : bv<1> = eq(ALUMODEREG_BIN, 1'b1)
node ALUMODE_DATA : bv<4> = ite(%89, ALUMODE_reg, ALUMODE_in)
node %91 : bv<1> = ALUMODE_DATA[0]
node %92 : bv<2> = concat(%91, %91)
node %93 : bv<3> = concat(%91, %92)
node %94 : bv<4> = concat(%91, %93)
node %95 : bv<5> = concat(%91, %94)
node %96 : bv<6> = concat(%91, %95)
node %97 : bv<7> = concat(%91, %96)
node %98 : bv<8> = concat(%91, %97)
node %99 : bv<9> = concat(%91, %98)
node %100 : bv<10> = concat(%91, %99)
node %101 : bv<11> = concat(%91, %100)
node %102 : bv<12> = concat(%91, %101)
node %103 : bv<13> = concat(%91, %102)
node %104 : bv<14> = concat(%91, %103)
node %105 : bv<15> = concat(%91, %104)
node %106 : bv<16> = concat(%91, %105)
node %107 : bv<17> = concat(%91, %106)
node %108 : bv<18> = concat(%91, %107)
node %109 : bv<19> = concat(%91, %108)
node %110 : bv<20> = concat(%91, %109)
node %111 : bv<21> = concat(%91, %110)
node %112 : bv<22> = concat(%91, %111)
node %113 : bv<23> = concat(%91, %112)
node %114 : bv<24> = concat(%91, %113)
node %115 : bv<25> = concat(%91, %114)
node %116 : bv<26> = concat(%91, %115)
node %117 : bv<27> = concat(%91, %116)
node %118 : bv<28> = concat(%91, %117)
node %119 : bv<29> = concat(%91, %118)
node %120 : bv<30> = concat(%91, %119)
node %121 : bv<31> = concat(%91, %120)
node %122 : bv<32> = concat(%91, %121)
node %123 : bv<33> = concat(%91, %122)
node %124 : bv<34> = concat(%91, %123)
node %125 : bv<35> = concat(%91, %124)
node %126 : bv<36> = concat(%91, %125)
node %127 : bv<37> = concat(%91, %126)
node %128 : bv<38> = concat(%91, %127)
node %129 : bv<39> = concat(%91, %128)
node %130 : bv<40> = concat(%91, %129)
node %131 : bv<41> = concat(%91, %130)
node %132 : bv<42> = concat(%91, %131)
node %133 : bv<43> = concat(%91, %132)
node %134 : bv<44> = concat(%91, %133)
node %135 : bv<45> = concat(%91, %134)
node %136 : bv<46> = concat(%91, %135)
node %137 : bv<47> = concat(%91, %136)
node %138 : bv<48> = concat(%91, %137)
node z_optinv : bv<48> = xor(%138, zmux)
node %249 : bv<48> = concat(A_ALU, B2_DATA)
node %250 : bv<2> = OPMODE_mux[1:0]
node _procmux_629_CMP0 : bv<1> = eq(%250, 2'b11)
node %252 : bv<48> = ite(_procmux_629_CMP0, %249, _input_1)
node _procmux_630_CMP0 : bv<1> = eq(%250, 2'b10)
node %1125 : bv<48> = ite(_procmux_630_CMP0, P_FDBK_in, %252)
node %314 : bv<27> = A_ALU[26:0]
node %316 : bv<27> = A1_reg[26:0]
node INMODE_in : bv<5> = xor(INMODE, IS_INMODE_INVERTED)
node INMODEREG_BIN : bv<1> = INMODEREG[0]
node %310 : bv<1> = eq(INMODEREG_BIN, 1'b1)
node INMODE_mux : bv<5> = ite(%310, INMODE_reg, INMODE_in)
node %317 : bv<1> = INMODE_mux[0]
node %318 : bv<1> = eq(%317, 1'b1)
node _procmux_462 : bv<27> = ite(%318, %316, %314)
node %331 : bv<1> = INMODE_mux[1]
node %322 : bv<8> = zext(5'b1, 3)
node PREADDINSEL_REG : bv<8> = concat(3'b0, PREADDINSEL)
node %323 : bv<1> = eq(PREADDINSEL_REG, %322)
node %324 : bv<32> = ite(%323, 32'x1, 32'x0)
node %325 : bv<8> = zext(5'b0, 3)
node %326 : bv<1> = eq(PREADDINSEL_REG, %325)
node %327 : bv<32> = ite(%326, 32'x0, %324)
node PREADDINSEL_BIN : bv<1> = %327[0]
node %329 : bv<32> = zext(PREADDINSEL_BIN, 31)
node %330 : bv<1> = eq(%329, 32'x0)
node %332 : bv<1> = and(%330, %331)
node _procmux_465 : bv<27> = ite(%332, _input_2, _procmux_462)
node A2A1 : bv<27> = ite(%332, 27'x0, _procmux_465)
node %336 : bv<1> = INMODE_mux[4]
node %337 : bv<1> = eq(%336, 1'b1)
node _procmux_453 : bv<18> = ite(%337, B1_DATA_out, B2_DATA)
node %340 : bv<1> = eq(%329, 32'x1)
node %341 : bv<1> = and(%340, %331)
node _procmux_456 : bv<18> = ite(%341, _input_3, _procmux_453)
node B2B1 : bv<18> = ite(%341, 18'x0, _procmux_456)
node %345 : bv<1> = B2B1[17]
node %346 : bv<19> = concat(%345, B2B1)
node %347 : bv<20> = concat(%345, %346)
node %348 : bv<21> = concat(%345, %347)
node %349 : bv<22> = concat(%345, %348)
node %350 : bv<23> = concat(%345, %349)
node %351 : bv<24> = concat(%345, %350)
node %352 : bv<25> = concat(%345, %351)
node %353 : bv<26> = concat(%345, %352)
node %354 : bv<27> = concat(%345, %353)
node PREADD_AB : bv<27> = ite(%340, %354, A2A1)
node DREG_BIN : bv<1> = DREG[0]
node %289 : bv<64> = zext(5'b10100, 59)
node USE_MULT_REG : bv<64> = concat(59'x0, USE_MULT)
node %290 : bv<1> = eq(USE_MULT_REG, %289)
node %291 : bv<32> = ite(%290, 32'x2, 32'x0)
node %293 : bv<64> = zext(5'b10010, 59)
node %294 : bv<1> = eq(USE_MULT_REG, %293)
node %295 : bv<32> = ite(%294, 32'x1, %291)
node %297 : bv<64> = zext(5'b1010, 59)
node %298 : bv<1> = eq(USE_MULT_REG, %297)
node %299 : bv<32> = ite(%298, 32'x0, %295)
node USE_MULT_BIN : bv<2> = %299[1:0]
node %301 : bv<32> = zext(USE_MULT_BIN, 30)
node %302 : bv<1> = eq(%301, 32'x2)
node %264 : bv<16> = zext(5'b10, 11)
node BMULTSEL_REG : bv<16> = concat(11'x0, BMULTSEL)
node %275 : bv<1> = eq(BMULTSEL_REG, %264)
node %276 : bv<32> = ite(%275, 32'x1, 32'x0)
node %278 : bv<16> = zext(5'b1, 11)
node %279 : bv<1> = eq(BMULTSEL_REG, %278)
node %280 : bv<32> = ite(%279, 32'x0, %276)
node BMULTSEL_BIN : bv<1> = %280[0]
node %282 : bv<32> = zext(BMULTSEL_BIN, 31)
node %283 : bv<1> = eq(%282, 32'x0)
node AMULTSEL_REG : bv<16> = concat(11'x0, AMULTSEL)
node %265 : bv<1> = eq(AMULTSEL_REG, %264)
node %266 : bv<32> = ite(%265, 32'x1, 32'x0)
node %268 : bv<16> = zext(5'b0, 11)
node %269 : bv<1> = eq(AMULTSEL_REG, %268)
node %270 : bv<32> = ite(%269, 32'x0, %266)
node AMULTSEL_BIN : bv<1> = %270[0]
node %272 : bv<32> = zext(AMULTSEL_BIN, 31)
node %273 : bv<1> = eq(%272, 32'x0)
node %284 : bv<1> = and(%273, %283)
node %303 : bv<1> = or(%284, %302)
node DREG_INT : bv<1> = ite(%303, 1'b0, DREG_BIN)
node %305 : bv<1> = eq(DREG_INT, 1'b1)
node D_DATA : bv<27> = ite(%305, D_DATA_reg, D)
node %312 : bv<1> = INMODE_mux[2]
node D_DATA_mux : bv<27> = ite(%312, D_DATA, 27'x0)
node %356 : bv<27> = add(D_DATA_mux, PREADD_AB)
node %357 : bv<27> = sub(D_DATA_mux, PREADD_AB)
node %358 : bv<1> = INMODE_mux[3]
node AD_in : bv<27> = ite(%358, %357, %356)
node ADREG_BIN : bv<1> = ADREG[0]
node ADREG_INT : bv<1> = ite(%303, 1'b0, ADREG_BIN)
node %363 : bv<1> = eq(ADREG_INT, 1'b1)
node AD_DATA : bv<27> = ite(%363, AD_DATA_reg, AD_in)
node %385 : bv<18> = AD_DATA[17:0]
node b_mult_mux : bv<18> = ite(%283, B2B1, %385)
node BMULT17_in : bv<1> = b_mult_mux[17]
node %388 : bv<19> = concat(BMULT17_in, b_mult_mux)
node %389 : bv<20> = concat(BMULT17_in, %388)
node %390 : bv<21> = concat(BMULT17_in, %389)
node %391 : bv<22> = concat(BMULT17_in, %390)
node %392 : bv<23> = concat(BMULT17_in, %391)
node %393 : bv<24> = concat(BMULT17_in, %392)
node %394 : bv<25> = concat(BMULT17_in, %393)
node %395 : bv<26> = concat(BMULT17_in, %394)
node %396 : bv<27> = concat(BMULT17_in, %395)
node %397 : bv<28> = concat(BMULT17_in, %396)
node %398 : bv<29> = concat(BMULT17_in, %397)
node %399 : bv<30> = concat(BMULT17_in, %398)
node %400 : bv<31> = concat(BMULT17_in, %399)
node %401 : bv<32> = concat(BMULT17_in, %400)
node %402 : bv<33> = concat(BMULT17_in, %401)
node %403 : bv<34> = concat(BMULT17_in, %402)
node %404 : bv<35> = concat(BMULT17_in, %403)
node %405 : bv<36> = concat(BMULT17_in, %404)
node %406 : bv<37> = concat(BMULT17_in, %405)
node %407 : bv<38> = concat(BMULT17_in, %406)
node %408 : bv<39> = concat(BMULT17_in, %407)
node %409 : bv<40> = concat(BMULT17_in, %408)
node %410 : bv<41> = concat(BMULT17_in, %409)
node %411 : bv<42> = concat(BMULT17_in, %410)
node %412 : bv<43> = concat(BMULT17_in, %411)
node %413 : bv<44> = concat(BMULT17_in, %412)
node %414 : bv<45> = concat(BMULT17_in, %413)
node a_mult_mux : bv<27> = ite(%273, A2A1, AD_DATA)
node AMULT26_in : bv<1> = a_mult_mux[26]
node %367 : bv<28> = concat(AMULT26_in, a_mult_mux)
node %368 : bv<29> = concat(AMULT26_in, %367)
node %369 : bv<30> = concat(AMULT26_in, %368)
node %370 : bv<31> = concat(AMULT26_in, %369)
node %371 : bv<32> = concat(AMULT26_in, %370)
node %372 : bv<33> = concat(AMULT26_in, %371)
node %373 : bv<34> = concat(AMULT26_in, %372)
node %374 : bv<35> = concat(AMULT26_in, %373)
node %375 : bv<36> = concat(AMULT26_in, %374)
node %376 : bv<37> = concat(AMULT26_in, %375)
node %377 : bv<38> = concat(AMULT26_in, %376)
node %378 : bv<39> = concat(AMULT26_in, %377)
node %379 : bv<40> = concat(AMULT26_in, %378)
node %380 : bv<41> = concat(AMULT26_in, %379)
node %381 : bv<42> = concat(AMULT26_in, %380)
node %382 : bv<43> = concat(AMULT26_in, %381)
node %383 : bv<44> = concat(AMULT26_in, %382)
node %384 : bv<45> = concat(AMULT26_in, %383)
node %415 : bv<45> = mul(%384, %414)
node mult : bv<45> = ite(%302, 45'x0, %415)
node %418 : bv<44> = mult[43:0]
node %420 : bv<44> = and(%418, 44'x55555555555)
node U_in : bv<45> = concat(1'b1, %420)
node MREG_BIN : bv<1> = MREG[0]
node %424 : bv<1> = eq(MREG_BIN, 1'b1)
node U_DATA : bv<45> = ite(%424, U_DATA_reg, U_in)
node %429 : bv<48> = zext(5'b11001, 43)
node USE_SIMD_REG : bv<48> = concat(43'x0, USE_SIMD)
node %430 : bv<1> = eq(USE_SIMD_REG, %429)
node %431 : bv<32> = ite(%430, 32'x2, 32'x0)
node %433 : bv<48> = zext(5'b10011, 43)
node %434 : bv<1> = eq(USE_SIMD_REG, %433)
node %435 : bv<32> = ite(%434, 32'x1, %431)
node %437 : bv<48> = zext(5'b1100, 43)
node %438 : bv<1> = eq(USE_SIMD_REG, %437)
node %439 : bv<32> = ite(%438, 32'x0, %435)
node USE_SIMD_BIN : bv<2> = %439[1:0]
node %441 : bv<32> = zext(USE_SIMD_BIN, 30)
node %442 : bv<1> = eq(%441, 32'x0)
node U_DATA_in : bv<45> = ite(%442, U_DATA, 45'x100000000000)
node %444 : bv<1> = U_DATA_in[44]
node %445 : bv<46> = concat(%444, U_DATA_in)
node %446 : bv<47> = concat(%444, %445)
node %447 : bv<48> = concat(%444, %446)
node _procmux_631_CMP0 : bv<1> = eq(%250, 2'b1)
node %1126 : bv<48> = ite(_procmux_631_CMP0, %447, %1125)
node %452 : bv<2> = concat(MULTSIGNIN, 1'b0)
node %453 : bv<48> = concat(46'x0, %452)
node x_mac_cascd : bv<48> = ite(_procmux_618_CMP0, %453, 48'x0)
node _procmux_632_CMP0 : bv<1> = eq(%250, 2'b0)
node xmux : bv<48> = ite(_procmux_632_CMP0, x_mac_cascd, %1126)
node %1128 : bv<48> = and(xmux, z_optinv)
node %459 : bv<2> = OPMODE_mux[3:2]
node _procmux_624_CMP0 : bv<1> = eq(%459, 2'b11)
node %461 : bv<48> = ite(_procmux_624_CMP0, C_DATA_in, _input_4)
node _procmux_625_CMP0 : bv<1> = eq(%459, 2'b10)
node %464 : bv<48> = ite(_procmux_625_CMP0, 48'xffffffffffff, %461)
node %466 : bv<44> = and(%418, 44'xaaaaaaaaaaa)
node %467 : bv<1> = mult[44]
node %468 : bv<1> = not(%467)
node V_in : bv<45> = concat(%468, %466)
node V_DATA : bv<45> = ite(%424, V_DATA_reg, V_in)
node V_DATA_in : bv<45> = ite(%442, V_DATA, 45'x100000000000)
node %473 : bv<48> = concat(3'b0, V_DATA_in)
node _procmux_626_CMP0 : bv<1> = eq(%459, 2'b1)
node %475 : bv<48> = ite(_procmux_626_CMP0, %473, %464)
node _procmux_627_CMP0 : bv<1> = eq(%459, 2'b0)
node ymux : bv<48> = ite(_procmux_627_CMP0, 48'x0, %475)
node %1129 : bv<48> = and(z_optinv, ymux)
node %1130 : bv<48> = and(xmux, ymux)
node %1131 : bv<48> = or(%1130, %1129)
node co : bv<48> = or(%1131, %1128)
node %761 : bv<48> = zext(32'x0, 16)
node %752 : bv<1> = ALUMODE_DATA[2]
node comux : bv<48> = ite(%752, %761, co)
node %1134 : bv<11> = comux[10:0]
node %1135 : bv<12> = concat(%1134, 1'b0)
node %764 : bv<1> = eq(%441, 32'x1)
node %765 : bv<1> = not(%764)
node %1136 : bv<1> = comux[11]
node %1137 : bv<1> = and(%1136, %765)
node %1138 : bv<13> = concat(%1137, %1135)
node %1139 : bv<11> = comux[22:12]
node %1140 : bv<24> = concat(%1139, %1138)
node %1141 : bv<1> = comux[23]
node %1142 : bv<1> = and(%1141, %442)
node %1143 : bv<25> = concat(%1142, %1140)
node %1144 : bv<11> = comux[34:24]
node %1145 : bv<36> = concat(%1144, %1143)
node %1146 : bv<1> = comux[35]
node %1147 : bv<1> = and(%1146, %765)
node %1148 : bv<37> = concat(%1147, %1145)
node %1149 : bv<11> = comux[46:36]
node %1150 : bv<48> = concat(%1149, %1148)
node %1151 : bv<48> = xor(z_optinv, xmux)
node s : bv<48> = xor(%1151, ymux)
node %751 : bv<1> = ALUMODE_DATA[3]
node smux : bv<48> = ite(%751, co, s)
node %1154 : bv<48> = xor(smux, %1150)
node smux_w : bv<48> = xor(%1154, wmux)
node %1156 : bv<12> = smux_w[11:0]
node %1157 : bv<13> = zext(%1156, 1)
node %1158 : bv<1> = not(P_FDBK_47_in)
node CARRYINSELREG_BIN : bv<1> = CARRYINSELREG[0]
node %712 : bv<1> = eq(CARRYINSELREG_BIN, 1'b1)
node CARRYINSEL_mux : bv<3> = ite(%712, CARRYINSEL_reg, CARRYINSEL)
node _procmux_584_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b111)
node %1159 : bv<1> = ite(_procmux_584_CMP0, %1158, _input_5)
node %717 : bv<1> = xor(AMULT26_in, BMULT17_in)
node c_mult : bv<1> = not(%717)
node multcarryin_data : bv<1> = ite(%424, qmultcarryin, c_mult)
node %721 : bv<1> = not(multcarryin_data)
node _procmux_585_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b110)
node %1160 : bv<1> = ite(_procmux_585_CMP0, %721, %1159)
node _procmux_586_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b101)
node %1161 : bv<1> = ite(_procmux_586_CMP0, P_FDBK_47_in, %1160)
node %729 : bv<1> = COUT_reg[3]
node CCOUT_in : bv<1> = xor(ALUMODE10_reg, %729)
node %731 : bv<1> = not(CCOUT_in)
node _procmux_587_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b100)
node %1162 : bv<1> = ite(_procmux_587_CMP0, %731, %1161)
node %734 : bv<1> = not(%170)
node _procmux_588_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b11)
node %1163 : bv<1> = ite(_procmux_588_CMP0, %734, %1162)
node %737 : bv<1> = not(CARRYCASCIN)
node _procmux_589_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b10)
node %1164 : bv<1> = ite(_procmux_589_CMP0, %737, %1163)
node _procmux_590_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b1)
node %1165 : bv<1> = ite(_procmux_590_CMP0, %170, %1164)
node CARRYIN_in : bv<1> = xor(CARRYIN, IS_CARRYIN_INVERTED)
node CARRYINREG_BIN : bv<1> = CARRYINREG[0]
node %745 : bv<1> = eq(CARRYINREG_BIN, 1'b1)
node CARRYIN_mux : bv<1> = ite(%745, CARRYIN_reg, CARRYIN_in)
node %747 : bv<1> = not(CARRYIN_mux)
node _procmux_591_CMP0 : bv<1> = eq(CARRYINSEL_mux, 3'b0)
node cin_b : bv<1> = ite(_procmux_591_CMP0, %747, %1165)
node %1167 : bv<1> = not(cin_b)
node %753 : bv<1> = or(%751, %752)
node cin : bv<1> = ite(%753, 1'b0, %1167)
node %1169 : bv<48> = and(smux, wmux)
node %1170 : bv<48> = and(wmux, %1150)
node %1171 : bv<48> = and(smux, %1150)
node %1172 : bv<48> = or(%1171, %1170)
node comux_w : bv<48> = or(%1172, %1169)
node %1174 : bv<11> = comux_w[10:0]
node %1175 : bv<12> = concat(%1174, cin)
node %1176 : bv<13> = zext(%1175, 1)
node s0 : bv<13> = add(%1176, %1157)
node %1178 : bv<1> = s0[12]
node intc1 : bv<1> = and(%765, %1178)
node %1180 : bv<13> = zext(intc1, 12)
node %1181 : bv<12> = smux_w[23:12]
node %1182 : bv<13> = zext(%1181, 1)
node %1183 : bv<1> = comux_w[11]
node co12_lsb : bv<1> = and(%765, %1183)
node %1185 : bv<11> = comux_w[22:12]
node %1186 : bv<12> = concat(%1185, co12_lsb)
node %1187 : bv<13> = concat(1'b0, %1186)
node %1188 : bv<13> = add(%1187, %1182)
node s1 : bv<13> = add(%1188, %1180)
node %1190 : bv<1> = s1[12]
node intc2 : bv<1> = and(%442, %1190)
node %1192 : bv<13> = zext(intc2, 12)
node %1193 : bv<12> = smux_w[35:24]
node %1194 : bv<13> = zext(%1193, 1)
node %1195 : bv<1> = comux_w[23]
node co24_lsb : bv<1> = and(%442, %1195)
node %1197 : bv<11> = comux_w[34:24]
node %1198 : bv<12> = concat(%1197, co24_lsb)
node %1199 : bv<13> = concat(1'b0, %1198)
node %1200 : bv<13> = add(%1199, %1194)
node s2 : bv<13> = add(%1200, %1192)
node %1202 : bv<1> = s2[12]
node intc3 : bv<1> = and(%765, %1202)
node %1204 : bv<14> = zext(intc3, 13)
node %1205 : bv<12> = smux_w[47:36]
node %1206 : bv<1> = comux[47]
node %1207 : bv<13> = concat(%1206, %1205)
node %1208 : bv<14> = concat(1'b0, %1207)
node %1209 : bv<1> = comux_w[35]
node co36_lsb : bv<1> = and(%765, %1209)
node %1211 : bv<12> = comux_w[47:36]
node %1212 : bv<13> = concat(%1211, co36_lsb)
node %1213 : bv<14> = concat(1'b0, %1212)
node %1214 : bv<14> = add(%1213, %1208)
node s3 : bv<14> = add(%1214, %1204)
node %1265 : bv<1> = s3[12]
node %660 : bv<1> = ALUMODE_DATA[1]
node ALUMODE10_in : bv<1> = and(%91, %660)
node cout3 : bv<1> = xor(ALUMODE10_in, %1265)
node PREG_BIN : bv<1> = PREG[0]
node %645 : bv<1> = eq(PREG_BIN, 1'b1)
output CARRYCASCOUT : bv<1> = ite(%645, CCOUT_in, xor(ALUMODE10_in, cout3))
node %1248 : bv<1> = xor(%1183, %1178)
node %1249 : bv<1> = xor(%1248, %1136)
node cout0 : bv<1> = xor(ALUMODE10_in, %1249)
node %932 : bv<2> = ALUMODE_DATA[3:2]
node %933 : bv<1> = eq(%932, 2'b0)
node %934 : bv<1> = not(%933)
node %929 : bv<4> = OPMODE_mux[3:0]
node %931 : bv<1> = eq(%929, 4'b101)
node mult_or_logic : bv<1> = or(%931, %934)
node cout_0 : bv<1> = ite(mult_or_logic, 1'b0, cout0)
node %1252 : bv<1> = ite(%764, cout_0, 1'b0)
node %1253 : bv<1> = xor(%1195, %1190)
node %1254 : bv<1> = xor(%1253, %1141)
node cout1 : bv<1> = xor(ALUMODE10_in, %1254)
node cout_1 : bv<1> = ite(mult_or_logic, 1'b0, cout1)
node %942 : bv<1> = not(%442)
node %1257 : bv<1> = ite(%942, cout_1, 1'b0)
node %1258 : bv<2> = concat(%1257, %1252)
node %1259 : bv<1> = xor(%1209, %1202)
node %1260 : bv<1> = xor(%1259, %1146)
node cout2 : bv<1> = xor(ALUMODE10_in, %1260)
node cout_2 : bv<1> = ite(mult_or_logic, 1'b0, cout2)
node %1263 : bv<1> = ite(%764, cout_2, 1'b0)
node %1264 : bv<3> = concat(%1263, %1258)
node COUT_in : bv<4> = concat(cout3, %1264)
output CARRYOUT : bv<4> = ite(%645, COUT_reg, COUT_in)
node MULTSIGN_ALU_in : bv<1> = s3[13]
output MULTSIGNOUT : bv<1> = ite(%645, MULTSIGN_ALU_reg, MULTSIGN_ALU_in)
node %853 : bv<46> = C_DATA_in[45:0]
node %854 : bv<46> = not(%853)
node %855 : bv<48> = concat(%854, 2'b0)
node %860 : bv<112> = zext(5'b10111, 107)
node SEL_MASK_REG : bv<112> = concat(107'x0, SEL_MASK)
node %861 : bv<1> = eq(SEL_MASK_REG, %860)
node %862 : bv<32> = ite(%861, 32'x3, 32'x0)
node %864 : bv<112> = zext(5'b10110, 107)
node %865 : bv<1> = eq(SEL_MASK_REG, %864)
node %866 : bv<32> = ite(%865, 32'x2, %862)
node %867 : bv<112> = zext(5'b10001, 107)
node %868 : bv<1> = eq(SEL_MASK_REG, %867)
node %869 : bv<32> = ite(%868, 32'x1, %866)
node %871 : bv<112> = zext(5'b1000, 107)
node %872 : bv<1> = eq(SEL_MASK_REG, %871)
node %873 : bv<32> = ite(%872, 32'x0, %869)
node SEL_MASK_BIN : bv<2> = %873[1:0]
node %875 : bv<32> = zext(SEL_MASK_BIN, 30)
node %876 : bv<1> = eq(%875, 32'x3)
node %877 : bv<48> = ite(%876, %855, MASK)
node %878 : bv<47> = C_DATA_in[46:0]
node %879 : bv<47> = not(%878)
node %880 : bv<48> = concat(%879, 1'b0)
node %881 : bv<1> = eq(%875, 32'x2)
node %882 : bv<48> = ite(%881, %880, %877)
node %883 : bv<1> = eq(%875, 32'x1)
node %884 : bv<48> = ite(%883, C_DATA_in, %882)
node %888 : bv<72> = zext(5'b10101, 67)
node USE_PATTERN_DETECT_REG : bv<72> = concat(67'x0, USE_PATTERN_DETECT)
node %889 : bv<1> = eq(USE_PATTERN_DETECT_REG, %888)
node %890 : bv<32> = ite(%889, 32'x1, 32'x0)
node %892 : bv<72> = zext(5'b1011, 67)
node %893 : bv<1> = eq(USE_PATTERN_DETECT_REG, %892)
node %894 : bv<32> = ite(%893, 32'x0, %890)
node USE_PATTERN_DETECT_BIN : bv<1> = %894[0]
node %896 : bv<32> = zext(USE_PATTERN_DETECT_BIN, 31)
node %897 : bv<1> = eq(%896, 32'x0)
node the_mask : bv<48> = ite(%897, 48'xffffffffffff, %884)
node %1218 : bv<12> = s0[11:0]
node %1219 : bv<12> = s1[11:0]
node %1220 : bv<24> = concat(%1219, %1218)
node %1221 : bv<12> = s2[11:0]
node %1222 : bv<36> = concat(%1221, %1220)
node %1223 : bv<12> = s3[11:0]
node %1224 : bv<48> = concat(%1223, %1222)
node %661 : bv<2> = concat(%660, %660)
node %662 : bv<3> = concat(%660, %661)
node %663 : bv<4> = concat(%660, %662)
node %664 : bv<5> = concat(%660, %663)
node %665 : bv<6> = concat(%660, %664)
node %666 : bv<7> = concat(%660, %665)
node %667 : bv<8> = concat(%660, %666)
node %668 : bv<9> = concat(%660, %667)
node %669 : bv<10> = concat(%660, %668)
node %670 : bv<11> = concat(%660, %669)
node %671 : bv<12> = concat(%660, %670)
node %672 : bv<13> = concat(%660, %671)
node %673 : bv<14> = concat(%660, %672)
node %674 : bv<15> = concat(%660, %673)
node %675 : bv<16> = concat(%660, %674)
node %676 : bv<17> = concat(%660, %675)
node %677 : bv<18> = concat(%660, %676)
node %678 : bv<19> = concat(%660, %677)
node %679 : bv<20> = concat(%660, %678)
node %680 : bv<21> = concat(%660, %679)
node %681 : bv<22> = concat(%660, %680)
node %682 : bv<23> = concat(%660, %681)
node %683 : bv<24> = concat(%660, %682)
node %684 : bv<25> = concat(%660, %683)
node %685 : bv<26> = concat(%660, %684)
node %686 : bv<27> = concat(%660, %685)
node %687 : bv<28> = concat(%660, %686)
node %688 : bv<29> = concat(%660, %687)
node %689 : bv<30> = concat(%660, %688)
node %690 : bv<31> = concat(%660, %689)
node %691 : bv<32> = concat(%660, %690)
node %692 : bv<33> = concat(%660, %691)
node %693 : bv<34> = concat(%660, %692)
node %694 : bv<35> = concat(%660, %693)
node %695 : bv<36> = concat(%660, %694)
node %696 : bv<37> = concat(%660, %695)
node %697 : bv<38> = concat(%660, %696)
node %698 : bv<39> = concat(%660, %697)
node %699 : bv<40> = concat(%660, %698)
node %700 : bv<41> = concat(%660, %699)
node %701 : bv<42> = concat(%660, %700)
node %702 : bv<43> = concat(%660, %701)
node %703 : bv<44> = concat(%660, %702)
node %704 : bv<45> = concat(%660, %703)
node %705 : bv<46> = concat(%660, %704)
node %706 : bv<47> = concat(%660, %705)
node %707 : bv<48> = concat(%660, %706)
node ALU_OUT_in : bv<48> = xor(%707, %1224)
node %649 : bv<56> = zext(5'b10001, 51)
node SEL_PATTERN_REG : bv<56> = concat(51'x0, SEL_PATTERN)
node %650 : bv<1> = eq(SEL_PATTERN_REG, %649)
node %651 : bv<32> = ite(%650, 32'x1, 32'x0)
node %653 : bv<56> = zext(5'b1001, 51)
node %654 : bv<1> = eq(SEL_PATTERN_REG, %653)
node %655 : bv<32> = ite(%654, 32'x0, %651)
node SEL_PATTERN_BIN : bv<1> = %655[0]
node %657 : bv<32> = zext(SEL_PATTERN_BIN, 31)
node %658 : bv<1> = eq(%657, 32'x0)
node the_pattern : bv<48> = ite(%658, PATTERN, C_DATA_in)
node %1226 : bv<48> = xor(the_pattern, ALU_OUT_in)
node %1227 : bv<48> = not(%1226)
node %1228 : bv<48> = or(%1227, the_mask)
node pdet_o : bv<1> = eq(%1228, 48'xffffffffffff)
node overflow_data : bv<1> = ite(%645, pdet_o_reg2, pdet_o)
node %1242 : bv<48> = or(%1226, the_mask)
node pdetb_o : bv<1> = eq(%1242, 48'xffffffffffff)
node pdetb_o_mux : bv<1> = ite(%645, pdetb_o_reg1, pdetb_o)
node pdet_o_mux : bv<1> = ite(%645, pdet_o_reg1, pdet_o)
node %1231 : bv<1> = not(pdet_o_mux)
node %1422 : bv<1> = and(%1231, not(pdetb_o_mux))
node %913 : bv<1> = eq(%896, 32'x1)
output OVERFLOW : bv<1> = ite(%913, and(%1422, overflow_data), 1'b0)
output PATTERNBDETECT : bv<1> = ite(1'b1, pdetb_o_mux, 1'b0)
output PATTERNDETECT : bv<1> = ite(1'b1, pdet_o_mux, 1'b0)
output PCOUT : bv<48> = ite(%645, P_FDBK_in, ALU_OUT_in)
output UNDERFLOW : bv<1> = ite(%913, and(%1422, ite(%645, pdetb_o_reg2, pdetb_o)), 1'b0)
node %1271 : bv<6> = s[11:6]
node %1272 : bv<1> = %1271[5]
node %1273 : bv<1> = %1271[4]
node %1274 : bv<1> = %1271[3]
node %1275 : bv<1> = %1271[2]
node %1276 : bv<1> = %1271[1]
node %1277 : bv<1> = %1271[0]
node %1278 : bv<1> = xor(%1277, %1276)
node %1279 : bv<1> = xor(%1278, %1275)
node %1280 : bv<1> = xor(%1279, %1274)
node %1281 : bv<1> = xor(%1280, %1273)
node %1282 : bv<1> = xor(%1281, %1272)
node %1283 : bv<32> = concat(31'x0, %1282)
node %496 : bv<40> = zext(5'b11000, 35)
node USE_WIDEXOR_REG : bv<40> = concat(35'x0, USE_WIDEXOR)
node %497 : bv<1> = eq(USE_WIDEXOR_REG, %496)
node %498 : bv<32> = ite(%497, 32'x1, 32'x0)
node %500 : bv<40> = zext(5'b1101, 35)
node %501 : bv<1> = eq(USE_WIDEXOR_REG, %500)
node %502 : bv<32> = ite(%501, 32'x0, %498)
node USE_WIDEXOR_BIN : bv<1> = %502[0]
node %1284 : bv<32> = ite(USE_WIDEXOR_BIN, %1283, 32'x0)
node xor_12b : bv<1> = %1284[0]
node %1286 : bv<6> = s[5:0]
node %1287 : bv<1> = %1286[5]
node %1288 : bv<1> = %1286[4]
node %1289 : bv<1> = %1286[3]
node %1290 : bv<1> = %1286[2]
node %1291 : bv<1> = %1286[1]
node %1292 : bv<1> = %1286[0]
node %1293 : bv<1> = xor(%1292, %1291)
node %1294 : bv<1> = xor(%1293, %1290)
node %1295 : bv<1> = xor(%1294, %1289)
node %1296 : bv<1> = xor(%1295, %1288)
node %1297 : bv<1> = xor(%1296, %1287)
node %1298 : bv<32> = concat(31'x0, %1297)
node %1299 : bv<32> = ite(USE_WIDEXOR_BIN, %1298, 32'x0)
node xor_12a : bv<1> = %1299[0]
node xor_24a : bv<1> = xor(xor_12a, xor_12b)
node %525 : bv<88> = zext(5'b11010, 83)
node XORSIMD_REG : bv<88> = concat(83'x0, XORSIMD)
node %526 : bv<1> = eq(XORSIMD_REG, %525)
node %527 : bv<32> = ite(%526, 32'x1, 32'x0)
node %529 : bv<88> = zext(5'b1110, 83)
node %530 : bv<1> = eq(XORSIMD_REG, %529)
node %531 : bv<32> = ite(%530, 32'x0, %527)
node XORSIMD_BIN : bv<1> = %531[0]
node %1302 : bv<1> = ite(XORSIMD_BIN, xor_12a, xor_24a)
node %1303 : bv<6> = s[23:18]
node %1304 : bv<1> = %1303[5]
node %1305 : bv<1> = %1303[4]
node %1306 : bv<1> = %1303[3]
node %1307 : bv<1> = %1303[2]
node %1308 : bv<1> = %1303[1]
node %1309 : bv<1> = %1303[0]
node %1310 : bv<1> = xor(%1309, %1308)
node %1311 : bv<1> = xor(%1310, %1307)
node %1312 : bv<1> = xor(%1311, %1306)
node %1313 : bv<1> = xor(%1312, %1305)
node %1314 : bv<1> = xor(%1313, %1304)
node %1315 : bv<32> = concat(31'x0, %1314)
node %1316 : bv<32> = ite(USE_WIDEXOR_BIN, %1315, 32'x0)
node xor_12d : bv<1> = %1316[0]
node %1318 : bv<6> = s[17:12]
node %1319 : bv<1> = %1318[5]
node %1320 : bv<1> = %1318[4]
node %1321 : bv<1> = %1318[3]
node %1322 : bv<1> = %1318[2]
node %1323 : bv<1> = %1318[1]
node %1324 : bv<1> = %1318[0]
node %1325 : bv<1> = xor(%1324, %1323)
node %1326 : bv<1> = xor(%1325, %1322)
node %1327 : bv<1> = xor(%1326, %1321)
node %1328 : bv<1> = xor(%1327, %1320)
node %1329 : bv<1> = xor(%1328, %1319)
node %1330 : bv<32> = concat(31'x0, %1329)
node %1331 : bv<32> = ite(USE_WIDEXOR_BIN, %1330, 32'x0)
node xor_12c : bv<1> = %1331[0]
node xor_24b : bv<1> = xor(xor_12c, xor_12d)
node xor_48a : bv<1> = xor(xor_24a, xor_24b)
node %1335 : bv<1> = ite(XORSIMD_BIN, xor_12b, xor_48a)
node %1336 : bv<2> = concat(%1335, %1302)
node %1337 : bv<1> = ite(XORSIMD_BIN, xor_12c, xor_24b)
node %1338 : bv<3> = concat(%1337, %1336)
node %1339 : bv<6> = s[47:42]
node %1340 : bv<1> = %1339[5]
node %1341 : bv<1> = %1339[4]
node %1342 : bv<1> = %1339[3]
node %1343 : bv<1> = %1339[2]
node %1344 : bv<1> = %1339[1]
node %1345 : bv<1> = %1339[0]
node %1346 : bv<1> = xor(%1345, %1344)
node %1347 : bv<1> = xor(%1346, %1343)
node %1348 : bv<1> = xor(%1347, %1342)
node %1349 : bv<1> = xor(%1348, %1341)
node %1350 : bv<1> = xor(%1349, %1340)
node %1351 : bv<32> = concat(31'x0, %1350)
node %1352 : bv<32> = ite(USE_WIDEXOR_BIN, %1351, 32'x0)
node xor_12h : bv<1> = %1352[0]
node %1354 : bv<6> = s[41:36]
node %1355 : bv<1> = %1354[5]
node %1356 : bv<1> = %1354[4]
node %1357 : bv<1> = %1354[3]
node %1358 : bv<1> = %1354[2]
node %1359 : bv<1> = %1354[1]
node %1360 : bv<1> = %1354[0]
node %1361 : bv<1> = xor(%1360, %1359)
node %1362 : bv<1> = xor(%1361, %1358)
node %1363 : bv<1> = xor(%1362, %1357)
node %1364 : bv<1> = xor(%1363, %1356)
node %1365 : bv<1> = xor(%1364, %1355)
node %1366 : bv<32> = concat(31'x0, %1365)
node %1367 : bv<32> = ite(USE_WIDEXOR_BIN, %1366, 32'x0)
node xor_12g : bv<1> = %1367[0]
node xor_24d : bv<1> = xor(xor_12g, xor_12h)
node %1370 : bv<6> = s[35:30]
node %1371 : bv<1> = %1370[5]
node %1372 : bv<1> = %1370[4]
node %1373 : bv<1> = %1370[3]
node %1374 : bv<1> = %1370[2]
node %1375 : bv<1> = %1370[1]
node %1376 : bv<1> = %1370[0]
node %1377 : bv<1> = xor(%1376, %1375)
node %1378 : bv<1> = xor(%1377, %1374)
node %1379 : bv<1> = xor(%1378, %1373)
node %1380 : bv<1> = xor(%1379, %1372)
node %1381 : bv<1> = xor(%1380, %1371)
node %1382 : bv<32> = concat(31'x0, %1381)
node %1383 : bv<32> = ite(USE_WIDEXOR_BIN, %1382, 32'x0)
node xor_12f : bv<1> = %1383[0]
node %1385 : bv<6> = s[29:24]
node %1386 : bv<1> = %1385[5]
node %1387 : bv<1> = %1385[4]
node %1388 : bv<1> = %1385[3]
node %1389 : bv<1> = %1385[2]
node %1390 : bv<1> = %1385[1]
node %1391 : bv<1> = %1385[0]
node %1392 : bv<1> = xor(%1391, %1390)
node %1393 : bv<1> = xor(%1392, %1389)
node %1394 : bv<1> = xor(%1393, %1388)
node %1395 : bv<1> = xor(%1394, %1387)
node %1396 : bv<1> = xor(%1395, %1386)
node %1397 : bv<32> = concat(31'x0, %1396)
node %1398 : bv<32> = ite(USE_WIDEXOR_BIN, %1397, 32'x0)
node xor_12e : bv<1> = %1398[0]
node xor_24c : bv<1> = xor(xor_12e, xor_12f)
node xor_48b : bv<1> = xor(xor_24c, xor_24d)
node xor_96 : bv<1> = xor(xor_48a, xor_48b)
node %1403 : bv<1> = ite(XORSIMD_BIN, xor_12d, xor_96)
node %1404 : bv<4> = concat(%1403, %1338)
node %1405 : bv<1> = ite(XORSIMD_BIN, xor_12e, xor_24c)
node %1406 : bv<5> = concat(%1405, %1404)
node %1407 : bv<1> = ite(XORSIMD_BIN, xor_12f, xor_48b)
node %1408 : bv<6> = concat(%1407, %1406)
node %1409 : bv<1> = ite(XORSIMD_BIN, xor_12g, xor_24d)
node %1410 : bv<7> = concat(%1409, %1408)
node XOR_MX_in : bv<8> = concat(xor_12h, %1410)
output XOROUT : bv<8> = ite(%645, XOR_MX_reg, XOR_MX_in)
node %1032 : bv<1> = and(CEP, PREG_BIN)
node AUTORESET_PRIORITY_REG : bv<40> = concat(35'x0, AUTORESET_PRIORITY)
node auto_reset_pri : bv<1> = or(eq(zext(ite(eq(AUTORESET_PRIORITY_REG, zext(5'b110, 35)), 32'x0, ite(eq(AUTORESET_PRIORITY_REG, zext(5'b10000, 35)), 32'x1, 32'x0))[0], 31), 32'x0), CEP)
node AUTORESET_PATDET_REG : bv<120> = concat(115'x0, AUTORESET_PATDET)
node %994 : bv<32> = zext(ite(eq(AUTORESET_PATDET_REG, zext(5'b11, 115)), 32'x0, ite(eq(AUTORESET_PATDET_REG, zext(5'b100, 115)), 32'x1, ite(eq(AUTORESET_PATDET_REG, zext(5'b101, 115)), 32'x2, 32'x0)))[1:0], 30)
node %1238 : bv<1> = or(xor(RSTP, IS_RSTP_INVERTED), ite(eq(%994, 32'x1), and(auto_reset_pri, pdet_o_mux), ite(eq(%994, 32'x2), and(and(auto_reset_pri, overflow_data), %1231), 1'b0)))
node RSTCTRL_in : bv<1> = xor(RSTCTRL, IS_RSTCTRL_INVERTED)
node RSTB_in : bv<1> = xor(RSTB, IS_RSTB_INVERTED)
node %1051 : bv<1> = or(xor(RSTA, IS_RSTA_INVERTED), %246)
node RSTD_in : bv<1> = xor(RSTD, IS_RSTD_INVERTED)
node %1070 : bv<1> = or(xor(RSTM, IS_RSTM_INVERTED), eq(MREG_BIN, 1'b0))
node RSTALLCARRYIN_in : bv<1> = xor(RSTALLCARRYIN, IS_RSTALLCARRYIN_INVERTED)
state ALUMODE_reg : bv<4>
  [next] ite(xor(RSTALUMODE, IS_RSTALUMODE_INVERTED), 4'b0, ite(CEALUMODE, ALUMODE_in, ALUMODE_reg))
state P_FDBK_in : bv<48>
  [next] ite(%1238, 48'x0, ite(%1032, ALU_OUT_in, P_FDBK_in))
state OPMODE_reg : bv<9>
  [next] ite(RSTCTRL_in, 9'x0, ite(CECTRL, OPMODE_in, OPMODE_reg))
state C_reg : bv<48>
  [next] ite(or(xor(RSTC, IS_RSTC_INVERTED), eq(CREG_BIN, 1'b0)), 48'x0, ite(CEC, C, C_reg))
state B2_reg : bv<18>
  [next] ite(RSTB_in, 18'x0, ite(CEB2, ite(eq(BREG_BIN, 2'b10), B1_DATA_out, _procmux_557), B2_reg))
state A2_reg : bv<30>
  [next] ite(%1051, 30'x0, ite(CEA2, ite(eq(AREG_BIN, 2'b10), A1_reg, _procmux_576), A2_reg))
state D_DATA_reg : bv<27>
  [next] ite(or(RSTD_in, eq(DREG_INT, 1'b0)), 27'x0, ite(CED, D, D_DATA_reg))
state INMODE_reg : bv<5>
  [next] ite(or(xor(RSTINMODE, IS_RSTINMODE_INVERTED), eq(INMODEREG_BIN, 1'b0)), 5'b0, ite(CEINMODE, INMODE_in, INMODE_reg))
state A1_reg : bv<30>
  [next] ite(%1051, 30'x0, ite(CEA1, _procmux_576, A1_reg))
state B1_DATA_out : bv<18>
  [next] ite(or(RSTB_in, %232), 18'x0, ite(CEB1, _procmux_557, B1_DATA_out))
state AD_DATA_reg : bv<27>
  [next] ite(RSTD_in, 27'x0, ite(CEAD, AD_in, AD_DATA_reg))
state U_DATA_reg : bv<45>
  [next] ite(%1070, 45'x0, ite(CEM, U_in, U_DATA_reg))
state V_DATA_reg : bv<45>
  [next] ite(%1070, 45'x0, ite(CEM, V_in, V_DATA_reg))
state XOR_MX_reg : bv<8>
  [next] ite(%1238, 8'b0, ite(%1032, XOR_MX_in, XOR_MX_reg))
state CARRYINSEL_reg : bv<3>
  [next] ite(RSTCTRL_in, 3'b0, ite(CECTRL, CARRYINSEL, CARRYINSEL_reg))
state qmultcarryin : bv<1>
  [next] ite(RSTALLCARRYIN_in, 32'x0, zext(ite(CEM, c_mult, qmultcarryin), 31))[0]
state ALUMODE10_reg : bv<1>
  [next] ite(%1238, 1'b0, ite(%1032, ALUMODE10_in, ALUMODE10_reg))
state COUT_reg : bv<4>
  [next] ite(%1238, 4'b0, ite(%1032, COUT_in, COUT_reg))
state CARRYIN_reg : bv<1>
  [next] ite(RSTALLCARRYIN_in, 1'b0, ite(CECARRYIN, CARRYIN_in, CARRYIN_reg))
state pdet_o_reg1 : bv<1>
  [next] ite(%1238, 1'b0, ite(%1032, pdet_o, pdet_o_reg1))
state pdetb_o_reg1 : bv<1>
  [next] ite(%1238, 1'b0, ite(%1032, pdetb_o, pdetb_o_reg1))
state pdetb_o_reg2 : bv<1>
  [next] ite(%1238, 1'b0, ite(%1032, pdetb_o_reg1, pdetb_o_reg2))
state pdet_o_reg2 : bv<1>
  [next] ite(%1238, 1'b0, ite(%1032, pdet_o_reg1, pdet_o_reg2))
state MULTSIGN_ALU_reg : bv<1>
  [next] ite(%1238, 1'b0, ite(%1032, MULTSIGN_ALU_in, MULTSIGN_ALU_reg))

