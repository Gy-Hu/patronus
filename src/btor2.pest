// Copyright 2023 The Regents of the University of California
// released under BSD 3-Clause License
// author: Kevin Laeufer <laeufer@berkeley.edu>

WHITESPACE = _{ " " | "\t" | "\r" }

btor2File = {SOI ~ lines ~ EOI}
lines = { ((line | WHITESPACE*) ~ NEWLINE)* }

// tokens
number = @{ ASCII_DIGIT+ }
unaryOp = @{ "not" | "inc" | "dec" | "neg" | "redand" | "redor" | "redxor" }
binaryOp = @{ "iff" | "implies" | "sgt" | "ugt" | "sgte" | "ugte" | "slt" | "ult" | "slte" | "ulte" | "and" | "nand" |
              "nor" | "or" | "xnor" | "xor" | "rol" | "ror" | "sll" | "sra" | "srl" | "add" | "mul" | "sdiv" | "udiv" |
              "smod" | "srem" | "urem" | "sub" | "saddo" | "uaddo" | "sdivo" | "udivo" | "smulo" | "umulo" | "ssubo" |
              "usubo" | "concat" | "eq" }

// each line is a declaration that is preceded by a unique ID
line = { number ~ (
declBvSort | declArraySort |
constZero | constOne | constBin | constDec | constHex | constOnes |
declState | declStateInit | declStateNext |
declBinOp |
declBad
)}

// individual commands without their ID
declBvSort = { "sort" ~ "bitvec" ~ number  }
declArraySort = { "sort" ~ "array" ~ number ~ number }
constZero = { "zero" ~ number }
constOne = { "one"  ~ number }
constBin = { "const" ~ number ~ ASCII_BIN_DIGIT* }
constDec = { "constd" ~ number ~ ASCII_DIGIT* }
constHex = { "consth" ~ number ~ ASCII_HEX_DIGIT* }
constOnes = { "ones" ~ number }
declState = { "state" ~ number  }
declStateInit = { "init" ~ number ~ number ~ number }
declStateNext = { "next" ~ number ~ number ~ number }
declBinOp = { binaryOp ~ number ~ number ~ number }
declBad = { "bad" ~ number }